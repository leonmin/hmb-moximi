(global["webpackJsonp"] = global["webpackJsonp"] || []).push([["common/vendor"],{

/***/ 1:
/*!***********************************************************!*\
  !*** ./node_modules/@dcloudio/uni-app-plus/dist/index.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.createApp = createApp;exports.createComponent = createComponent;exports.createPage = createPage;exports.default = void 0;var _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _slicedToArray(arr, i) {return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();}function _nonIterableRest() {throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");}function _iterableToArrayLimit(arr, i) {var _arr = [];var _n = true;var _d = false;var _e = undefined;try {for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i[\"return\"] != null) _i[\"return\"]();} finally {if (_d) throw _e;}}return _arr;}function _arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function _toConsumableArray(arr) {return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();}function _nonIterableSpread() {throw new TypeError(\"Invalid attempt to spread non-iterable instance\");}function _iterableToArray(iter) {if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);}function _arrayWithoutHoles(arr) {if (Array.isArray(arr)) {for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {arr2[i] = arr[i];}return arr2;}}\n\nvar _toString = Object.prototype.toString;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction isFn(fn) {\n  return typeof fn === 'function';\n}\n\nfunction isStr(str) {\n  return typeof str === 'string';\n}\n\nfunction isPlainObject(obj) {\n  return _toString.call(obj) === '[object Object]';\n}\n\nfunction hasOwn(obj, key) {\n  return hasOwnProperty.call(obj, key);\n}\n\nfunction noop() {}\n\n/**\r\n                    * Create a cached version of a pure function.\r\n                    */\nfunction cached(fn) {\n  var cache = Object.create(null);\n  return function cachedFn(str) {\n    var hit = cache[str];\n    return hit || (cache[str] = fn(str));\n  };\n}\n\n/**\r\n   * Camelize a hyphen-delimited string.\r\n   */\nvar camelizeRE = /-(\\w)/g;\nvar camelize = cached(function (str) {\n  return str.replace(camelizeRE, function (_, c) {return c ? c.toUpperCase() : '';});\n});\n\nvar HOOKS = [\n'invoke',\n'success',\n'fail',\n'complete',\n'returnValue'];\n\n\nvar globalInterceptors = {};\nvar scopedInterceptors = {};\n\nfunction mergeHook(parentVal, childVal) {\n  var res = childVal ?\n  parentVal ?\n  parentVal.concat(childVal) :\n  Array.isArray(childVal) ?\n  childVal : [childVal] :\n  parentVal;\n  return res ?\n  dedupeHooks(res) :\n  res;\n}\n\nfunction dedupeHooks(hooks) {\n  var res = [];\n  for (var i = 0; i < hooks.length; i++) {\n    if (res.indexOf(hooks[i]) === -1) {\n      res.push(hooks[i]);\n    }\n  }\n  return res;\n}\n\nfunction removeHook(hooks, hook) {\n  var index = hooks.indexOf(hook);\n  if (index !== -1) {\n    hooks.splice(index, 1);\n  }\n}\n\nfunction mergeInterceptorHook(interceptor, option) {\n  Object.keys(option).forEach(function (hook) {\n    if (HOOKS.indexOf(hook) !== -1 && isFn(option[hook])) {\n      interceptor[hook] = mergeHook(interceptor[hook], option[hook]);\n    }\n  });\n}\n\nfunction removeInterceptorHook(interceptor, option) {\n  if (!interceptor || !option) {\n    return;\n  }\n  Object.keys(option).forEach(function (hook) {\n    if (HOOKS.indexOf(hook) !== -1 && isFn(option[hook])) {\n      removeHook(interceptor[hook], option[hook]);\n    }\n  });\n}\n\nfunction addInterceptor(method, option) {\n  if (typeof method === 'string' && isPlainObject(option)) {\n    mergeInterceptorHook(scopedInterceptors[method] || (scopedInterceptors[method] = {}), option);\n  } else if (isPlainObject(method)) {\n    mergeInterceptorHook(globalInterceptors, method);\n  }\n}\n\nfunction removeInterceptor(method, option) {\n  if (typeof method === 'string') {\n    if (isPlainObject(option)) {\n      removeInterceptorHook(scopedInterceptors[method], option);\n    } else {\n      delete scopedInterceptors[method];\n    }\n  } else if (isPlainObject(method)) {\n    removeInterceptorHook(globalInterceptors, method);\n  }\n}\n\nfunction wrapperHook(hook) {\n  return function (data) {\n    return hook(data) || data;\n  };\n}\n\nfunction isPromise(obj) {\n  return !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof obj.then === 'function';\n}\n\nfunction queue(hooks, data) {\n  var promise = false;\n  for (var i = 0; i < hooks.length; i++) {\n    var hook = hooks[i];\n    if (promise) {\n      promise = Promise.then(wrapperHook(hook));\n    } else {\n      var res = hook(data);\n      if (isPromise(res)) {\n        promise = Promise.resolve(res);\n      }\n      if (res === false) {\n        return {\n          then: function then() {} };\n\n      }\n    }\n  }\n  return promise || {\n    then: function then(callback) {\n      return callback(data);\n    } };\n\n}\n\nfunction wrapperOptions(interceptor) {var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  ['success', 'fail', 'complete'].forEach(function (name) {\n    if (Array.isArray(interceptor[name])) {\n      var oldCallback = options[name];\n      options[name] = function callbackInterceptor(res) {\n        queue(interceptor[name], res).then(function (res) {\n          /* eslint-disable no-mixed-operators */\n          return isFn(oldCallback) && oldCallback(res) || res;\n        });\n      };\n    }\n  });\n  return options;\n}\n\nfunction wrapperReturnValue(method, returnValue) {\n  var returnValueHooks = [];\n  if (Array.isArray(globalInterceptors.returnValue)) {\n    returnValueHooks.push.apply(returnValueHooks, _toConsumableArray(globalInterceptors.returnValue));\n  }\n  var interceptor = scopedInterceptors[method];\n  if (interceptor && Array.isArray(interceptor.returnValue)) {\n    returnValueHooks.push.apply(returnValueHooks, _toConsumableArray(interceptor.returnValue));\n  }\n  returnValueHooks.forEach(function (hook) {\n    returnValue = hook(returnValue) || returnValue;\n  });\n  return returnValue;\n}\n\nfunction getApiInterceptorHooks(method) {\n  var interceptor = Object.create(null);\n  Object.keys(globalInterceptors).forEach(function (hook) {\n    if (hook !== 'returnValue') {\n      interceptor[hook] = globalInterceptors[hook].slice();\n    }\n  });\n  var scopedInterceptor = scopedInterceptors[method];\n  if (scopedInterceptor) {\n    Object.keys(scopedInterceptor).forEach(function (hook) {\n      if (hook !== 'returnValue') {\n        interceptor[hook] = (interceptor[hook] || []).concat(scopedInterceptor[hook]);\n      }\n    });\n  }\n  return interceptor;\n}\n\nfunction invokeApi(method, api, options) {for (var _len = arguments.length, params = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {params[_key - 3] = arguments[_key];}\n  var interceptor = getApiInterceptorHooks(method);\n  if (interceptor && Object.keys(interceptor).length) {\n    if (Array.isArray(interceptor.invoke)) {\n      var res = queue(interceptor.invoke, options);\n      return res.then(function (options) {\n        return api.apply(void 0, [wrapperOptions(interceptor, options)].concat(params));\n      });\n    } else {\n      return api.apply(void 0, [wrapperOptions(interceptor, options)].concat(params));\n    }\n  }\n  return api.apply(void 0, [options].concat(params));\n}\n\nvar promiseInterceptor = {\n  returnValue: function returnValue(res) {\n    if (!isPromise(res)) {\n      return res;\n    }\n    return res.then(function (res) {\n      return res[1];\n    }).catch(function (res) {\n      return res[0];\n    });\n  } };\n\n\nvar SYNC_API_RE =\n/^\\$|restoreGlobal|getCurrentSubNVue|getMenuButtonBoundingClientRect|^report|interceptors|Interceptor$|getSubNVueById|requireNativePlugin|upx2px|hideKeyboard|canIUse|^create|Sync$|Manager$|base64ToArrayBuffer|arrayBufferToBase64/;\n\nvar CONTEXT_API_RE = /^create|Manager$/;\n\nvar CALLBACK_API_RE = /^on/;\n\nfunction isContextApi(name) {\n  return CONTEXT_API_RE.test(name);\n}\nfunction isSyncApi(name) {\n  return SYNC_API_RE.test(name);\n}\n\nfunction isCallbackApi(name) {\n  return CALLBACK_API_RE.test(name) && name !== 'onPush';\n}\n\nfunction handlePromise(promise) {\n  return promise.then(function (data) {\n    return [null, data];\n  }).\n  catch(function (err) {return [err];});\n}\n\nfunction shouldPromise(name) {\n  if (\n  isContextApi(name) ||\n  isSyncApi(name) ||\n  isCallbackApi(name))\n  {\n    return false;\n  }\n  return true;\n}\n\nfunction promisify(name, api) {\n  if (!shouldPromise(name)) {\n    return api;\n  }\n  return function promiseApi() {var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};for (var _len2 = arguments.length, params = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {params[_key2 - 1] = arguments[_key2];}\n    if (isFn(options.success) || isFn(options.fail) || isFn(options.complete)) {\n      return wrapperReturnValue(name, invokeApi.apply(void 0, [name, api, options].concat(params)));\n    }\n    return wrapperReturnValue(name, handlePromise(new Promise(function (resolve, reject) {\n      invokeApi.apply(void 0, [name, api, Object.assign({}, options, {\n        success: resolve,\n        fail: reject })].concat(\n      params));\n      /* eslint-disable no-extend-native */\n      if (!Promise.prototype.finally) {\n        Promise.prototype.finally = function (callback) {\n          var promise = this.constructor;\n          return this.then(\n          function (value) {return promise.resolve(callback()).then(function () {return value;});},\n          function (reason) {return promise.resolve(callback()).then(function () {\n              throw reason;\n            });});\n\n        };\n      }\n    })));\n  };\n}\n\nvar EPS = 1e-4;\nvar BASE_DEVICE_WIDTH = 750;\nvar isIOS = false;\nvar deviceWidth = 0;\nvar deviceDPR = 0;\n\nfunction checkDeviceWidth() {var _wx$getSystemInfoSync =\n\n\n\n\n  wx.getSystemInfoSync(),platform = _wx$getSystemInfoSync.platform,pixelRatio = _wx$getSystemInfoSync.pixelRatio,windowWidth = _wx$getSystemInfoSync.windowWidth; // uni=>wx runtime 编译目标是 uni 对象，内部不允许直接使用 uni\n\n  deviceWidth = windowWidth;\n  deviceDPR = pixelRatio;\n  isIOS = platform === 'ios';\n}\n\nfunction upx2px(number, newDeviceWidth) {\n  if (deviceWidth === 0) {\n    checkDeviceWidth();\n  }\n\n  number = Number(number);\n  if (number === 0) {\n    return 0;\n  }\n  var result = number / BASE_DEVICE_WIDTH * (newDeviceWidth || deviceWidth);\n  if (result < 0) {\n    result = -result;\n  }\n  result = Math.floor(result + EPS);\n  if (result === 0) {\n    if (deviceDPR === 1 || !isIOS) {\n      return 1;\n    } else {\n      return 0.5;\n    }\n  }\n  return number < 0 ? -result : result;\n}\n\nvar interceptors = {\n  promiseInterceptor: promiseInterceptor };\n\n\n\n\nvar baseApi = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  upx2px: upx2px,\n  interceptors: interceptors,\n  addInterceptor: addInterceptor,\n  removeInterceptor: removeInterceptor });\n\n\nvar protocols = {};\nvar todos = [];\nvar canIUses = [];\n\nvar CALLBACKS = ['success', 'fail', 'cancel', 'complete'];\n\nfunction processCallback(methodName, method, returnValue) {\n  return function (res) {\n    return method(processReturnValue(methodName, res, returnValue));\n  };\n}\n\nfunction processArgs(methodName, fromArgs) {var argsOption = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};var returnValue = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};var keepFromArgs = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  if (isPlainObject(fromArgs)) {// 一般 api 的参数解析\n    var toArgs = keepFromArgs === true ? fromArgs : {}; // returnValue 为 false 时，说明是格式化返回值，直接在返回值对象上修改赋值\n    if (isFn(argsOption)) {\n      argsOption = argsOption(fromArgs, toArgs) || {};\n    }\n    for (var key in fromArgs) {\n      if (hasOwn(argsOption, key)) {\n        var keyOption = argsOption[key];\n        if (isFn(keyOption)) {\n          keyOption = keyOption(fromArgs[key], fromArgs, toArgs);\n        }\n        if (!keyOption) {// 不支持的参数\n          console.warn(\"app-plus \".concat(methodName, \"\\u6682\\u4E0D\\u652F\\u6301\").concat(key));\n        } else if (isStr(keyOption)) {// 重写参数 key\n          toArgs[keyOption] = fromArgs[key];\n        } else if (isPlainObject(keyOption)) {// {name:newName,value:value}可重新指定参数 key:value\n          toArgs[keyOption.name ? keyOption.name : key] = keyOption.value;\n        }\n      } else if (CALLBACKS.indexOf(key) !== -1) {\n        toArgs[key] = processCallback(methodName, fromArgs[key], returnValue);\n      } else {\n        if (!keepFromArgs) {\n          toArgs[key] = fromArgs[key];\n        }\n      }\n    }\n    return toArgs;\n  } else if (isFn(fromArgs)) {\n    fromArgs = processCallback(methodName, fromArgs, returnValue);\n  }\n  return fromArgs;\n}\n\nfunction processReturnValue(methodName, res, returnValue) {var keepReturnValue = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  if (isFn(protocols.returnValue)) {// 处理通用 returnValue\n    res = protocols.returnValue(methodName, res);\n  }\n  return processArgs(methodName, res, returnValue, {}, keepReturnValue);\n}\n\nfunction wrapper(methodName, method) {\n  if (hasOwn(protocols, methodName)) {\n    var protocol = protocols[methodName];\n    if (!protocol) {// 暂不支持的 api\n      return function () {\n        console.error(\"app-plus \\u6682\\u4E0D\\u652F\\u6301\".concat(methodName));\n      };\n    }\n    return function (arg1, arg2) {// 目前 api 最多两个参数\n      var options = protocol;\n      if (isFn(protocol)) {\n        options = protocol(arg1);\n      }\n\n      arg1 = processArgs(methodName, arg1, options.args, options.returnValue);\n\n      var args = [arg1];\n      if (typeof arg2 !== 'undefined') {\n        args.push(arg2);\n      }\n      var returnValue = wx[options.name || methodName].apply(wx, args);\n      if (isSyncApi(methodName)) {// 同步 api\n        return processReturnValue(methodName, returnValue, options.returnValue, isContextApi(methodName));\n      }\n      return returnValue;\n    };\n  }\n  return method;\n}\n\nvar todoApis = Object.create(null);\n\nvar TODOS = [\n'onTabBarMidButtonTap',\n'subscribePush',\n'unsubscribePush',\n'onPush',\n'offPush',\n'share'];\n\n\nfunction createTodoApi(name) {\n  return function todoApi(_ref)\n\n\n  {var fail = _ref.fail,complete = _ref.complete;\n    var res = {\n      errMsg: \"\".concat(name, \":fail:\\u6682\\u4E0D\\u652F\\u6301 \").concat(name, \" \\u65B9\\u6CD5\") };\n\n    isFn(fail) && fail(res);\n    isFn(complete) && complete(res);\n  };\n}\n\nTODOS.forEach(function (name) {\n  todoApis[name] = createTodoApi(name);\n});\n\nvar getEmitter = function () {\n  if (typeof getUniEmitter === 'function') {\n    /* eslint-disable no-undef */\n    return getUniEmitter;\n  }\n  var Emitter;\n  return function getUniEmitter() {\n    if (!Emitter) {\n      Emitter = new _vue.default();\n    }\n    return Emitter;\n  };\n}();\n\nfunction apply(ctx, method, args) {\n  return ctx[method].apply(ctx, args);\n}\n\nfunction $on() {\n  return apply(getEmitter(), '$on', Array.prototype.slice.call(arguments));\n}\nfunction $off() {\n  return apply(getEmitter(), '$off', Array.prototype.slice.call(arguments));\n}\nfunction $once() {\n  return apply(getEmitter(), '$once', Array.prototype.slice.call(arguments));\n}\nfunction $emit() {\n  return apply(getEmitter(), '$emit', Array.prototype.slice.call(arguments));\n}\n\nvar eventApi = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  $on: $on,\n  $off: $off,\n  $once: $once,\n  $emit: $emit });\n\n\nfunction requireNativePlugin(pluginName) {\n  /* eslint-disable no-undef */\n  if (typeof weex !== 'undefined') {\n    return weex.requireModule(pluginName);\n  }\n  /* eslint-disable no-undef */\n  return __requireNativePlugin__(pluginName);\n}\n\nfunction wrapper$1(webview) {\n  webview.$processed = true;\n\n  webview.postMessage = function (data) {\n    plus.webview.postMessageToUniNView({\n      type: 'UniAppSubNVue',\n      data: data },\n    webview.id);\n  };\n  var callbacks = [];\n  webview.onMessage = function (callback) {\n    callbacks.push(callback);\n  };\n  webview.$consumeMessage = function (e) {\n    callbacks.forEach(function (callback) {return callback(e);});\n  };\n\n  if (!webview.__uniapp_mask_id) {\n    return;\n  }\n  var maskColor = webview.__uniapp_mask;\n  var maskWebview = webview.__uniapp_mask_id === '0' ? {\n    setStyle: function setStyle(_ref2)\n\n    {var mask = _ref2.mask;\n      requireNativePlugin('uni-tabview').setMask({\n        color: mask });\n\n    } } :\n  plus.webview.getWebviewById(webview.__uniapp_mask_id);\n  var oldShow = webview.show;\n  var oldHide = webview.hide;\n  var oldClose = webview.close;\n\n  var showMask = function showMask() {\n    maskWebview.setStyle({\n      mask: maskColor });\n\n  };\n  var closeMask = function closeMask() {\n    maskWebview.setStyle({\n      mask: 'none' });\n\n  };\n  webview.show = function () {\n    showMask();for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {args[_key3] = arguments[_key3];}\n    return oldShow.apply(webview, args);\n  };\n  webview.hide = function () {\n    closeMask();for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {args[_key4] = arguments[_key4];}\n    return oldHide.apply(webview, args);\n  };\n  webview.close = function () {\n    closeMask();\n    callbacks = [];for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {args[_key5] = arguments[_key5];}\n    return oldClose.apply(webview, args);\n  };\n}\n\nfunction getSubNVueById(id) {\n  var webview = plus.webview.getWebviewById(id);\n  if (webview && !webview.$processed) {\n    wrapper$1(webview);\n  }\n  return webview;\n}\n\n\n\nvar api = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  getSubNVueById: getSubNVueById,\n  requireNativePlugin: requireNativePlugin });\n\n\nvar MPPage = Page;\nvar MPComponent = Component;\n\nvar customizeRE = /:/g;\n\nvar customize = cached(function (str) {\n  return camelize(str.replace(customizeRE, '-'));\n});\n\nfunction initTriggerEvent(mpInstance) {\n  {\n    if (!wx.canIUse('nextTick')) {\n      return;\n    }\n  }\n  var oldTriggerEvent = mpInstance.triggerEvent;\n  mpInstance.triggerEvent = function (event) {for (var _len6 = arguments.length, args = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {args[_key6 - 1] = arguments[_key6];}\n    return oldTriggerEvent.apply(mpInstance, [customize(event)].concat(args));\n  };\n}\n\nfunction initHook(name, options) {\n  var oldHook = options[name];\n  if (!oldHook) {\n    options[name] = function () {\n      initTriggerEvent(this);\n    };\n  } else {\n    options[name] = function () {\n      initTriggerEvent(this);for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {args[_key7] = arguments[_key7];}\n      return oldHook.apply(this, args);\n    };\n  }\n}\n\nPage = function Page() {var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  initHook('onLoad', options);\n  return MPPage(options);\n};\n\nComponent = function Component() {var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  initHook('created', options);\n  return MPComponent(options);\n};\n\nvar PAGE_EVENT_HOOKS = [\n'onPullDownRefresh',\n'onReachBottom',\n'onShareAppMessage',\n'onPageScroll',\n'onResize',\n'onTabItemTap'];\n\n\nfunction initMocks(vm, mocks) {\n  var mpInstance = vm.$mp[vm.mpType];\n  mocks.forEach(function (mock) {\n    if (hasOwn(mpInstance, mock)) {\n      vm[mock] = mpInstance[mock];\n    }\n  });\n}\n\nfunction hasHook(hook, vueOptions) {\n  if (!vueOptions) {\n    return true;\n  }\n\n  if (_vue.default.options && Array.isArray(_vue.default.options[hook])) {\n    return true;\n  }\n\n  vueOptions = vueOptions.default || vueOptions;\n\n  if (isFn(vueOptions)) {\n    if (isFn(vueOptions.extendOptions[hook])) {\n      return true;\n    }\n    if (vueOptions.super &&\n    vueOptions.super.options &&\n    Array.isArray(vueOptions.super.options[hook])) {\n      return true;\n    }\n    return false;\n  }\n\n  if (isFn(vueOptions[hook])) {\n    return true;\n  }\n  var mixins = vueOptions.mixins;\n  if (Array.isArray(mixins)) {\n    return !!mixins.find(function (mixin) {return hasHook(hook, mixin);});\n  }\n}\n\nfunction initHooks(mpOptions, hooks, vueOptions) {\n  hooks.forEach(function (hook) {\n    if (hasHook(hook, vueOptions)) {\n      mpOptions[hook] = function (args) {\n        return this.$vm && this.$vm.__call_hook(hook, args);\n      };\n    }\n  });\n}\n\nfunction initVueComponent(Vue, vueOptions) {\n  vueOptions = vueOptions.default || vueOptions;\n  var VueComponent;\n  if (isFn(vueOptions)) {\n    VueComponent = vueOptions;\n    vueOptions = VueComponent.extendOptions;\n  } else {\n    VueComponent = Vue.extend(vueOptions);\n  }\n  return [VueComponent, vueOptions];\n}\n\nfunction initSlots(vm, vueSlots) {\n  if (Array.isArray(vueSlots) && vueSlots.length) {\n    var $slots = Object.create(null);\n    vueSlots.forEach(function (slotName) {\n      $slots[slotName] = true;\n    });\n    vm.$scopedSlots = vm.$slots = $slots;\n  }\n}\n\nfunction initVueIds(vueIds, mpInstance) {\n  vueIds = (vueIds || '').split(',');\n  var len = vueIds.length;\n\n  if (len === 1) {\n    mpInstance._$vueId = vueIds[0];\n  } else if (len === 2) {\n    mpInstance._$vueId = vueIds[0];\n    mpInstance._$vuePid = vueIds[1];\n  }\n}\n\nfunction initData(vueOptions, context) {\n  var data = vueOptions.data || {};\n  var methods = vueOptions.methods || {};\n\n  if (typeof data === 'function') {\n    try {\n      data = data.call(context); // 支持 Vue.prototype 上挂的数据\n    } catch (e) {\n      if (Object({\"VUE_APP_PLATFORM\":\"app-plus\",\"NODE_ENV\":\"development\",\"BASE_URL\":\"/\"}).VUE_APP_DEBUG) {\n        console.warn('根据 Vue 的 data 函数初始化小程序 data 失败，请尽量确保 data 函数中不访问 vm 对象，否则可能影响首次数据渲染速度。', data);\n      }\n    }\n  } else {\n    try {\n      // 对 data 格式化\n      data = JSON.parse(JSON.stringify(data));\n    } catch (e) {}\n  }\n\n  if (!isPlainObject(data)) {\n    data = {};\n  }\n\n  Object.keys(methods).forEach(function (methodName) {\n    if (context.__lifecycle_hooks__.indexOf(methodName) === -1 && !hasOwn(data, methodName)) {\n      data[methodName] = methods[methodName];\n    }\n  });\n\n  return data;\n}\n\nvar PROP_TYPES = [String, Number, Boolean, Object, Array, null];\n\nfunction createObserver(name) {\n  return function observer(newVal, oldVal) {\n    if (this.$vm) {\n      this.$vm[name] = newVal; // 为了触发其他非 render watcher\n    }\n  };\n}\n\nfunction initBehaviors(vueOptions, initBehavior) {\n  var vueBehaviors = vueOptions['behaviors'];\n  var vueExtends = vueOptions['extends'];\n  var vueMixins = vueOptions['mixins'];\n\n  var vueProps = vueOptions['props'];\n\n  if (!vueProps) {\n    vueOptions['props'] = vueProps = [];\n  }\n\n  var behaviors = [];\n  if (Array.isArray(vueBehaviors)) {\n    vueBehaviors.forEach(function (behavior) {\n      behaviors.push(behavior.replace('uni://', \"wx\".concat(\"://\")));\n      if (behavior === 'uni://form-field') {\n        if (Array.isArray(vueProps)) {\n          vueProps.push('name');\n          vueProps.push('value');\n        } else {\n          vueProps['name'] = {\n            type: String,\n            default: '' };\n\n          vueProps['value'] = {\n            type: [String, Number, Boolean, Array, Object, Date],\n            default: '' };\n\n        }\n      }\n    });\n  }\n  if (isPlainObject(vueExtends) && vueExtends.props) {\n    behaviors.push(\n    initBehavior({\n      properties: initProperties(vueExtends.props, true) }));\n\n\n  }\n  if (Array.isArray(vueMixins)) {\n    vueMixins.forEach(function (vueMixin) {\n      if (isPlainObject(vueMixin) && vueMixin.props) {\n        behaviors.push(\n        initBehavior({\n          properties: initProperties(vueMixin.props, true) }));\n\n\n      }\n    });\n  }\n  return behaviors;\n}\n\nfunction parsePropType(key, type, defaultValue, file) {\n  // [String]=>String\n  if (Array.isArray(type) && type.length === 1) {\n    return type[0];\n  }\n  return type;\n}\n\nfunction initProperties(props) {var isBehavior = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;var file = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  var properties = {};\n  if (!isBehavior) {\n    properties.vueId = {\n      type: String,\n      value: '' };\n\n    properties.vueSlots = { // 小程序不能直接定义 $slots 的 props，所以通过 vueSlots 转换到 $slots\n      type: null,\n      value: [],\n      observer: function observer(newVal, oldVal) {\n        var $slots = Object.create(null);\n        newVal.forEach(function (slotName) {\n          $slots[slotName] = true;\n        });\n        this.setData({\n          $slots: $slots });\n\n      } };\n\n  }\n  if (Array.isArray(props)) {// ['title']\n    props.forEach(function (key) {\n      properties[key] = {\n        type: null,\n        observer: createObserver(key) };\n\n    });\n  } else if (isPlainObject(props)) {// {title:{type:String,default:''},content:String}\n    Object.keys(props).forEach(function (key) {\n      var opts = props[key];\n      if (isPlainObject(opts)) {// title:{type:String,default:''}\n        var value = opts['default'];\n        if (isFn(value)) {\n          value = value();\n        }\n\n        opts.type = parsePropType(key, opts.type);\n\n        properties[key] = {\n          type: PROP_TYPES.indexOf(opts.type) !== -1 ? opts.type : null,\n          value: value,\n          observer: createObserver(key) };\n\n      } else {// content:String\n        var type = parsePropType(key, opts);\n        properties[key] = {\n          type: PROP_TYPES.indexOf(type) !== -1 ? type : null,\n          observer: createObserver(key) };\n\n      }\n    });\n  }\n  return properties;\n}\n\nfunction wrapper$2(event) {\n  // TODO 又得兼容 mpvue 的 mp 对象\n  try {\n    event.mp = JSON.parse(JSON.stringify(event));\n  } catch (e) {}\n\n  event.stopPropagation = noop;\n  event.preventDefault = noop;\n\n  event.target = event.target || {};\n\n  if (!hasOwn(event, 'detail')) {\n    event.detail = {};\n  }\n\n  if (isPlainObject(event.detail)) {\n    event.target = Object.assign({}, event.target, event.detail);\n  }\n\n  return event;\n}\n\nfunction getExtraValue(vm, dataPathsArray) {\n  var context = vm;\n  dataPathsArray.forEach(function (dataPathArray) {\n    var dataPath = dataPathArray[0];\n    var value = dataPathArray[2];\n    if (dataPath || typeof value !== 'undefined') {// ['','',index,'disable']\n      var propPath = dataPathArray[1];\n      var valuePath = dataPathArray[3];\n\n      var vFor = dataPath ? vm.__get_value(dataPath, context) : context;\n\n      if (Number.isInteger(vFor)) {\n        context = value;\n      } else if (!propPath) {\n        context = vFor[value];\n      } else {\n        if (Array.isArray(vFor)) {\n          context = vFor.find(function (vForItem) {\n            return vm.__get_value(propPath, vForItem) === value;\n          });\n        } else if (isPlainObject(vFor)) {\n          context = Object.keys(vFor).find(function (vForKey) {\n            return vm.__get_value(propPath, vFor[vForKey]) === value;\n          });\n        } else {\n          console.error('v-for 暂不支持循环数据：', vFor);\n        }\n      }\n\n      if (valuePath) {\n        context = vm.__get_value(valuePath, context);\n      }\n    }\n  });\n  return context;\n}\n\nfunction processEventExtra(vm, extra, event) {\n  var extraObj = {};\n\n  if (Array.isArray(extra) && extra.length) {\n    /**\r\n                                              *[\r\n                                              *    ['data.items', 'data.id', item.data.id],\r\n                                              *    ['metas', 'id', meta.id]\r\n                                              *],\r\n                                              *[\r\n                                              *    ['data.items', 'data.id', item.data.id],\r\n                                              *    ['metas', 'id', meta.id]\r\n                                              *],\r\n                                              *'test'\r\n                                              */\n    extra.forEach(function (dataPath, index) {\n      if (typeof dataPath === 'string') {\n        if (!dataPath) {// model,prop.sync\n          extraObj['$' + index] = vm;\n        } else {\n          if (dataPath === '$event') {// $event\n            extraObj['$' + index] = event;\n          } else if (dataPath.indexOf('$event.') === 0) {// $event.target.value\n            extraObj['$' + index] = vm.__get_value(dataPath.replace('$event.', ''), event);\n          } else {\n            extraObj['$' + index] = vm.__get_value(dataPath);\n          }\n        }\n      } else {\n        extraObj['$' + index] = getExtraValue(vm, dataPath);\n      }\n    });\n  }\n\n  return extraObj;\n}\n\nfunction getObjByArray(arr) {\n  var obj = {};\n  for (var i = 1; i < arr.length; i++) {\n    var element = arr[i];\n    obj[element[0]] = element[1];\n  }\n  return obj;\n}\n\nfunction processEventArgs(vm, event) {var args = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];var extra = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];var isCustom = arguments.length > 4 ? arguments[4] : undefined;var methodName = arguments.length > 5 ? arguments[5] : undefined;\n  var isCustomMPEvent = false; // wxcomponent 组件，传递原始 event 对象\n  if (isCustom) {// 自定义事件\n    isCustomMPEvent = event.currentTarget &&\n    event.currentTarget.dataset &&\n    event.currentTarget.dataset.comType === 'wx';\n    if (!args.length) {// 无参数，直接传入 event 或 detail 数组\n      if (isCustomMPEvent) {\n        return [event];\n      }\n      return event.detail.__args__ || event.detail;\n    }\n  }\n\n  var extraObj = processEventExtra(vm, extra, event);\n\n  var ret = [];\n  args.forEach(function (arg) {\n    if (arg === '$event') {\n      if (methodName === '__set_model' && !isCustom) {// input v-model value\n        ret.push(event.target.value);\n      } else {\n        if (isCustom && !isCustomMPEvent) {\n          ret.push(event.detail.__args__[0]);\n        } else {// wxcomponent 组件或内置组件\n          ret.push(event);\n        }\n      }\n    } else {\n      if (Array.isArray(arg) && arg[0] === 'o') {\n        ret.push(getObjByArray(arg));\n      } else if (typeof arg === 'string' && hasOwn(extraObj, arg)) {\n        ret.push(extraObj[arg]);\n      } else {\n        ret.push(arg);\n      }\n    }\n  });\n\n  return ret;\n}\n\nvar ONCE = '~';\nvar CUSTOM = '^';\n\nfunction isMatchEventType(eventType, optType) {\n  return eventType === optType ||\n\n  optType === 'regionchange' && (\n\n  eventType === 'begin' ||\n  eventType === 'end');\n\n\n}\n\nfunction handleEvent(event) {var _this = this;\n  event = wrapper$2(event);\n\n  // [['tap',[['handle',[1,2,a]],['handle1',[1,2,a]]]]]\n  var dataset = (event.currentTarget || event.target).dataset;\n  if (!dataset) {\n    return console.warn(\"\\u4E8B\\u4EF6\\u4FE1\\u606F\\u4E0D\\u5B58\\u5728\");\n  }\n  var eventOpts = dataset.eventOpts || dataset['event-opts']; // 支付宝 web-view 组件 dataset 非驼峰\n  if (!eventOpts) {\n    return console.warn(\"\\u4E8B\\u4EF6\\u4FE1\\u606F\\u4E0D\\u5B58\\u5728\");\n  }\n\n  // [['handle',[1,2,a]],['handle1',[1,2,a]]]\n  var eventType = event.type;\n\n  var ret = [];\n\n  eventOpts.forEach(function (eventOpt) {\n    var type = eventOpt[0];\n    var eventsArray = eventOpt[1];\n\n    var isCustom = type.charAt(0) === CUSTOM;\n    type = isCustom ? type.slice(1) : type;\n    var isOnce = type.charAt(0) === ONCE;\n    type = isOnce ? type.slice(1) : type;\n\n    if (eventsArray && isMatchEventType(eventType, type)) {\n      eventsArray.forEach(function (eventArray) {\n        var methodName = eventArray[0];\n        if (methodName) {\n          var handlerCtx = _this.$vm;\n          if (\n          handlerCtx.$options.generic &&\n          handlerCtx.$parent &&\n          handlerCtx.$parent.$parent)\n          {// mp-weixin,mp-toutiao 抽象节点模拟 scoped slots\n            handlerCtx = handlerCtx.$parent.$parent;\n          }\n          if (methodName === '$emit') {\n            handlerCtx.$emit.apply(handlerCtx,\n            processEventArgs(\n            _this.$vm,\n            event,\n            eventArray[1],\n            eventArray[2],\n            isCustom,\n            methodName));\n\n            return;\n          }\n          var handler = handlerCtx[methodName];\n          if (!isFn(handler)) {\n            throw new Error(\" _vm.\".concat(methodName, \" is not a function\"));\n          }\n          if (isOnce) {\n            if (handler.once) {\n              return;\n            }\n            handler.once = true;\n          }\n          ret.push(handler.apply(handlerCtx, processEventArgs(\n          _this.$vm,\n          event,\n          eventArray[1],\n          eventArray[2],\n          isCustom,\n          methodName)));\n\n        }\n      });\n    }\n  });\n\n  if (\n  eventType === 'input' &&\n  ret.length === 1 &&\n  typeof ret[0] !== 'undefined')\n  {\n    return ret[0];\n  }\n}\n\nvar hooks = [\n'onShow',\n'onHide',\n'onError',\n'onPageNotFound'];\n\n\nfunction parseBaseApp(vm, _ref3)\n\n\n{var mocks = _ref3.mocks,initRefs = _ref3.initRefs;\n  if (vm.$options.store) {\n    _vue.default.prototype.$store = vm.$options.store;\n  }\n\n  _vue.default.prototype.mpHost = \"app-plus\";\n\n  _vue.default.mixin({\n    beforeCreate: function beforeCreate() {\n      if (!this.$options.mpType) {\n        return;\n      }\n\n      this.mpType = this.$options.mpType;\n\n      this.$mp = _defineProperty({\n        data: {} },\n      this.mpType, this.$options.mpInstance);\n\n\n      this.$scope = this.$options.mpInstance;\n\n      delete this.$options.mpType;\n      delete this.$options.mpInstance;\n\n      if (this.mpType !== 'app') {\n        initRefs(this);\n        initMocks(this, mocks);\n      }\n    } });\n\n\n  var appOptions = {\n    onLaunch: function onLaunch(args) {\n      if (this.$vm) {// 已经初始化过了，主要是为了百度，百度 onShow 在 onLaunch 之前\n        return;\n      }\n\n      this.$vm = vm;\n\n      this.$vm.$mp = {\n        app: this };\n\n\n      this.$vm.$scope = this;\n      // vm 上也挂载 globalData\n      this.$vm.globalData = this.globalData;\n\n      this.$vm._isMounted = true;\n      this.$vm.__call_hook('mounted', args);\n\n      this.$vm.__call_hook('onLaunch', args);\n    } };\n\n\n  // 兼容旧版本 globalData\n  appOptions.globalData = vm.$options.globalData || {};\n  // 将 methods 中的方法挂在 getApp() 中\n  var methods = vm.$options.methods;\n  if (methods) {\n    Object.keys(methods).forEach(function (name) {\n      appOptions[name] = methods[name];\n    });\n  }\n\n  initHooks(appOptions, hooks);\n\n  return appOptions;\n}\n\nvar mocks = ['__route__', '__wxExparserNodeId__', '__wxWebviewId__'];\n\nfunction findVmByVueId(vm, vuePid) {\n  var $children = vm.$children;\n  // 优先查找直属(反向查找:https://github.com/dcloudio/uni-app/issues/1200)\n  for (var i = $children.length - 1; i >= 0; i--) {\n    var childVm = $children[i];\n    if (childVm.$scope._$vueId === vuePid) {\n      return childVm;\n    }\n  }\n  // 反向递归查找\n  var parentVm;\n  for (var _i = $children.length - 1; _i >= 0; _i--) {\n    parentVm = findVmByVueId($children[_i], vuePid);\n    if (parentVm) {\n      return parentVm;\n    }\n  }\n}\n\nfunction initBehavior(options) {\n  return Behavior(options);\n}\n\nfunction isPage() {\n  return !!this.route;\n}\n\nfunction initRelation(detail) {\n  this.triggerEvent('__l', detail);\n}\n\nfunction initRefs(vm) {\n  var mpInstance = vm.$scope;\n  Object.defineProperty(vm, '$refs', {\n    get: function get() {\n      var $refs = {};\n      var components = mpInstance.selectAllComponents('.vue-ref');\n      components.forEach(function (component) {\n        var ref = component.dataset.ref;\n        $refs[ref] = component.$vm || component;\n      });\n      var forComponents = mpInstance.selectAllComponents('.vue-ref-in-for');\n      forComponents.forEach(function (component) {\n        var ref = component.dataset.ref;\n        if (!$refs[ref]) {\n          $refs[ref] = [];\n        }\n        $refs[ref].push(component.$vm || component);\n      });\n      return $refs;\n    } });\n\n}\n\nfunction handleLink(event) {var _ref4 =\n\n\n\n  event.detail || event.value,vuePid = _ref4.vuePid,vueOptions = _ref4.vueOptions; // detail 是微信,value 是百度(dipatch)\n\n  var parentVm;\n\n  if (vuePid) {\n    parentVm = findVmByVueId(this.$vm, vuePid);\n  }\n\n  if (!parentVm) {\n    parentVm = this.$vm;\n  }\n\n  vueOptions.parent = parentVm;\n}\n\nfunction parseApp(vm) {\n  return parseBaseApp(vm, {\n    mocks: mocks,\n    initRefs: initRefs });\n\n}\n\nvar hooks$1 = [\n'onUniNViewMessage'];\n\n\nfunction parseApp$1(vm) {\n  var appOptions = parseApp(vm);\n\n  initHooks(appOptions, hooks$1);\n\n  return appOptions;\n}\n\nfunction createApp(vm) {\n  App(parseApp$1(vm));\n  return vm;\n}\n\nfunction parseBaseComponent(vueComponentOptions)\n\n\n{var _ref5 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},isPage = _ref5.isPage,initRelation = _ref5.initRelation;var _initVueComponent =\n  initVueComponent(_vue.default, vueComponentOptions),_initVueComponent2 = _slicedToArray(_initVueComponent, 2),VueComponent = _initVueComponent2[0],vueOptions = _initVueComponent2[1];\n\n  var options = {\n    multipleSlots: true,\n    addGlobalClass: true };\n\n\n  var componentOptions = {\n    options: options,\n    data: initData(vueOptions, _vue.default.prototype),\n    behaviors: initBehaviors(vueOptions, initBehavior),\n    properties: initProperties(vueOptions.props, false, vueOptions.__file),\n    lifetimes: {\n      attached: function attached() {\n        var properties = this.properties;\n\n        var options = {\n          mpType: isPage.call(this) ? 'page' : 'component',\n          mpInstance: this,\n          propsData: properties };\n\n\n        initVueIds(properties.vueId, this);\n\n        // 处理父子关系\n        initRelation.call(this, {\n          vuePid: this._$vuePid,\n          vueOptions: options });\n\n\n        // 初始化 vue 实例\n        this.$vm = new VueComponent(options);\n\n        // 处理$slots,$scopedSlots（暂不支持动态变化$slots）\n        initSlots(this.$vm, properties.vueSlots);\n\n        // 触发首次 setData\n        this.$vm.$mount();\n      },\n      ready: function ready() {\n        // 当组件 props 默认值为 true，初始化时传入 false 会导致 created,ready 触发, 但 attached 不触发\n        // https://developers.weixin.qq.com/community/develop/doc/00066ae2844cc0f8eb883e2a557800\n        if (this.$vm) {\n          this.$vm._isMounted = true;\n          this.$vm.__call_hook('mounted');\n          this.$vm.__call_hook('onReady');\n        }\n      },\n      detached: function detached() {\n        this.$vm && this.$vm.$destroy();\n      } },\n\n    pageLifetimes: {\n      show: function show(args) {\n        this.$vm && this.$vm.__call_hook('onPageShow', args);\n      },\n      hide: function hide() {\n        this.$vm && this.$vm.__call_hook('onPageHide');\n      },\n      resize: function resize(size) {\n        this.$vm && this.$vm.__call_hook('onPageResize', size);\n      } },\n\n    methods: {\n      __l: handleLink,\n      __e: handleEvent } };\n\n\n\n  if (Array.isArray(vueOptions.wxsCallMethods)) {\n    vueOptions.wxsCallMethods.forEach(function (callMethod) {\n      componentOptions.methods[callMethod] = function (args) {\n        return this.$vm[callMethod](args);\n      };\n    });\n  }\n\n  if (isPage) {\n    return componentOptions;\n  }\n  return [componentOptions, VueComponent];\n}\n\nfunction parseComponent(vueComponentOptions) {\n  return parseBaseComponent(vueComponentOptions, {\n    isPage: isPage,\n    initRelation: initRelation });\n\n}\n\nfunction parseComponent$1(vueComponentOptions) {\n  var componentOptions = parseComponent(vueComponentOptions);\n\n  componentOptions.methods.$getAppWebview = function () {\n    return plus.webview.getWebviewById(\"\".concat(this.__wxWebviewId__));\n  };\n  return componentOptions;\n}\n\nvar hooks$2 = [\n'onShow',\n'onHide',\n'onUnload'];\n\n\nhooks$2.push.apply(hooks$2, PAGE_EVENT_HOOKS);\n\nfunction parseBasePage(vuePageOptions, _ref6)\n\n\n{var isPage = _ref6.isPage,initRelation = _ref6.initRelation;\n  var pageOptions = parseComponent$1(vuePageOptions);\n\n  initHooks(pageOptions.methods, hooks$2, vuePageOptions);\n\n  pageOptions.methods.onLoad = function (args) {\n    this.$vm.$mp.query = args; // 兼容 mpvue\n    this.$vm.__call_hook('onLoad', args);\n  };\n\n  return pageOptions;\n}\n\nfunction parsePage(vuePageOptions) {\n  return parseBasePage(vuePageOptions, {\n    isPage: isPage,\n    initRelation: initRelation });\n\n}\n\nvar hooks$3 = [\n'onBackPress',\n'onNavigationBarButtonTap',\n'onNavigationBarSearchInputChanged',\n'onNavigationBarSearchInputConfirmed',\n'onNavigationBarSearchInputClicked'];\n\n\nfunction parsePage$1(vuePageOptions) {\n  var pageOptions = parsePage(vuePageOptions);\n\n  initHooks(pageOptions.methods, hooks$3);\n\n  return pageOptions;\n}\n\nfunction createPage(vuePageOptions) {\n  {\n    return Component(parsePage$1(vuePageOptions));\n  }\n}\n\nfunction createComponent(vueOptions) {\n  {\n    return Component(parseComponent$1(vueOptions));\n  }\n}\n\ntodos.forEach(function (todoApi) {\n  protocols[todoApi] = false;\n});\n\ncanIUses.forEach(function (canIUseApi) {\n  var apiName = protocols[canIUseApi] && protocols[canIUseApi].name ? protocols[canIUseApi].name :\n  canIUseApi;\n  if (!wx.canIUse(apiName)) {\n    protocols[canIUseApi] = false;\n  }\n});\n\nvar uni = {};\n\nif (typeof Proxy !== 'undefined' && \"app-plus\" !== 'app-plus') {\n  uni = new Proxy({}, {\n    get: function get(target, name) {\n      if (target[name]) {\n        return target[name];\n      }\n      if (baseApi[name]) {\n        return baseApi[name];\n      }\n      if (api[name]) {\n        return promisify(name, api[name]);\n      }\n      if (eventApi[name]) {\n        return eventApi[name];\n      }\n      if (!hasOwn(wx, name) && !hasOwn(protocols, name)) {\n        return;\n      }\n      return promisify(name, wrapper(name, wx[name]));\n    },\n    set: function set(target, name, value) {\n      target[name] = value;\n      return true;\n    } });\n\n} else {\n  Object.keys(baseApi).forEach(function (name) {\n    uni[name] = baseApi[name];\n  });\n\n  Object.keys(eventApi).forEach(function (name) {\n    uni[name] = eventApi[name];\n  });\n\n  Object.keys(api).forEach(function (name) {\n    uni[name] = promisify(name, api[name]);\n  });\n\n  Object.keys(wx).forEach(function (name) {\n    if (hasOwn(wx, name) || hasOwn(protocols, name)) {\n      uni[name] = promisify(name, wrapper(name, wx[name]));\n    }\n  });\n}\n\n{\n  if (typeof global !== 'undefined') {\n    global.uni = uni;\n    global.UniEmitter = eventApi;\n  }\n}\n\nwx.createApp = createApp;\nwx.createPage = createPage;\nwx.createComponent = createComponent;\n\nvar uni$1 = uni;var _default =\n\nuni$1;exports.default = _default;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ 2)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n");

/***/ }),

/***/ 12:
/*!*********************************************************************!*\
  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = formatLog;function typof(v) {\n  var s = Object.prototype.toString.call(v);\n  return s.substring(8, s.length - 1);\n}\n\nfunction isDebugMode() {\n  /* eslint-disable no-undef */\n  return typeof __channelId__ === 'string' && __channelId__;\n}\n\nfunction formatLog() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  var type = args.shift();\n  if (isDebugMode()) {\n    args.push(args.pop().replace('at ', 'uni-app:///'));\n    return console[type]['apply'](console, args);\n  }\n\n  var msgs = args.map(function (v) {\n    var type = Object.prototype.toString.call(v);\n\n    if (type.toLowerCase() === '[object object]') {\n      try {\n        v = '---BEGIN:JSON---' + JSON.stringify(v) + '---END:JSON---';\n      } catch (e) {\n        v = '[object object]';\n      }\n    } else {\n      if (v === null) {\n        v = '---NULL---';\n      } else if (v === undefined) {\n        v = '---UNDEFINED---';\n      } else {\n        var vType = typof(v).toUpperCase();\n\n        if (vType === 'NUMBER' || vType === 'BOOLEAN') {\n          v = '---BEGIN:' + vType + '---' + v + '---END:' + vType + '---';\n        } else {\n          v = String(v);\n        }\n      }\n    }\n\n    return v;\n  });\n  var msg = '';\n\n  if (msgs.length > 1) {\n    var lastMsg = msgs.pop();\n    msg = msgs.join('---COMMA---');\n\n    if (lastMsg.indexOf(' at ') === 0) {\n      msg += lastMsg;\n    } else {\n      msg += '---COMMA---' + lastMsg;\n    }\n  } else {\n    msg = msgs[0];\n  }\n\n  console[type](msg);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbInR5cG9mIiwidiIsInMiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsImNhbGwiLCJzdWJzdHJpbmciLCJsZW5ndGgiLCJpc0RlYnVnTW9kZSIsIl9fY2hhbm5lbElkX18iLCJmb3JtYXRMb2ciLCJfbGVuIiwiYXJndW1lbnRzIiwiYXJncyIsIkFycmF5IiwiX2tleSIsInR5cGUiLCJzaGlmdCIsInB1c2giLCJwb3AiLCJyZXBsYWNlIiwiY29uc29sZSIsIm1zZ3MiLCJtYXAiLCJ0b0xvd2VyQ2FzZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJlIiwidW5kZWZpbmVkIiwidlR5cGUiLCJ0b1VwcGVyQ2FzZSIsIlN0cmluZyIsIm1zZyIsImxhc3RNc2ciLCJqb2luIiwiaW5kZXhPZiJdLCJtYXBwaW5ncyI6IjBGQUFBLFNBQVNBLEtBQVQsQ0FBZ0JDLENBQWhCLEVBQW1CO0FBQ2pCLE1BQUlDLENBQUMsR0FBR0MsTUFBTSxDQUFDQyxTQUFQLENBQWlCQyxRQUFqQixDQUEwQkMsSUFBMUIsQ0FBK0JMLENBQS9CLENBQVI7QUFDQSxTQUFPQyxDQUFDLENBQUNLLFNBQUYsQ0FBWSxDQUFaLEVBQWVMLENBQUMsQ0FBQ00sTUFBRixHQUFXLENBQTFCLENBQVA7QUFDRDs7QUFFRCxTQUFTQyxXQUFULEdBQXdCO0FBQ3RCO0FBQ0EsU0FBTyxPQUFPQyxhQUFQLEtBQXlCLFFBQXpCLElBQXFDQSxhQUE1QztBQUNEOztBQUVjLFNBQVNDLFNBQVQsR0FBc0I7QUFDbkMsT0FBSyxJQUFJQyxJQUFJLEdBQUdDLFNBQVMsQ0FBQ0wsTUFBckIsRUFBNkJNLElBQUksR0FBRyxJQUFJQyxLQUFKLENBQVVILElBQVYsQ0FBcEMsRUFBcURJLElBQUksR0FBRyxDQUFqRSxFQUFvRUEsSUFBSSxHQUFHSixJQUEzRSxFQUFpRkksSUFBSSxFQUFyRixFQUF5RjtBQUN2RkYsUUFBSSxDQUFDRSxJQUFELENBQUosR0FBYUgsU0FBUyxDQUFDRyxJQUFELENBQXRCO0FBQ0Q7QUFDRCxNQUFNQyxJQUFJLEdBQUdILElBQUksQ0FBQ0ksS0FBTCxFQUFiO0FBQ0EsTUFBSVQsV0FBVyxFQUFmLEVBQW1CO0FBQ2pCSyxRQUFJLENBQUNLLElBQUwsQ0FBVUwsSUFBSSxDQUFDTSxHQUFMLEdBQVdDLE9BQVgsQ0FBbUIsS0FBbkIsRUFBMEIsYUFBMUIsQ0FBVjtBQUNBLFdBQU9DLE9BQU8sQ0FBQ0wsSUFBRCxDQUFQLENBQWMsT0FBZCxFQUF1QkssT0FBdkIsRUFBZ0NSLElBQWhDLENBQVA7QUFDRDs7QUFFRCxNQUFJUyxJQUFJLEdBQUdULElBQUksQ0FBQ1UsR0FBTCxDQUFTLFVBQVV2QixDQUFWLEVBQWE7QUFDL0IsUUFBSWdCLElBQUksR0FBR2QsTUFBTSxDQUFDQyxTQUFQLENBQWlCQyxRQUFqQixDQUEwQkMsSUFBMUIsQ0FBK0JMLENBQS9CLENBQVg7O0FBRUEsUUFBSWdCLElBQUksQ0FBQ1EsV0FBTCxPQUF1QixpQkFBM0IsRUFBOEM7QUFDNUMsVUFBSTtBQUNGeEIsU0FBQyxHQUFHLHFCQUFxQnlCLElBQUksQ0FBQ0MsU0FBTCxDQUFlMUIsQ0FBZixDQUFyQixHQUF5QyxnQkFBN0M7QUFDRCxPQUZELENBRUUsT0FBTzJCLENBQVAsRUFBVTtBQUNWM0IsU0FBQyxHQUFHLGlCQUFKO0FBQ0Q7QUFDRixLQU5ELE1BTU87QUFDTCxVQUFJQSxDQUFDLEtBQUssSUFBVixFQUFnQjtBQUNkQSxTQUFDLEdBQUcsWUFBSjtBQUNELE9BRkQsTUFFTyxJQUFJQSxDQUFDLEtBQUs0QixTQUFWLEVBQXFCO0FBQzFCNUIsU0FBQyxHQUFHLGlCQUFKO0FBQ0QsT0FGTSxNQUVBO0FBQ0wsWUFBSTZCLEtBQUssR0FBRzlCLEtBQUssQ0FBQ0MsQ0FBRCxDQUFMLENBQVM4QixXQUFULEVBQVo7O0FBRUEsWUFBSUQsS0FBSyxLQUFLLFFBQVYsSUFBc0JBLEtBQUssS0FBSyxTQUFwQyxFQUErQztBQUM3QzdCLFdBQUMsR0FBRyxjQUFjNkIsS0FBZCxHQUFzQixLQUF0QixHQUE4QjdCLENBQTlCLEdBQWtDLFNBQWxDLEdBQThDNkIsS0FBOUMsR0FBc0QsS0FBMUQ7QUFDRCxTQUZELE1BRU87QUFDTDdCLFdBQUMsR0FBRytCLE1BQU0sQ0FBQy9CLENBQUQsQ0FBVjtBQUNEO0FBQ0Y7QUFDRjs7QUFFRCxXQUFPQSxDQUFQO0FBQ0QsR0ExQlUsQ0FBWDtBQTJCQSxNQUFJZ0MsR0FBRyxHQUFHLEVBQVY7O0FBRUEsTUFBSVYsSUFBSSxDQUFDZixNQUFMLEdBQWMsQ0FBbEIsRUFBcUI7QUFDbkIsUUFBSTBCLE9BQU8sR0FBR1gsSUFBSSxDQUFDSCxHQUFMLEVBQWQ7QUFDQWEsT0FBRyxHQUFHVixJQUFJLENBQUNZLElBQUwsQ0FBVSxhQUFWLENBQU47O0FBRUEsUUFBSUQsT0FBTyxDQUFDRSxPQUFSLENBQWdCLE1BQWhCLE1BQTRCLENBQWhDLEVBQW1DO0FBQ2pDSCxTQUFHLElBQUlDLE9BQVA7QUFDRCxLQUZELE1BRU87QUFDTEQsU0FBRyxJQUFJLGdCQUFnQkMsT0FBdkI7QUFDRDtBQUNGLEdBVEQsTUFTTztBQUNMRCxPQUFHLEdBQUdWLElBQUksQ0FBQyxDQUFELENBQVY7QUFDRDs7QUFFREQsU0FBTyxDQUFDTCxJQUFELENBQVAsQ0FBY2dCLEdBQWQ7QUFDRCIsImZpbGUiOiIxMi5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIHR5cG9mICh2KSB7XHJcbiAgdmFyIHMgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodilcclxuICByZXR1cm4gcy5zdWJzdHJpbmcoOCwgcy5sZW5ndGggLSAxKVxyXG59XHJcblxyXG5mdW5jdGlvbiBpc0RlYnVnTW9kZSAoKSB7XHJcbiAgLyogZXNsaW50LWRpc2FibGUgbm8tdW5kZWYgKi9cclxuICByZXR1cm4gdHlwZW9mIF9fY2hhbm5lbElkX18gPT09ICdzdHJpbmcnICYmIF9fY2hhbm5lbElkX19cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybWF0TG9nICgpIHtcclxuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcclxuICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV1cclxuICB9XHJcbiAgY29uc3QgdHlwZSA9IGFyZ3Muc2hpZnQoKVxyXG4gIGlmIChpc0RlYnVnTW9kZSgpKSB7XHJcbiAgICBhcmdzLnB1c2goYXJncy5wb3AoKS5yZXBsYWNlKCdhdCAnLCAndW5pLWFwcDovLy8nKSlcclxuICAgIHJldHVybiBjb25zb2xlW3R5cGVdWydhcHBseSddKGNvbnNvbGUsIGFyZ3MpXHJcbiAgfVxyXG5cclxuICB2YXIgbXNncyA9IGFyZ3MubWFwKGZ1bmN0aW9uICh2KSB7XHJcbiAgICB2YXIgdHlwZSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2KVxyXG5cclxuICAgIGlmICh0eXBlLnRvTG93ZXJDYXNlKCkgPT09ICdbb2JqZWN0IG9iamVjdF0nKSB7XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgdiA9ICctLS1CRUdJTjpKU09OLS0tJyArIEpTT04uc3RyaW5naWZ5KHYpICsgJy0tLUVORDpKU09OLS0tJ1xyXG4gICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgdiA9ICdbb2JqZWN0IG9iamVjdF0nXHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGlmICh2ID09PSBudWxsKSB7XHJcbiAgICAgICAgdiA9ICctLS1OVUxMLS0tJ1xyXG4gICAgICB9IGVsc2UgaWYgKHYgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHYgPSAnLS0tVU5ERUZJTkVELS0tJ1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHZhciB2VHlwZSA9IHR5cG9mKHYpLnRvVXBwZXJDYXNlKClcclxuXHJcbiAgICAgICAgaWYgKHZUeXBlID09PSAnTlVNQkVSJyB8fCB2VHlwZSA9PT0gJ0JPT0xFQU4nKSB7XHJcbiAgICAgICAgICB2ID0gJy0tLUJFR0lOOicgKyB2VHlwZSArICctLS0nICsgdiArICctLS1FTkQ6JyArIHZUeXBlICsgJy0tLSdcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdiA9IFN0cmluZyh2KVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB2XHJcbiAgfSlcclxuICB2YXIgbXNnID0gJydcclxuXHJcbiAgaWYgKG1zZ3MubGVuZ3RoID4gMSkge1xyXG4gICAgdmFyIGxhc3RNc2cgPSBtc2dzLnBvcCgpXHJcbiAgICBtc2cgPSBtc2dzLmpvaW4oJy0tLUNPTU1BLS0tJylcclxuXHJcbiAgICBpZiAobGFzdE1zZy5pbmRleE9mKCcgYXQgJykgPT09IDApIHtcclxuICAgICAgbXNnICs9IGxhc3RNc2dcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIG1zZyArPSAnLS0tQ09NTUEtLS0nICsgbGFzdE1zZ1xyXG4gICAgfVxyXG4gIH0gZWxzZSB7XHJcbiAgICBtc2cgPSBtc2dzWzBdXHJcbiAgfVxyXG5cclxuICBjb25zb2xlW3R5cGVdKG1zZylcclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///12\n");

/***/ }),

/***/ 13:
/*!***********************************************************************************!*\
  !*** E:/colorUI/ai_chat_front/ai_assist_front/node_modules/query-string/index.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("function _slicedToArray(arr, i) {return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();}function _nonIterableRest() {throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");}function _iterableToArrayLimit(arr, i) {var _arr = [];var _n = true;var _d = false;var _e = undefined;try {for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i[\"return\"] != null) _i[\"return\"]();} finally {if (_d) throw _e;}}return _arr;}function _arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}function _toConsumableArray(arr) {return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();}function _nonIterableSpread() {throw new TypeError(\"Invalid attempt to spread non-iterable instance\");}function _iterableToArray(iter) {if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);}function _arrayWithoutHoles(arr) {if (Array.isArray(arr)) {for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {arr2[i] = arr[i];}return arr2;}}\nvar strictUriEncode = __webpack_require__(/*! strict-uri-encode */ 14);\nvar decodeComponent = __webpack_require__(/*! decode-uri-component */ 15);\nvar splitOnFirst = __webpack_require__(/*! split-on-first */ 16);\n\nfunction encoderForArrayFormat(options) {\n  switch (options.arrayFormat) {\n    case 'index':\n      return function (key) {return function (result, value) {\n          var index = result.length;\n          if (value === undefined || options.skipNull && value === null) {\n            return result;\n          }\n\n          if (value === null) {\n            return [].concat(_toConsumableArray(result), [[encode(key, options), '[', index, ']'].join('')]);\n          }\n\n          return [].concat(_toConsumableArray(\n          result), [\n          [encode(key, options), '[', encode(index, options), ']=', encode(value, options)].join('')]);\n\n        };};\n\n    case 'bracket':\n      return function (key) {return function (result, value) {\n          if (value === undefined || options.skipNull && value === null) {\n            return result;\n          }\n\n          if (value === null) {\n            return [].concat(_toConsumableArray(result), [[encode(key, options), '[]'].join('')]);\n          }\n\n          return [].concat(_toConsumableArray(result), [[encode(key, options), '[]=', encode(value, options)].join('')]);\n        };};\n\n    case 'comma':\n      return function (key) {return function (result, value) {\n          if (value === null || value === undefined || value.length === 0) {\n            return result;\n          }\n\n          if (result.length === 0) {\n            return [[encode(key, options), '=', encode(value, options)].join('')];\n          }\n\n          return [[result, encode(value, options)].join(',')];\n        };};\n\n    default:\n      return function (key) {return function (result, value) {\n          if (value === undefined || options.skipNull && value === null) {\n            return result;\n          }\n\n          if (value === null) {\n            return [].concat(_toConsumableArray(result), [encode(key, options)]);\n          }\n\n          return [].concat(_toConsumableArray(result), [[encode(key, options), '=', encode(value, options)].join('')]);\n        };};}\n\n}\n\nfunction parserForArrayFormat(options) {\n  var result;\n\n  switch (options.arrayFormat) {\n    case 'index':\n      return function (key, value, accumulator) {\n        result = /\\[(\\d*)\\]$/.exec(key);\n\n        key = key.replace(/\\[\\d*\\]$/, '');\n\n        if (!result) {\n          accumulator[key] = value;\n          return;\n        }\n\n        if (accumulator[key] === undefined) {\n          accumulator[key] = {};\n        }\n\n        accumulator[key][result[1]] = value;\n      };\n\n    case 'bracket':\n      return function (key, value, accumulator) {\n        result = /(\\[\\])$/.exec(key);\n        key = key.replace(/\\[\\]$/, '');\n\n        if (!result) {\n          accumulator[key] = value;\n          return;\n        }\n\n        if (accumulator[key] === undefined) {\n          accumulator[key] = [value];\n          return;\n        }\n\n        accumulator[key] = [].concat(accumulator[key], value);\n      };\n\n    case 'comma':\n      return function (key, value, accumulator) {\n        var isArray = typeof value === 'string' && value.split('').indexOf(',') > -1;\n        var newValue = isArray ? value.split(',') : value;\n        accumulator[key] = newValue;\n      };\n\n    default:\n      return function (key, value, accumulator) {\n        if (accumulator[key] === undefined) {\n          accumulator[key] = value;\n          return;\n        }\n\n        accumulator[key] = [].concat(accumulator[key], value);\n      };}\n\n}\n\nfunction encode(value, options) {\n  if (options.encode) {\n    return options.strict ? strictUriEncode(value) : encodeURIComponent(value);\n  }\n\n  return value;\n}\n\nfunction decode(value, options) {\n  if (options.decode) {\n    return decodeComponent(value);\n  }\n\n  return value;\n}\n\nfunction keysSorter(input) {\n  if (Array.isArray(input)) {\n    return input.sort();\n  }\n\n  if (typeof input === 'object') {\n    return keysSorter(Object.keys(input)).\n    sort(function (a, b) {return Number(a) - Number(b);}).\n    map(function (key) {return input[key];});\n  }\n\n  return input;\n}\n\nfunction removeHash(input) {\n  var hashStart = input.indexOf('#');\n  if (hashStart !== -1) {\n    input = input.slice(0, hashStart);\n  }\n\n  return input;\n}\n\nfunction getHash(url) {\n  var hash = '';\n  var hashStart = url.indexOf('#');\n  if (hashStart !== -1) {\n    hash = url.slice(hashStart);\n  }\n\n  return hash;\n}\n\nfunction extract(input) {\n  input = removeHash(input);\n  var queryStart = input.indexOf('?');\n  if (queryStart === -1) {\n    return '';\n  }\n\n  return input.slice(queryStart + 1);\n}\n\nfunction parseValue(value, options) {\n  if (options.parseNumbers && !Number.isNaN(Number(value)) && typeof value === 'string' && value.trim() !== '') {\n    value = Number(value);\n  } else if (options.parseBooleans && value !== null && (value.toLowerCase() === 'true' || value.toLowerCase() === 'false')) {\n    value = value.toLowerCase() === 'true';\n  }\n\n  return value;\n}\n\nfunction parse(input, options) {\n  options = Object.assign({\n    decode: true,\n    sort: true,\n    arrayFormat: 'none',\n    parseNumbers: false,\n    parseBooleans: false },\n  options);\n\n  var formatter = parserForArrayFormat(options);\n\n  // Create an object with no prototype\n  var ret = Object.create(null);\n\n  if (typeof input !== 'string') {\n    return ret;\n  }\n\n  input = input.trim().replace(/^[?#&]/, '');\n\n  if (!input) {\n    return ret;\n  }var _iteratorNormalCompletion = true;var _didIteratorError = false;var _iteratorError = undefined;try {\n\n    for (var _iterator = input.split('&')[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {var param = _step.value;var _splitOnFirst =\n      splitOnFirst(options.decode ? param.replace(/\\+/g, ' ') : param, '='),_splitOnFirst2 = _slicedToArray(_splitOnFirst, 2),key = _splitOnFirst2[0],value = _splitOnFirst2[1];\n\n      // Missing `=` should be `null`:\n      // http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters\n      value = value === undefined ? null : decode(value, options);\n      formatter(decode(key, options), value, ret);\n    }} catch (err) {_didIteratorError = true;_iteratorError = err;} finally {try {if (!_iteratorNormalCompletion && _iterator.return != null) {_iterator.return();}} finally {if (_didIteratorError) {throw _iteratorError;}}}var _arr =\n\n  Object.keys(ret);for (var _i = 0; _i < _arr.length; _i++) {var key = _arr[_i];\n    var value = ret[key];\n    if (typeof value === 'object' && value !== null) {var _arr2 =\n      Object.keys(value);for (var _i2 = 0; _i2 < _arr2.length; _i2++) {var k = _arr2[_i2];\n        value[k] = parseValue(value[k], options);\n      }\n    } else {\n      ret[key] = parseValue(value, options);\n    }\n  }\n\n  if (options.sort === false) {\n    return ret;\n  }\n\n  return (options.sort === true ? Object.keys(ret).sort() : Object.keys(ret).sort(options.sort)).reduce(function (result, key) {\n    var value = ret[key];\n    if (Boolean(value) && typeof value === 'object' && !Array.isArray(value)) {\n      // Sort object keys, not values\n      result[key] = keysSorter(value);\n    } else {\n      result[key] = value;\n    }\n\n    return result;\n  }, Object.create(null));\n}\n\nexports.extract = extract;\nexports.parse = parse;\n\nexports.stringify = function (object, options) {\n  if (!object) {\n    return '';\n  }\n\n  options = Object.assign({\n    encode: true,\n    strict: true,\n    arrayFormat: 'none' },\n  options);\n\n  var formatter = encoderForArrayFormat(options);\n\n  var objectCopy = Object.assign({}, object);\n  if (options.skipNull) {var _arr3 =\n    Object.keys(objectCopy);for (var _i3 = 0; _i3 < _arr3.length; _i3++) {var key = _arr3[_i3];\n      if (objectCopy[key] === undefined || objectCopy[key] === null) {\n        delete objectCopy[key];\n      }\n    }\n  }\n\n  var keys = Object.keys(objectCopy);\n\n  if (options.sort !== false) {\n    keys.sort(options.sort);\n  }\n\n  return keys.map(function (key) {\n    var value = object[key];\n\n    if (value === undefined) {\n      return '';\n    }\n\n    if (value === null) {\n      return encode(key, options);\n    }\n\n    if (Array.isArray(value)) {\n      return value.\n      reduce(formatter(key), []).\n      join('&');\n    }\n\n    return encode(key, options) + '=' + encode(value, options);\n  }).filter(function (x) {return x.length > 0;}).join('&');\n};\n\nexports.parseUrl = function (input, options) {\n  return {\n    url: removeHash(input).split('?')[0] || '',\n    query: parse(extract(input), options) };\n\n};\n\nexports.stringifyUrl = function (input, options) {\n  var url = removeHash(input.url).split('?')[0] || '';\n  var queryFromUrl = exports.extract(input.url);\n  var parsedQueryFromUrl = exports.parse(queryFromUrl);\n  var hash = getHash(input.url);\n  var query = Object.assign(parsedQueryFromUrl, input.query);\n  var queryString = exports.stringify(query, options);\n  if (queryString) {\n    queryString = \"?\".concat(queryString);\n  }\n\n  return \"\".concat(url).concat(queryString).concat(hash);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///13\n");

/***/ }),

/***/ 14:
/*!****************************************************************************************!*\
  !*** E:/colorUI/ai_chat_front/ai_assist_front/node_modules/strict-uri-encode/index.js ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nmodule.exports = function (str) {return encodeURIComponent(str).replace(/[!'()*]/g, function (x) {return \"%\".concat(x.charCodeAt(0).toString(16).toUpperCase());});};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vbm9kZV9tb2R1bGVzL3N0cmljdC11cmktZW5jb2RlL2luZGV4LmpzIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJzdHIiLCJlbmNvZGVVUklDb21wb25lbnQiLCJyZXBsYWNlIiwieCIsImNoYXJDb2RlQXQiLCJ0b1N0cmluZyIsInRvVXBwZXJDYXNlIl0sIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSxNQUFNLENBQUNDLE9BQVAsR0FBaUIsVUFBQUMsR0FBRyxVQUFJQyxrQkFBa0IsQ0FBQ0QsR0FBRCxDQUFsQixDQUF3QkUsT0FBeEIsQ0FBZ0MsVUFBaEMsRUFBNEMsVUFBQUMsQ0FBQyxxQkFBUUEsQ0FBQyxDQUFDQyxVQUFGLENBQWEsQ0FBYixFQUFnQkMsUUFBaEIsQ0FBeUIsRUFBekIsRUFBNkJDLFdBQTdCLEVBQVIsR0FBN0MsQ0FBSixFQUFwQiIsImZpbGUiOiIxNC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0Jztcbm1vZHVsZS5leHBvcnRzID0gc3RyID0+IGVuY29kZVVSSUNvbXBvbmVudChzdHIpLnJlcGxhY2UoL1shJygpKl0vZywgeCA9PiBgJSR7eC5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpfWApO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///14\n");

/***/ }),

/***/ 15:
/*!****************************************************!*\
  !*** ./node_modules/decode-uri-component/index.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar token = '%[a-f0-9]{2}';\nvar singleMatcher = new RegExp(token, 'gi');\nvar multiMatcher = new RegExp('(' + token + ')+', 'gi');\n\nfunction decodeComponents(components, split) {\n\ttry {\n\t\t// Try to decode the entire string first\n\t\treturn decodeURIComponent(components.join(''));\n\t} catch (err) {\n\t\t// Do nothing\n\t}\n\n\tif (components.length === 1) {\n\t\treturn components;\n\t}\n\n\tsplit = split || 1;\n\n\t// Split the array in 2 parts\n\tvar left = components.slice(0, split);\n\tvar right = components.slice(split);\n\n\treturn Array.prototype.concat.call([], decodeComponents(left), decodeComponents(right));\n}\n\nfunction decode(input) {\n\ttry {\n\t\treturn decodeURIComponent(input);\n\t} catch (err) {\n\t\tvar tokens = input.match(singleMatcher);\n\n\t\tfor (var i = 1; i < tokens.length; i++) {\n\t\t\tinput = decodeComponents(tokens, i).join('');\n\n\t\t\ttokens = input.match(singleMatcher);\n\t\t}\n\n\t\treturn input;\n\t}\n}\n\nfunction customDecodeURIComponent(input) {\n\t// Keep track of all the replacements and prefill the map with the `BOM`\n\tvar replaceMap = {\n\t\t'%FE%FF': '\\uFFFD\\uFFFD',\n\t\t'%FF%FE': '\\uFFFD\\uFFFD'\n\t};\n\n\tvar match = multiMatcher.exec(input);\n\twhile (match) {\n\t\ttry {\n\t\t\t// Decode as big chunks as possible\n\t\t\treplaceMap[match[0]] = decodeURIComponent(match[0]);\n\t\t} catch (err) {\n\t\t\tvar result = decode(match[0]);\n\n\t\t\tif (result !== match[0]) {\n\t\t\t\treplaceMap[match[0]] = result;\n\t\t\t}\n\t\t}\n\n\t\tmatch = multiMatcher.exec(input);\n\t}\n\n\t// Add `%C2` at the end of the map to make sure it does not replace the combinator before everything else\n\treplaceMap['%C2'] = '\\uFFFD';\n\n\tvar entries = Object.keys(replaceMap);\n\n\tfor (var i = 0; i < entries.length; i++) {\n\t\t// Replace all decoded components\n\t\tvar key = entries[i];\n\t\tinput = input.replace(new RegExp(key, 'g'), replaceMap[key]);\n\t}\n\n\treturn input;\n}\n\nmodule.exports = function (encodedURI) {\n\tif (typeof encodedURI !== 'string') {\n\t\tthrow new TypeError('Expected `encodedURI` to be of type `string`, got `' + typeof encodedURI + '`');\n\t}\n\n\ttry {\n\t\tencodedURI = encodedURI.replace(/\\+/g, ' ');\n\n\t\t// Try the built in decoder first\n\t\treturn decodeURIComponent(encodedURI);\n\t} catch (err) {\n\t\t// Fallback to a more advanced decoder\n\t\treturn customDecodeURIComponent(encodedURI);\n\t}\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsdUJBQXVCLEVBQUU7QUFDekI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7O0FBRUEsaUJBQWlCLG1CQUFtQjtBQUNwQzs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUEsZ0JBQWdCLG9CQUFvQjtBQUNwQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIxNS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbnZhciB0b2tlbiA9ICclW2EtZjAtOV17Mn0nO1xudmFyIHNpbmdsZU1hdGNoZXIgPSBuZXcgUmVnRXhwKHRva2VuLCAnZ2knKTtcbnZhciBtdWx0aU1hdGNoZXIgPSBuZXcgUmVnRXhwKCcoJyArIHRva2VuICsgJykrJywgJ2dpJyk7XG5cbmZ1bmN0aW9uIGRlY29kZUNvbXBvbmVudHMoY29tcG9uZW50cywgc3BsaXQpIHtcblx0dHJ5IHtcblx0XHQvLyBUcnkgdG8gZGVjb2RlIHRoZSBlbnRpcmUgc3RyaW5nIGZpcnN0XG5cdFx0cmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChjb21wb25lbnRzLmpvaW4oJycpKTtcblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0Ly8gRG8gbm90aGluZ1xuXHR9XG5cblx0aWYgKGNvbXBvbmVudHMubGVuZ3RoID09PSAxKSB7XG5cdFx0cmV0dXJuIGNvbXBvbmVudHM7XG5cdH1cblxuXHRzcGxpdCA9IHNwbGl0IHx8IDE7XG5cblx0Ly8gU3BsaXQgdGhlIGFycmF5IGluIDIgcGFydHNcblx0dmFyIGxlZnQgPSBjb21wb25lbnRzLnNsaWNlKDAsIHNwbGl0KTtcblx0dmFyIHJpZ2h0ID0gY29tcG9uZW50cy5zbGljZShzcGxpdCk7XG5cblx0cmV0dXJuIEFycmF5LnByb3RvdHlwZS5jb25jYXQuY2FsbChbXSwgZGVjb2RlQ29tcG9uZW50cyhsZWZ0KSwgZGVjb2RlQ29tcG9uZW50cyhyaWdodCkpO1xufVxuXG5mdW5jdGlvbiBkZWNvZGUoaW5wdXQpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KGlucHV0KTtcblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0dmFyIHRva2VucyA9IGlucHV0Lm1hdGNoKHNpbmdsZU1hdGNoZXIpO1xuXG5cdFx0Zm9yICh2YXIgaSA9IDE7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcblx0XHRcdGlucHV0ID0gZGVjb2RlQ29tcG9uZW50cyh0b2tlbnMsIGkpLmpvaW4oJycpO1xuXG5cdFx0XHR0b2tlbnMgPSBpbnB1dC5tYXRjaChzaW5nbGVNYXRjaGVyKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gaW5wdXQ7XG5cdH1cbn1cblxuZnVuY3Rpb24gY3VzdG9tRGVjb2RlVVJJQ29tcG9uZW50KGlucHV0KSB7XG5cdC8vIEtlZXAgdHJhY2sgb2YgYWxsIHRoZSByZXBsYWNlbWVudHMgYW5kIHByZWZpbGwgdGhlIG1hcCB3aXRoIHRoZSBgQk9NYFxuXHR2YXIgcmVwbGFjZU1hcCA9IHtcblx0XHQnJUZFJUZGJzogJ1xcdUZGRkRcXHVGRkZEJyxcblx0XHQnJUZGJUZFJzogJ1xcdUZGRkRcXHVGRkZEJ1xuXHR9O1xuXG5cdHZhciBtYXRjaCA9IG11bHRpTWF0Y2hlci5leGVjKGlucHV0KTtcblx0d2hpbGUgKG1hdGNoKSB7XG5cdFx0dHJ5IHtcblx0XHRcdC8vIERlY29kZSBhcyBiaWcgY2h1bmtzIGFzIHBvc3NpYmxlXG5cdFx0XHRyZXBsYWNlTWFwW21hdGNoWzBdXSA9IGRlY29kZVVSSUNvbXBvbmVudChtYXRjaFswXSk7XG5cdFx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0XHR2YXIgcmVzdWx0ID0gZGVjb2RlKG1hdGNoWzBdKTtcblxuXHRcdFx0aWYgKHJlc3VsdCAhPT0gbWF0Y2hbMF0pIHtcblx0XHRcdFx0cmVwbGFjZU1hcFttYXRjaFswXV0gPSByZXN1bHQ7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0bWF0Y2ggPSBtdWx0aU1hdGNoZXIuZXhlYyhpbnB1dCk7XG5cdH1cblxuXHQvLyBBZGQgYCVDMmAgYXQgdGhlIGVuZCBvZiB0aGUgbWFwIHRvIG1ha2Ugc3VyZSBpdCBkb2VzIG5vdCByZXBsYWNlIHRoZSBjb21iaW5hdG9yIGJlZm9yZSBldmVyeXRoaW5nIGVsc2Vcblx0cmVwbGFjZU1hcFsnJUMyJ10gPSAnXFx1RkZGRCc7XG5cblx0dmFyIGVudHJpZXMgPSBPYmplY3Qua2V5cyhyZXBsYWNlTWFwKTtcblxuXHRmb3IgKHZhciBpID0gMDsgaSA8IGVudHJpZXMubGVuZ3RoOyBpKyspIHtcblx0XHQvLyBSZXBsYWNlIGFsbCBkZWNvZGVkIGNvbXBvbmVudHNcblx0XHR2YXIga2V5ID0gZW50cmllc1tpXTtcblx0XHRpbnB1dCA9IGlucHV0LnJlcGxhY2UobmV3IFJlZ0V4cChrZXksICdnJyksIHJlcGxhY2VNYXBba2V5XSk7XG5cdH1cblxuXHRyZXR1cm4gaW5wdXQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGVuY29kZWRVUkkpIHtcblx0aWYgKHR5cGVvZiBlbmNvZGVkVVJJICE9PSAnc3RyaW5nJykge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIGBlbmNvZGVkVVJJYCB0byBiZSBvZiB0eXBlIGBzdHJpbmdgLCBnb3QgYCcgKyB0eXBlb2YgZW5jb2RlZFVSSSArICdgJyk7XG5cdH1cblxuXHR0cnkge1xuXHRcdGVuY29kZWRVUkkgPSBlbmNvZGVkVVJJLnJlcGxhY2UoL1xcKy9nLCAnICcpO1xuXG5cdFx0Ly8gVHJ5IHRoZSBidWlsdCBpbiBkZWNvZGVyIGZpcnN0XG5cdFx0cmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChlbmNvZGVkVVJJKTtcblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0Ly8gRmFsbGJhY2sgdG8gYSBtb3JlIGFkdmFuY2VkIGRlY29kZXJcblx0XHRyZXR1cm4gY3VzdG9tRGVjb2RlVVJJQ29tcG9uZW50KGVuY29kZWRVUkkpO1xuXHR9XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///15\n");

/***/ }),

/***/ 16:
/*!*************************************************************************************!*\
  !*** E:/colorUI/ai_chat_front/ai_assist_front/node_modules/split-on-first/index.js ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = function (string, separator) {\n  if (!(typeof string === 'string' && typeof separator === 'string')) {\n    throw new TypeError('Expected the arguments to be of type `string`');\n  }\n\n  if (separator === '') {\n    return [string];\n  }\n\n  var separatorIndex = string.indexOf(separator);\n\n  if (separatorIndex === -1) {\n    return [string];\n  }\n\n  return [\n  string.slice(0, separatorIndex),\n  string.slice(separatorIndex + separator.length)];\n\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vbm9kZV9tb2R1bGVzL3NwbGl0LW9uLWZpcnN0L2luZGV4LmpzIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJzdHJpbmciLCJzZXBhcmF0b3IiLCJUeXBlRXJyb3IiLCJzZXBhcmF0b3JJbmRleCIsImluZGV4T2YiLCJzbGljZSIsImxlbmd0aCJdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWJBLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixVQUFDQyxNQUFELEVBQVNDLFNBQVQsRUFBdUI7QUFDdkMsTUFBSSxFQUFFLE9BQU9ELE1BQVAsS0FBa0IsUUFBbEIsSUFBOEIsT0FBT0MsU0FBUCxLQUFxQixRQUFyRCxDQUFKLEVBQW9FO0FBQ25FLFVBQU0sSUFBSUMsU0FBSixDQUFjLCtDQUFkLENBQU47QUFDQTs7QUFFRCxNQUFJRCxTQUFTLEtBQUssRUFBbEIsRUFBc0I7QUFDckIsV0FBTyxDQUFDRCxNQUFELENBQVA7QUFDQTs7QUFFRCxNQUFNRyxjQUFjLEdBQUdILE1BQU0sQ0FBQ0ksT0FBUCxDQUFlSCxTQUFmLENBQXZCOztBQUVBLE1BQUlFLGNBQWMsS0FBSyxDQUFDLENBQXhCLEVBQTJCO0FBQzFCLFdBQU8sQ0FBQ0gsTUFBRCxDQUFQO0FBQ0E7O0FBRUQsU0FBTztBQUNOQSxRQUFNLENBQUNLLEtBQVAsQ0FBYSxDQUFiLEVBQWdCRixjQUFoQixDQURNO0FBRU5ILFFBQU0sQ0FBQ0ssS0FBUCxDQUFhRixjQUFjLEdBQUdGLFNBQVMsQ0FBQ0ssTUFBeEMsQ0FGTSxDQUFQOztBQUlBLENBbkJEIiwiZmlsZSI6IjE2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChzdHJpbmcsIHNlcGFyYXRvcikgPT4ge1xuXHRpZiAoISh0eXBlb2Ygc3RyaW5nID09PSAnc3RyaW5nJyAmJiB0eXBlb2Ygc2VwYXJhdG9yID09PSAnc3RyaW5nJykpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCB0aGUgYXJndW1lbnRzIHRvIGJlIG9mIHR5cGUgYHN0cmluZ2AnKTtcblx0fVxuXG5cdGlmIChzZXBhcmF0b3IgPT09ICcnKSB7XG5cdFx0cmV0dXJuIFtzdHJpbmddO1xuXHR9XG5cblx0Y29uc3Qgc2VwYXJhdG9ySW5kZXggPSBzdHJpbmcuaW5kZXhPZihzZXBhcmF0b3IpO1xuXG5cdGlmIChzZXBhcmF0b3JJbmRleCA9PT0gLTEpIHtcblx0XHRyZXR1cm4gW3N0cmluZ107XG5cdH1cblxuXHRyZXR1cm4gW1xuXHRcdHN0cmluZy5zbGljZSgwLCBzZXBhcmF0b3JJbmRleCksXG5cdFx0c3RyaW5nLnNsaWNlKHNlcGFyYXRvckluZGV4ICsgc2VwYXJhdG9yLmxlbmd0aClcblx0XTtcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///16\n");

/***/ }),

/***/ 19:
/*!**********************************************************************************************************!*\
  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/runtime/componentNormalizer.js ***!
  \**********************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return normalizeComponent; });\n/* globals __VUE_SSR_CONTEXT__ */\n\n// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).\n// This module is a runtime utility for cleaner component module output and will\n// be included in the final webpack user bundle.\n\nfunction normalizeComponent (\n  scriptExports,\n  render,\n  staticRenderFns,\n  functionalTemplate,\n  injectStyles,\n  scopeId,\n  moduleIdentifier, /* server only */\n  shadowMode, /* vue-cli only */\n  components, // fixed by xxxxxx auto components\n  renderjs // fixed by xxxxxx renderjs\n) {\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // fixed by xxxxxx auto components\n  if (components) {\n    options.components = Object.assign(components, options.components || {})\n  }\n  // fixed by xxxxxx renderjs\n  if (renderjs) {\n    (renderjs.beforeCreate || (renderjs.beforeCreate = [])).unshift(function() {\n      this[renderjs.__module] = this\n    });\n    (options.mixins || (options.mixins = [])).push(renderjs)\n  }\n\n  // render functions\n  if (render) {\n    options.render = render\n    options.staticRenderFns = staticRenderFns\n    options._compiled = true\n  }\n\n  // functional template\n  if (functionalTemplate) {\n    options.functional = true\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = 'data-v-' + scopeId\n  }\n\n  var hook\n  if (moduleIdentifier) { // server build\n    hook = function (context) {\n      // 2.3 injection\n      context =\n        context || // cached call\n        (this.$vnode && this.$vnode.ssrContext) || // stateful\n        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional\n      // 2.2 with runInNewContext: true\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n        context = __VUE_SSR_CONTEXT__\n      }\n      // inject component styles\n      if (injectStyles) {\n        injectStyles.call(this, context)\n      }\n      // register component module identifier for async chunk inferrence\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier)\n      }\n    }\n    // used by ssr in case component is cached and beforeCreate\n    // never gets called\n    options._ssrRegister = hook\n  } else if (injectStyles) {\n    hook = shadowMode\n      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }\n      : injectStyles\n  }\n\n  if (hook) {\n    if (options.functional) {\n      // for template-only hot-reload because in that case the render fn doesn't\n      // go through the normalizer\n      options._injectStyles = hook\n      // register for functioal component in vue file\n      var originalRender = options.render\n      options.render = function renderWithStyleInjection (h, context) {\n        hook.call(context)\n        return originalRender(h, context)\n      }\n    } else {\n      // inject component registration as beforeCreate hook\n      var existing = options.beforeCreate\n      options.beforeCreate = existing\n        ? [].concat(existing, hook)\n        : [hook]\n    }\n  }\n\n  return {\n    exports: scriptExports,\n    options: options\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDJFQUEyRTtBQUMzRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjE5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogZ2xvYmFscyBfX1ZVRV9TU1JfQ09OVEVYVF9fICovXG5cbi8vIElNUE9SVEFOVDogRG8gTk9UIHVzZSBFUzIwMTUgZmVhdHVyZXMgaW4gdGhpcyBmaWxlIChleGNlcHQgZm9yIG1vZHVsZXMpLlxuLy8gVGhpcyBtb2R1bGUgaXMgYSBydW50aW1lIHV0aWxpdHkgZm9yIGNsZWFuZXIgY29tcG9uZW50IG1vZHVsZSBvdXRwdXQgYW5kIHdpbGxcbi8vIGJlIGluY2x1ZGVkIGluIHRoZSBmaW5hbCB3ZWJwYWNrIHVzZXIgYnVuZGxlLlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBub3JtYWxpemVDb21wb25lbnQgKFxuICBzY3JpcHRFeHBvcnRzLFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZnVuY3Rpb25hbFRlbXBsYXRlLFxuICBpbmplY3RTdHlsZXMsXG4gIHNjb3BlSWQsXG4gIG1vZHVsZUlkZW50aWZpZXIsIC8qIHNlcnZlciBvbmx5ICovXG4gIHNoYWRvd01vZGUsIC8qIHZ1ZS1jbGkgb25seSAqL1xuICBjb21wb25lbnRzLCAvLyBmaXhlZCBieSB4eHh4eHggYXV0byBjb21wb25lbnRzXG4gIHJlbmRlcmpzIC8vIGZpeGVkIGJ5IHh4eHh4eCByZW5kZXJqc1xuKSB7XG4gIC8vIFZ1ZS5leHRlbmQgY29uc3RydWN0b3IgZXhwb3J0IGludGVyb3BcbiAgdmFyIG9wdGlvbnMgPSB0eXBlb2Ygc2NyaXB0RXhwb3J0cyA9PT0gJ2Z1bmN0aW9uJ1xuICAgID8gc2NyaXB0RXhwb3J0cy5vcHRpb25zXG4gICAgOiBzY3JpcHRFeHBvcnRzXG5cbiAgLy8gZml4ZWQgYnkgeHh4eHh4IGF1dG8gY29tcG9uZW50c1xuICBpZiAoY29tcG9uZW50cykge1xuICAgIG9wdGlvbnMuY29tcG9uZW50cyA9IE9iamVjdC5hc3NpZ24oY29tcG9uZW50cywgb3B0aW9ucy5jb21wb25lbnRzIHx8IHt9KVxuICB9XG4gIC8vIGZpeGVkIGJ5IHh4eHh4eCByZW5kZXJqc1xuICBpZiAocmVuZGVyanMpIHtcbiAgICAocmVuZGVyanMuYmVmb3JlQ3JlYXRlIHx8IChyZW5kZXJqcy5iZWZvcmVDcmVhdGUgPSBbXSkpLnVuc2hpZnQoZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzW3JlbmRlcmpzLl9fbW9kdWxlXSA9IHRoaXNcbiAgICB9KTtcbiAgICAob3B0aW9ucy5taXhpbnMgfHwgKG9wdGlvbnMubWl4aW5zID0gW10pKS5wdXNoKHJlbmRlcmpzKVxuICB9XG5cbiAgLy8gcmVuZGVyIGZ1bmN0aW9uc1xuICBpZiAocmVuZGVyKSB7XG4gICAgb3B0aW9ucy5yZW5kZXIgPSByZW5kZXJcbiAgICBvcHRpb25zLnN0YXRpY1JlbmRlckZucyA9IHN0YXRpY1JlbmRlckZuc1xuICAgIG9wdGlvbnMuX2NvbXBpbGVkID0gdHJ1ZVxuICB9XG5cbiAgLy8gZnVuY3Rpb25hbCB0ZW1wbGF0ZVxuICBpZiAoZnVuY3Rpb25hbFRlbXBsYXRlKSB7XG4gICAgb3B0aW9ucy5mdW5jdGlvbmFsID0gdHJ1ZVxuICB9XG5cbiAgLy8gc2NvcGVkSWRcbiAgaWYgKHNjb3BlSWQpIHtcbiAgICBvcHRpb25zLl9zY29wZUlkID0gJ2RhdGEtdi0nICsgc2NvcGVJZFxuICB9XG5cbiAgdmFyIGhvb2tcbiAgaWYgKG1vZHVsZUlkZW50aWZpZXIpIHsgLy8gc2VydmVyIGJ1aWxkXG4gICAgaG9vayA9IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAvLyAyLjMgaW5qZWN0aW9uXG4gICAgICBjb250ZXh0ID1cbiAgICAgICAgY29udGV4dCB8fCAvLyBjYWNoZWQgY2FsbFxuICAgICAgICAodGhpcy4kdm5vZGUgJiYgdGhpcy4kdm5vZGUuc3NyQ29udGV4dCkgfHwgLy8gc3RhdGVmdWxcbiAgICAgICAgKHRoaXMucGFyZW50ICYmIHRoaXMucGFyZW50LiR2bm9kZSAmJiB0aGlzLnBhcmVudC4kdm5vZGUuc3NyQ29udGV4dCkgLy8gZnVuY3Rpb25hbFxuICAgICAgLy8gMi4yIHdpdGggcnVuSW5OZXdDb250ZXh0OiB0cnVlXG4gICAgICBpZiAoIWNvbnRleHQgJiYgdHlwZW9mIF9fVlVFX1NTUl9DT05URVhUX18gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGNvbnRleHQgPSBfX1ZVRV9TU1JfQ09OVEVYVF9fXG4gICAgICB9XG4gICAgICAvLyBpbmplY3QgY29tcG9uZW50IHN0eWxlc1xuICAgICAgaWYgKGluamVjdFN0eWxlcykge1xuICAgICAgICBpbmplY3RTdHlsZXMuY2FsbCh0aGlzLCBjb250ZXh0KVxuICAgICAgfVxuICAgICAgLy8gcmVnaXN0ZXIgY29tcG9uZW50IG1vZHVsZSBpZGVudGlmaWVyIGZvciBhc3luYyBjaHVuayBpbmZlcnJlbmNlXG4gICAgICBpZiAoY29udGV4dCAmJiBjb250ZXh0Ll9yZWdpc3RlcmVkQ29tcG9uZW50cykge1xuICAgICAgICBjb250ZXh0Ll9yZWdpc3RlcmVkQ29tcG9uZW50cy5hZGQobW9kdWxlSWRlbnRpZmllcilcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gdXNlZCBieSBzc3IgaW4gY2FzZSBjb21wb25lbnQgaXMgY2FjaGVkIGFuZCBiZWZvcmVDcmVhdGVcbiAgICAvLyBuZXZlciBnZXRzIGNhbGxlZFxuICAgIG9wdGlvbnMuX3NzclJlZ2lzdGVyID0gaG9va1xuICB9IGVsc2UgaWYgKGluamVjdFN0eWxlcykge1xuICAgIGhvb2sgPSBzaGFkb3dNb2RlXG4gICAgICA/IGZ1bmN0aW9uICgpIHsgaW5qZWN0U3R5bGVzLmNhbGwodGhpcywgdGhpcy4kcm9vdC4kb3B0aW9ucy5zaGFkb3dSb290KSB9XG4gICAgICA6IGluamVjdFN0eWxlc1xuICB9XG5cbiAgaWYgKGhvb2spIHtcbiAgICBpZiAob3B0aW9ucy5mdW5jdGlvbmFsKSB7XG4gICAgICAvLyBmb3IgdGVtcGxhdGUtb25seSBob3QtcmVsb2FkIGJlY2F1c2UgaW4gdGhhdCBjYXNlIHRoZSByZW5kZXIgZm4gZG9lc24ndFxuICAgICAgLy8gZ28gdGhyb3VnaCB0aGUgbm9ybWFsaXplclxuICAgICAgb3B0aW9ucy5faW5qZWN0U3R5bGVzID0gaG9va1xuICAgICAgLy8gcmVnaXN0ZXIgZm9yIGZ1bmN0aW9hbCBjb21wb25lbnQgaW4gdnVlIGZpbGVcbiAgICAgIHZhciBvcmlnaW5hbFJlbmRlciA9IG9wdGlvbnMucmVuZGVyXG4gICAgICBvcHRpb25zLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcldpdGhTdHlsZUluamVjdGlvbiAoaCwgY29udGV4dCkge1xuICAgICAgICBob29rLmNhbGwoY29udGV4dClcbiAgICAgICAgcmV0dXJuIG9yaWdpbmFsUmVuZGVyKGgsIGNvbnRleHQpXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGluamVjdCBjb21wb25lbnQgcmVnaXN0cmF0aW9uIGFzIGJlZm9yZUNyZWF0ZSBob29rXG4gICAgICB2YXIgZXhpc3RpbmcgPSBvcHRpb25zLmJlZm9yZUNyZWF0ZVxuICAgICAgb3B0aW9ucy5iZWZvcmVDcmVhdGUgPSBleGlzdGluZ1xuICAgICAgICA/IFtdLmNvbmNhdChleGlzdGluZywgaG9vaylcbiAgICAgICAgOiBbaG9va11cbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGV4cG9ydHM6IHNjcmlwdEV4cG9ydHMsXG4gICAgb3B0aW9uczogb3B0aW9uc1xuICB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///19\n");

/***/ }),

/***/ 2:
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsNENBQTRDOztBQUU1QyIsImZpbGUiOiIyLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2\n");

/***/ }),

/***/ 20:
/*!*****************************************************************!*\
  !*** E:/colorUI/ai_chat_front/ai_assist_front/colorui/main.css ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjIwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///20\n");

/***/ }),

/***/ 21:
/*!*****************************************************************!*\
  !*** E:/colorUI/ai_chat_front/ai_assist_front/colorui/icon.css ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjIxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///21\n");

/***/ }),

/***/ 22:
/*!********************************************************************!*\
  !*** E:/colorUI/ai_chat_front/ai_assist_front/components/comm.css ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjIyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///22\n");

/***/ }),

/***/ 23:
/*!*******************************************************************!*\
  !*** E:/colorUI/ai_chat_front/ai_assist_front/utils/commonURL.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0; // const mainURL = \"https://api-test.jkhelper.com/api.php\" \n// const mainURL = \"https://api-dev.jkhelper.com/api.php\"\n// const mainURL = \"https://api.jkhelper.com/api.php\"\n\n\n/*\r\n*\t正式\r\n* */\nvar mainURL = \"https://m.checkshirt-ai.com\";\nvar shareURL = \"https://m.checkshirt-ai.com/index.html#/pages/JumpLogin/JumpLogin\";\n\n/*\r\n                                                                                    *\t测试\r\n                                                                                    * */\n// const mainURL = \"http://m.t.checkshirt-ai.com\"\n// const shareURL = \"http://m.t.checkshirt-ai.com/index.html#/pages/JumpLogin/JumpLogin\"  \nvar _default =\n\n{\n  mainURL: mainURL,\n  shareURL: shareURL };exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vdXRpbHMvY29tbW9uVVJMLmpzIl0sIm5hbWVzIjpbIm1haW5VUkwiLCJzaGFyZVVSTCJdLCJtYXBwaW5ncyI6IndGQUFBO0FBQ0E7QUFDQTs7O0FBR0E7OztBQUdBLElBQU1BLE9BQU8sR0FBRyw2QkFBaEI7QUFDQSxJQUFNQyxRQUFRLEdBQUcsbUVBQWpCOztBQUVBOzs7QUFHQTtBQUNBOzs7QUFHZTtBQUNkRCxTQUFPLEVBQVBBLE9BRGM7QUFFZEMsVUFBUSxFQUFSQSxRQUZjLEUiLCJmaWxlIjoiMjMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjb25zdCBtYWluVVJMID0gXCJodHRwczovL2FwaS10ZXN0LmpraGVscGVyLmNvbS9hcGkucGhwXCIgXHJcbi8vIGNvbnN0IG1haW5VUkwgPSBcImh0dHBzOi8vYXBpLWRldi5qa2hlbHBlci5jb20vYXBpLnBocFwiXHJcbi8vIGNvbnN0IG1haW5VUkwgPSBcImh0dHBzOi8vYXBpLmpraGVscGVyLmNvbS9hcGkucGhwXCJcclxuXHJcblxyXG4vKlxyXG4qXHTmraPlvI9cclxuKiAqLyBcclxuY29uc3QgbWFpblVSTCA9IFwiaHR0cHM6Ly9tLmNoZWNrc2hpcnQtYWkuY29tXCJcclxuY29uc3Qgc2hhcmVVUkwgPSBcImh0dHBzOi8vbS5jaGVja3NoaXJ0LWFpLmNvbS9pbmRleC5odG1sIy9wYWdlcy9KdW1wTG9naW4vSnVtcExvZ2luXCJcclxuXHJcbi8qXHJcbipcdOa1i+ivlVxyXG4qICovIFxyXG4vLyBjb25zdCBtYWluVVJMID0gXCJodHRwOi8vbS50LmNoZWNrc2hpcnQtYWkuY29tXCJcclxuLy8gY29uc3Qgc2hhcmVVUkwgPSBcImh0dHA6Ly9tLnQuY2hlY2tzaGlydC1haS5jb20vaW5kZXguaHRtbCMvcGFnZXMvSnVtcExvZ2luL0p1bXBMb2dpblwiICBcclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcblx0bWFpblVSTCxcclxuXHRzaGFyZVVSTFxyXG59ICAgICAgICAgICAgIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///23\n");

/***/ }),

/***/ 24:
/*!*********************************************************************************************!*\
  !*** E:/colorUI/ai_chat_front/ai_assist_front/node_modules/vue-clipboard2/vue-clipboard.js ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("var Clipboard = __webpack_require__(/*! clipboard/dist/clipboard.min.js */ 25); // FIXME: workaround for browserify\n\nvar VueClipboardConfig = {\n  autoSetContainer: false,\n  appendToBody: true // This fixes IE, see #50\n};\n\nvar VueClipboard = {\n  install: function install(Vue) {\n    Vue.prototype.$clipboardConfig = VueClipboardConfig;\n    Vue.prototype.$copyText = function (_text, container) {\n      return new Promise(function (resolve, reject) {\n        var fakeElement = document.createElement('button');\n        var clipboard = new Clipboard(fakeElement, {\n          text: function text() {return _text;},\n          action: function action() {return 'copy';},\n          container: typeof container === 'object' ? container : document.body });\n\n        clipboard.on('success', function (e) {\n          clipboard.destroy();\n          resolve(e);\n        });\n        clipboard.on('error', function (e) {\n          clipboard.destroy();\n          reject(e);\n        });\n        if (VueClipboardConfig.appendToBody) document.body.appendChild(fakeElement);\n        fakeElement.click();\n        if (VueClipboardConfig.appendToBody) document.body.removeChild(fakeElement);\n      });\n    };\n\n    Vue.directive('clipboard', {\n      bind: function bind(el, binding, vnode) {\n        if (binding.arg === 'success') {\n          el._vClipboard_success = binding.value;\n        } else if (binding.arg === 'error') {\n          el._vClipboard_error = binding.value;\n        } else {\n          var clipboard = new Clipboard(el, {\n            text: function text() {return binding.value;},\n            action: function action() {return binding.arg === 'cut' ? 'cut' : 'copy';},\n            container: VueClipboardConfig.autoSetContainer ? el : undefined });\n\n          clipboard.on('success', function (e) {\n            var callback = el._vClipboard_success;\n            callback && callback(e);\n          });\n          clipboard.on('error', function (e) {\n            var callback = el._vClipboard_error;\n            callback && callback(e);\n          });\n          el._vClipboard = clipboard;\n        }\n      },\n      update: function update(el, binding) {\n        if (binding.arg === 'success') {\n          el._vClipboard_success = binding.value;\n        } else if (binding.arg === 'error') {\n          el._vClipboard_error = binding.value;\n        } else {\n          el._vClipboard.text = function () {return binding.value;};\n          el._vClipboard.action = function () {return binding.arg === 'cut' ? 'cut' : 'copy';};\n        }\n      },\n      unbind: function unbind(el, binding) {\n        if (binding.arg === 'success') {\n          delete el._vClipboard_success;\n        } else if (binding.arg === 'error') {\n          delete el._vClipboard_error;\n        } else {\n          el._vClipboard.destroy();\n          delete el._vClipboard;\n        }\n      } });\n\n  },\n  config: VueClipboardConfig };\n\n\nif (true) {\n  module.exports = VueClipboard;\n} else {}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///24\n");

/***/ }),

/***/ 25:
/*!*********************************************************************************************!*\
  !*** E:/colorUI/ai_chat_front/ai_assist_front/node_modules/clipboard/dist/clipboard.min.js ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" /*!\n               * clipboard.js v2.0.4\n               * https://zenorocha.github.io/clipboard.js\n               * \n               * Licensed MIT © Zeno Rocha\n               */\n!function (t, e) { true ? module.exports = e() : undefined;}(void 0, function () {return function (n) {var o = {};function r(t) {if (o[t]) return o[t].exports;var e = o[t] = { i: t, l: !1, exports: {} };return n[t].call(e.exports, e, e.exports, r), e.l = !0, e.exports;}return r.m = n, r.c = o, r.d = function (t, e, n) {r.o(t, e) || Object.defineProperty(t, e, { enumerable: !0, get: n });}, r.r = function (t) {\"undefined\" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t, Symbol.toStringTag, { value: \"Module\" }), Object.defineProperty(t, \"__esModule\", { value: !0 });}, r.t = function (e, t) {if (1 & t && (e = r(e)), 8 & t) return e;if (4 & t && \"object\" == typeof e && e && e.__esModule) return e;var n = Object.create(null);if (r.r(n), Object.defineProperty(n, \"default\", { enumerable: !0, value: e }), 2 & t && \"string\" != typeof e) for (var o in e) {r.d(n, o, function (t) {return e[t];}.bind(null, o));}return n;}, r.n = function (t) {var e = t && t.__esModule ? function () {return t.default;} : function () {return t;};return r.d(e, \"a\", e), e;}, r.o = function (t, e) {return Object.prototype.hasOwnProperty.call(t, e);}, r.p = \"\", r(r.s = 0);}([function (t, e, n) {\"use strict\";var r = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (t) {return typeof t;} : function (t) {return t && \"function\" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? \"symbol\" : typeof t;},i = function () {function o(t, e) {for (var n = 0; n < e.length; n++) {var o = e[n];o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(t, o.key, o);}}return function (t, e, n) {return e && o(t.prototype, e), n && o(t, n), t;};}(),a = o(n(1)),c = o(n(3)),u = o(n(4));function o(t) {return t && t.__esModule ? t : { default: t };}var l = function (t) {function o(t, e) {!function (t, e) {if (!(t instanceof e)) throw new TypeError(\"Cannot call a class as a function\");}(this, o);var n = function (t, e) {if (!t) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");return !e || \"object\" != typeof e && \"function\" != typeof e ? t : e;}(this, (o.__proto__ || Object.getPrototypeOf(o)).call(this));return n.resolveOptions(e), n.listenClick(t), n;}return function (t, e) {if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function, not \" + typeof e);t.prototype = Object.create(e && e.prototype, { constructor: { value: t, enumerable: !1, writable: !0, configurable: !0 } }), e && (Object.setPrototypeOf ? Object.setPrototypeOf(t, e) : t.__proto__ = e);}(o, c.default), i(o, [{ key: \"resolveOptions\", value: function value() {var t = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : {};this.action = \"function\" == typeof t.action ? t.action : this.defaultAction, this.target = \"function\" == typeof t.target ? t.target : this.defaultTarget, this.text = \"function\" == typeof t.text ? t.text : this.defaultText, this.container = \"object\" === r(t.container) ? t.container : document.body;} }, { key: \"listenClick\", value: function value(t) {var e = this;this.listener = (0, u.default)(t, \"click\", function (t) {return e.onClick(t);});} }, { key: \"onClick\", value: function value(t) {var e = t.delegateTarget || t.currentTarget;this.clipboardAction && (this.clipboardAction = null), this.clipboardAction = new a.default({ action: this.action(e), target: this.target(e), text: this.text(e), container: this.container, trigger: e, emitter: this });} }, { key: \"defaultAction\", value: function value(t) {return s(\"action\", t);} }, { key: \"defaultTarget\", value: function value(t) {var e = s(\"target\", t);if (e) return document.querySelector(e);} }, { key: \"defaultText\", value: function value(t) {return s(\"text\", t);} }, { key: \"destroy\", value: function value() {this.listener.destroy(), this.clipboardAction && (this.clipboardAction.destroy(), this.clipboardAction = null);} }], [{ key: \"isSupported\", value: function value() {var t = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : [\"copy\", \"cut\"],e = \"string\" == typeof t ? [t] : t,n = !!document.queryCommandSupported;return e.forEach(function (t) {n = n && !!document.queryCommandSupported(t);}), n;} }]), o;}();function s(t, e) {var n = \"data-clipboard-\" + t;if (e.hasAttribute(n)) return e.getAttribute(n);}t.exports = l;}, function (t, e, n) {\"use strict\";var o,r = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (t) {return typeof t;} : function (t) {return t && \"function\" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? \"symbol\" : typeof t;},i = function () {function o(t, e) {for (var n = 0; n < e.length; n++) {var o = e[n];o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(t, o.key, o);}}return function (t, e, n) {return e && o(t.prototype, e), n && o(t, n), t;};}(),a = n(2),c = (o = a) && o.__esModule ? o : { default: o };var u = function () {function e(t) {!function (t, e) {if (!(t instanceof e)) throw new TypeError(\"Cannot call a class as a function\");}(this, e), this.resolveOptions(t), this.initSelection();}return i(e, [{ key: \"resolveOptions\", value: function value() {var t = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : {};this.action = t.action, this.container = t.container, this.emitter = t.emitter, this.target = t.target, this.text = t.text, this.trigger = t.trigger, this.selectedText = \"\";} }, { key: \"initSelection\", value: function value() {this.text ? this.selectFake() : this.target && this.selectTarget();} }, { key: \"selectFake\", value: function value() {var t = this,e = \"rtl\" == document.documentElement.getAttribute(\"dir\");this.removeFake(), this.fakeHandlerCallback = function () {return t.removeFake();}, this.fakeHandler = this.container.addEventListener(\"click\", this.fakeHandlerCallback) || !0, this.fakeElem = document.createElement(\"textarea\"), this.fakeElem.style.fontSize = \"12pt\", this.fakeElem.style.border = \"0\", this.fakeElem.style.padding = \"0\", this.fakeElem.style.margin = \"0\", this.fakeElem.style.position = \"absolute\", this.fakeElem.style[e ? \"right\" : \"left\"] = \"-9999px\";var n = window.pageYOffset || document.documentElement.scrollTop;this.fakeElem.style.top = n + \"px\", this.fakeElem.setAttribute(\"readonly\", \"\"), this.fakeElem.value = this.text, this.container.appendChild(this.fakeElem), this.selectedText = (0, c.default)(this.fakeElem), this.copyText();} }, { key: \"removeFake\", value: function value() {this.fakeHandler && (this.container.removeEventListener(\"click\", this.fakeHandlerCallback), this.fakeHandler = null, this.fakeHandlerCallback = null), this.fakeElem && (this.container.removeChild(this.fakeElem), this.fakeElem = null);} }, { key: \"selectTarget\", value: function value() {this.selectedText = (0, c.default)(this.target), this.copyText();} }, { key: \"copyText\", value: function value() {var e = void 0;try {e = document.execCommand(this.action);} catch (t) {e = !1;}this.handleResult(e);} }, { key: \"handleResult\", value: function value(t) {this.emitter.emit(t ? \"success\" : \"error\", { action: this.action, text: this.selectedText, trigger: this.trigger, clearSelection: this.clearSelection.bind(this) });} }, { key: \"clearSelection\", value: function value() {this.trigger && this.trigger.focus(), window.getSelection().removeAllRanges();} }, { key: \"destroy\", value: function value() {this.removeFake();} }, { key: \"action\", set: function set() {var t = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : \"copy\";if (this._action = t, \"copy\" !== this._action && \"cut\" !== this._action) throw new Error('Invalid \"action\" value, use either \"copy\" or \"cut\"');}, get: function get() {return this._action;} }, { key: \"target\", set: function set(t) {if (void 0 !== t) {if (!t || \"object\" !== (void 0 === t ? \"undefined\" : r(t)) || 1 !== t.nodeType) throw new Error('Invalid \"target\" value, use a valid Element');if (\"copy\" === this.action && t.hasAttribute(\"disabled\")) throw new Error('Invalid \"target\" attribute. Please use \"readonly\" instead of \"disabled\" attribute');if (\"cut\" === this.action && (t.hasAttribute(\"readonly\") || t.hasAttribute(\"disabled\"))) throw new Error('Invalid \"target\" attribute. You can\\'t cut text from elements with \"readonly\" or \"disabled\" attributes');this._target = t;}}, get: function get() {return this._target;} }]), e;}();t.exports = u;}, function (t, e) {t.exports = function (t) {var e;if (\"SELECT\" === t.nodeName) t.focus(), e = t.value;else if (\"INPUT\" === t.nodeName || \"TEXTAREA\" === t.nodeName) {var n = t.hasAttribute(\"readonly\");n || t.setAttribute(\"readonly\", \"\"), t.select(), t.setSelectionRange(0, t.value.length), n || t.removeAttribute(\"readonly\"), e = t.value;} else {t.hasAttribute(\"contenteditable\") && t.focus();var o = window.getSelection(),r = document.createRange();r.selectNodeContents(t), o.removeAllRanges(), o.addRange(r), e = o.toString();}return e;};}, function (t, e) {function n() {}n.prototype = { on: function on(t, e, n) {var o = this.e || (this.e = {});return (o[t] || (o[t] = [])).push({ fn: e, ctx: n }), this;}, once: function once(t, e, n) {var o = this;function r() {o.off(t, r), e.apply(n, arguments);}return r._ = e, this.on(t, r, n);}, emit: function emit(t) {for (var e = [].slice.call(arguments, 1), n = ((this.e || (this.e = {}))[t] || []).slice(), o = 0, r = n.length; o < r; o++) {n[o].fn.apply(n[o].ctx, e);}return this;}, off: function off(t, e) {var n = this.e || (this.e = {}),o = n[t],r = [];if (o && e) for (var i = 0, a = o.length; i < a; i++) {o[i].fn !== e && o[i].fn._ !== e && r.push(o[i]);}return r.length ? n[t] = r : delete n[t], this;} }, t.exports = n;}, function (t, e, n) {var d = n(5),h = n(6);t.exports = function (t, e, n) {if (!t && !e && !n) throw new Error(\"Missing required arguments\");if (!d.string(e)) throw new TypeError(\"Second argument must be a String\");if (!d.fn(n)) throw new TypeError(\"Third argument must be a Function\");if (d.node(t)) return s = e, f = n, (l = t).addEventListener(s, f), { destroy: function destroy() {l.removeEventListener(s, f);} };if (d.nodeList(t)) return a = t, c = e, u = n, Array.prototype.forEach.call(a, function (t) {t.addEventListener(c, u);}), { destroy: function destroy() {Array.prototype.forEach.call(a, function (t) {t.removeEventListener(c, u);});} };if (d.string(t)) return o = t, r = e, i = n, h(document.body, o, r, i);throw new TypeError(\"First argument must be a String, HTMLElement, HTMLCollection, or NodeList\");var o, r, i, a, c, u, l, s, f;};}, function (t, n) {n.node = function (t) {return void 0 !== t && t instanceof HTMLElement && 1 === t.nodeType;}, n.nodeList = function (t) {var e = Object.prototype.toString.call(t);return void 0 !== t && (\"[object NodeList]\" === e || \"[object HTMLCollection]\" === e) && \"length\" in t && (0 === t.length || n.node(t[0]));}, n.string = function (t) {return \"string\" == typeof t || t instanceof String;}, n.fn = function (t) {return \"[object Function]\" === Object.prototype.toString.call(t);};}, function (t, e, n) {var a = n(7);function i(t, e, n, o, r) {var i = function (e, n, t, o) {return function (t) {t.delegateTarget = a(t.target, n), t.delegateTarget && o.call(e, t);};}.apply(this, arguments);return t.addEventListener(n, i, r), { destroy: function destroy() {t.removeEventListener(n, i, r);} };}t.exports = function (t, e, n, o, r) {return \"function\" == typeof t.addEventListener ? i.apply(null, arguments) : \"function\" == typeof n ? i.bind(null, document).apply(null, arguments) : (\"string\" == typeof t && (t = document.querySelectorAll(t)), Array.prototype.map.call(t, function (t) {return i(t, e, n, o, r);}));};}, function (t, e) {if (\"undefined\" != typeof Element && !Element.prototype.matches) {var n = Element.prototype;n.matches = n.matchesSelector || n.mozMatchesSelector || n.msMatchesSelector || n.oMatchesSelector || n.webkitMatchesSelector;}t.exports = function (t, e) {for (; t && 9 !== t.nodeType;) {if (\"function\" == typeof t.matches && t.matches(e)) return t;t = t.parentNode;}};}]);});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///25\n");

/***/ }),

/***/ 26:
/*!********************************************************************!*\
  !*** E:/colorUI/ai_chat_front/ai_assist_front/utils/WxValidate.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;} /**\r\n表单验证\r\nr\nparam {Object} rules 验证字段的规则\r\nparam {Object} messages 验证字段的提示信息\r\nr\nvar\nWxValidate = /*#__PURE__*/function () {\n  function WxValidate() {var rules = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};var messages = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};_classCallCheck(this, WxValidate);\n    Object.assign(this, {\n      data: {},\n      rules: rules,\n      messages: messages });\n\n    this.__init();\n  }\n\n  /**\r\n     * __init\r\n     */_createClass(WxValidate, [{ key: \"__init\", value: function __init()\n    {\n      this.__initMethods();\n      this.__initDefaults();\n      this.__initData();\n    }\n\n    /**\r\n       * 初始化数据\r\n       */ }, { key: \"__initData\", value: function __initData()\n    {\n      this.form = {};\n      this.errorList = [];\n    }\n\n    /**\r\n       * 初始化默认提示信息\r\n       */ }, { key: \"__initDefaults\", value: function __initDefaults()\n    {\n      this.defaults = {\n        messages: {\n          required: '这是必填字段。',\n          email: '请输入有效的电子邮件地址。',\n          tel: '请输入11位的手机号码。',\n          url: '请输入有效的网址。',\n          date: '请输入有效的日期。',\n          dateISO: '请输入有效的日期（ISO），例如：2009-06-23，1998/01/22。',\n          number: '请输入有效的数字。',\n          digits: '只能输入数字。',\n          idcard: '请输入18位的有效身份证。',\n          equalTo: this.formatTpl('输入值必须和 {0} 相同。'),\n          contains: this.formatTpl('输入值必须包含 {0}。'),\n          minlength: this.formatTpl('最少要输入 {0} 个字符。'),\n          maxlength: this.formatTpl('最多可以输入 {0} 个字符。'),\n          rangelength: this.formatTpl('请输入长度在 {0} 到 {1} 之间的字符。'),\n          min: this.formatTpl('请输入不小于 {0} 的数值。'),\n          max: this.formatTpl('请输入不大于 {0} 的数值。'),\n          range: this.formatTpl('请输入范围在 {0} 到 {1} 之间的数值。') } };\n\n\n    }\n\n    /**\r\n       * 初始化默认验证方法\r\n       */ }, { key: \"__initMethods\", value: function __initMethods()\n    {\n      var that = this;\n      that.methods = {\n        /**\r\n                        * 验证必填元素\r\n                        */\n        required: function required(value, param) {\n          if (!that.depend(param)) {\n            return 'dependency-mismatch';\n          } else if (typeof value === 'number') {\n            value = value.toString();\n          } else if (typeof value === 'boolean') {\n            return !0;\n          }\n\n          return value.length > 0;\n        },\n        /**\r\n            * 验证电子邮箱格式\r\n            */\n        email: function email(value) {\n          return that.optional(value) ||\n          /^[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.\n          test(value);\n        },\n        /**\r\n            * 提现金额\r\n            */\n        checkcash: function checkcash(value) {\n          return that.optional(value) || value >= 100;\n        },\n        /**\r\n            * 提现金额10元\r\n            */\n        checkcashTen: function checkcashTen(value) {\n          return that.optional(value) || value >= 10;\n        },\n        /**\r\n            * 验证手机格式\r\n            */\n        tel: function tel(value) {\n          return that.optional(value) || /^1[23456789]\\d{9}$/.test(value);\n        },\n        /**\r\n            * 验证URL格式\r\n            */\n        url: function url(value) {\n          return that.optional(value) ||\n          /^(?:(?:(?:https?|ftp):)?\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})).?)(?::\\d{2,5})?(?:[/?#]\\S*)?$/i.\n          test(value);\n        },\n        /**\r\n            * 验证日期格式\r\n            */\n        date: function date(value) {\n          return that.optional(value) || !/Invalid|NaN/.test(new Date(value).toString());\n        },\n        /**\r\n            * 验证ISO类型的日期格式\r\n            */\n        dateISO: function dateISO(value) {\n          return that.optional(value) || /^\\d{4}[\\/\\-](0?[1-9]|1[012])[\\/\\-](0?[1-9]|[12][0-9]|3[01])$/.test(value);\n        },\n        /**\r\n            * 验证十进制数字\r\n            */\n        number: function number(value) {\n          return that.optional(value) || /^(?:-?\\d+|-?\\d{1,3}(?:,\\d{3})+)?(?:\\.\\d+)?$/.test(value);\n        },\n        /**\r\n            * 验证整数\r\n            */\n        digits: function digits(value) {\n          return that.optional(value) || /^\\d+$/.test(value);\n        },\n        /**\r\n            * 验证身份证号码\r\n            */\n        idcard: function idcard(value) {\n          return that.optional(value) || /^[1-9]\\d{5}[1-9]\\d{3}((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])\\d{3}([0-9]|X)$/.test(\n          value);\n        },\n        /**\r\n            * 验证两个输入框的内容是否相同\r\n            */\n        equalTo: function equalTo(value, param) {\n          return that.optional(value) || value === that.data[param];\n        },\n        /**\r\n            * 验证是否包含某个值\r\n            */\n        contains: function contains(value, param) {\n          return that.optional(value) || value.indexOf(param) >= 0;\n        },\n        /**\r\n            * 验证最小长度\r\n            */\n        minlength: function minlength(value, param) {\n          return that.optional(value) || value.length >= param;\n        },\n        /**\r\n            * 验证最大长度\r\n            */\n        maxlength: function maxlength(value, param) {\n          return that.optional(value) || value.length <= param;\n        },\n        /**\r\n            * 验证一个长度范围[min, max]\r\n            */\n        rangelength: function rangelength(value, param) {\n          return that.optional(value) || value.length >= param[0] && value.length <= param[1];\n        },\n        /**\r\n            * 验证最小值\r\n            */\n        min: function min(value, param) {\n          return that.optional(value) || value >= param;\n        },\n        /**\r\n            * 验证最大值\r\n            */\n        max: function max(value, param) {\n          return that.optional(value) || value <= param;\n        },\n        /**\r\n            * 验证一个值范围[min, max]\r\n            */\n        range: function range(value, param) {\n          return that.optional(value) || value >= param[0] && value <= param[1];\n        } };\n\n    }\n\n    /**\r\n       * 添加自定义验证方法\r\n       * @param {String} name 方法名\r\n       * @param {Function} method 函数体，接收两个参数(value, param)，value表示元素的值，param表示参数\r\n       * @param {String} message 提示信息\r\n       */ }, { key: \"addMethod\", value: function addMethod(\n    name, method, message) {\n      this.methods[name] = method;\n      this.defaults.messages[name] = message !== undefined ? message : this.defaults.messages[name];\n    }\n\n    /**\r\n       * 判断验证方法是否存在\r\n       */ }, { key: \"isValidMethod\", value: function isValidMethod(\n    value) {\n      var methods = [];\n      for (var method in this.methods) {\n        if (method && typeof this.methods[method] === 'function') {\n          methods.push(method);\n        }\n      }\n      return methods.indexOf(value) !== -1;\n    }\n\n    /**\r\n       * 格式化提示信息模板\r\n       */ }, { key: \"formatTpl\", value: function formatTpl(\n    source, params) {\n      var that = this;\n      if (arguments.length === 1) {\n        return function () {\n          var args = Array.from(arguments);\n          args.unshift(source);\n          return that.formatTpl.apply(this, args);\n        };\n      }\n      if (params === undefined) {\n        return source;\n      }\n      if (arguments.length > 2 && params.constructor !== Array) {\n        params = Array.from(arguments).slice(1);\n      }\n      if (params.constructor !== Array) {\n        params = [params];\n      }\n      params.forEach(function (n, i) {\n        source = source.replace(new RegExp(\"\\\\{\" + i + \"\\\\}\", \"g\"), function () {\n          return n;\n        });\n      });\n      return source;\n    }\n\n    /**\r\n       * 判断规则依赖是否存在\r\n       */ }, { key: \"depend\", value: function depend(\n    param) {\n      switch (typeof param) {\n        case 'boolean':\n          param = param;\n          break;\n        case 'string':\n          param = !!param.length;\n          break;\n        case 'function':\n          param = param();\n        default:\n          param = !0;}\n\n      return param;\n    }\n\n    /**\r\n       * 判断输入值是否为空\r\n       */ }, { key: \"optional\", value: function optional(\n    value) {\n      return !this.methods.required(value) && 'dependency-mismatch';\n    }\n\n    /**\r\n       * 获取自定义字段的提示信息\r\n       * @param {String} param 字段名\r\n       * @param {Object} rule 规则\r\n       */ }, { key: \"customMessage\", value: function customMessage(\n    param, rule) {\n      var params = this.messages[param];\n      var isObject = typeof params === 'object';\n      if (params && isObject) return params[rule.method];\n    }\n\n    /**\r\n       * 获取某个指定字段的提示信息\r\n       * @param {String} param 字段名\r\n       * @param {Object} rule 规则\r\n       */ }, { key: \"defaultMessage\", value: function defaultMessage(\n    param, rule) {\n      var message = this.customMessage(param, rule) || this.defaults.messages[rule.method];\n      var type = typeof message;\n\n      if (type === 'undefined') {\n        message = \"Warning: No message defined for \".concat(rule.method, \".\");\n      } else if (type === 'function') {\n        message = message.call(this, rule.parameters);\n      }\n\n      return message;\n    }\n\n    /**\r\n       * 缓存错误信息\r\n       * @param {String} param 字段名\r\n       * @param {Object} rule 规则\r\n       * @param {String} value 元素的值\r\n       */ }, { key: \"formatTplAndAdd\", value: function formatTplAndAdd(\n    param, rule, value) {\n      var msg = this.defaultMessage(param, rule);\n\n      this.errorList.push({\n        param: param,\n        msg: msg,\n        value: value });\n\n    }\n\n    /**\r\n       * 验证某个指定字段的规则\r\n       * @param {String} param 字段名\r\n       * @param {Object} rules 规则\r\n       * @param {Object} data 需要验证的数据对象\r\n       */ }, { key: \"checkParam\", value: function checkParam(\n    param, rules, data) {\n\n      // 缓存数据对象\n      this.data = data;\n\n      // 缓存字段对应的值\n      var value = data[param] !== null && data[param] !== undefined ? data[param] : '';\n\n      // 遍历某个指定字段的所有规则，依次验证规则，否则缓存错误信息\n      for (var method in rules) {\n\n        // 判断验证方法是否存在\n        if (this.isValidMethod(method)) {\n\n          // 缓存规则的属性及值\n          var rule = {\n            method: method,\n            parameters: rules[method]\n\n\n            // 调用验证方法\n          };var result = this.methods[method](value, rule.parameters);\n\n          // 若result返回值为dependency-mismatch，则说明该字段的值为空或非必填字段\n          if (result === 'dependency-mismatch') {\n            continue;\n          }\n\n          this.setValue(param, method, result, value);\n\n          // 判断是否通过验证，否则缓存错误信息，跳出循环\n          if (!result) {\n            this.formatTplAndAdd(param, rule, value);\n            break;\n          }\n        }\n      }\n    }\n\n    /**\r\n       * 设置字段的默认验证值\r\n       * @param {String} param 字段名\r\n       */ }, { key: \"setView\", value: function setView(\n    param) {\n      this.form[param] = {\n        $name: param,\n        $valid: true,\n        $invalid: false,\n        $error: {},\n        $success: {},\n        $viewValue: \"\" };\n\n    }\n\n    /**\r\n       * 设置字段的验证值\r\n       * @param {String} param 字段名\r\n       * @param {String} method 字段的方法\r\n       * @param {Boolean} result 是否通过验证\r\n       * @param {String} value 字段的值\r\n       */ }, { key: \"setValue\", value: function setValue(\n    param, method, result, value) {\n      var params = this.form[param];\n      params.$valid = result;\n      params.$invalid = !result;\n      params.$error[method] = !result;\n      params.$success[method] = result;\n      params.$viewValue = value;\n    }\n\n    /**\r\n       * 验证所有字段的规则，返回验证是否通过\r\n       * @param {Object} data 需要验证数据对象\r\n       */ }, { key: \"checkForm\", value: function checkForm(\n    data) {\n      this.__initData();\n\n      for (var param in this.rules) {\n        this.setView(param);\n        this.checkParam(param, this.rules[param], data);\n      }\n\n      return this.valid();\n    }\n\n    /**\r\n       * 返回验证是否通过\r\n       */ }, { key: \"valid\", value: function valid()\n    {\n      return this.size() === 0;\n    }\n\n    /**\r\n       * 返回错误信息的个数\r\n       */ }, { key: \"size\", value: function size()\n    {\n      return this.errorList.length;\n    }\n\n    /**\r\n       * 返回所有错误信息\r\n       */ }, { key: \"validationErrors\", value: function validationErrors()\n    {\n      return this.errorList;\n    } }]);return WxValidate;}();var _default =\n\n\nWxValidate;exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///26\n");

/***/ }),

/***/ 27:
/*!*****************************************************************!*\
  !*** E:/colorUI/ai_chat_front/ai_assist_front/utils/request.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(uni, __f__) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _commonURL = _interopRequireDefault(__webpack_require__(/*! utils/commonURL.js */ 23));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nfunction jyRequest(url, parm, method, successCallback, errorCallback) {\n  var token;\n  try {\n    token = uni.getStorageSync('myToken');\n  } catch (e) {\n    __f__(\"log\", '获取错误', e, \" at utils\\\\request.js:8\");\n    //TODO handle the exception\n  }\n  uni.request({\n    url: url,\n    dataType: 'text',\n    method: method,\n    data: parm,\n    header: {\n      // 'content-type': 'application/json', \n      'content-type': 'application/x-www-form-urlencoded',\n      \"AI-Chat-Token\": token },\n\n    success: function success(res) {\n      if (res.statusCode == 200) {\n        var data = JSON.parse(res.data);\n        if (data.code == 0 || data.code == 4001001 || data.code < 0 || data.code == 400) {\n          if (data.msg !== null) {\n            uni.showToast({\n              title: data.msg,\n              icon: 'none',\n              duration: 1000 });\n\n          }\n        }\n        successCallback(res);\n      } else {\n        uni.showToast({\n          title: '网络连接异常',\n          icon: 'none',\n          duration: 2000 });\n\n        errorCallback(null);\n      }\n\n    },\n    fail: function fail(error) {\n      __f__(\"log\", error, \" at utils\\\\request.js:45\");\n      errorCallback(error);\n    } });\n\n}\n\nfunction jyRequestSimple(url, parm, method, successCallback, errorCallback) {\n  var token;\n  try {\n    token = uni.getStorageSync('myToken');\n  } catch (e) {\n    __f__(\"log\", '获取错误', e, \" at utils\\\\request.js:56\");\n    //TODO handle the exception\n  }\n  uni.request({\n    url: url,\n    dataType: 'text',\n    method: method,\n    data: parm,\n    header: {\n      'content-type': 'application/json',\n      \"AI-Chat-Token\": token },\n\n    success: function success(res) {\n      if (res.statusCode == 200) {\n        var data = JSON.parse(res.data);\n        if (data.code == 0 || data.code == 4001001 || data.code < 0 || data.code == 400) {\n          if (data.msg !== null) {\n            uni.showToast({\n              title: data.msg,\n              icon: 'none',\n              duration: 1000 });\n\n          }\n        }\n        successCallback(res);\n      } else {\n        uni.showToast({\n          title: '网络连接异常',\n          icon: 'none',\n          duration: 2000 });\n\n        errorCallback(null);\n      }\n    },\n    fail: function fail(error) {\n      errorCallback(error);\n    } });\n\n}var _default =\n\n{\n  url_request: function url_request(url, param, way, successCallback, errorCallback) {\n    return jyRequest(url, param, way, successCallback, errorCallback);\n  },\n  url_requestSimple: function url_requestSimple(url, param, way, successCallback, errorCallback) {\n    return jyRequestSimple(url, param, way, successCallback, errorCallback);\n  } };exports.default = _default;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"], __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 12)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///27\n");

/***/ }),

/***/ 28:
/*!****************************************************************************************!*\
  !*** E:/colorUI/ai_chat_front/ai_assist_front/node_modules/jsencrypt/bin/jsencrypt.js ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__) {(function (global, factory) {\n   true ? factory(exports) :\n  undefined;\n})(void 0, function (exports) {'use strict';\n\n  var BI_RM = \"0123456789abcdefghijklmnopqrstuvwxyz\";\n  function int2char(n) {\n    return BI_RM.charAt(n);\n  }\n  //#region BIT_OPERATIONS\n  // (public) this & a\n  function op_and(x, y) {\n    return x & y;\n  }\n  // (public) this | a\n  function op_or(x, y) {\n    return x | y;\n  }\n  // (public) this ^ a\n  function op_xor(x, y) {\n    return x ^ y;\n  }\n  // (public) this & ~a\n  function op_andnot(x, y) {\n    return x & ~y;\n  }\n  // return index of lowest 1-bit in x, x < 2^31\n  function lbit(x) {\n    if (x == 0) {\n      return -1;\n    }\n    var r = 0;\n    if ((x & 0xffff) == 0) {\n      x >>= 16;\n      r += 16;\n    }\n    if ((x & 0xff) == 0) {\n      x >>= 8;\n      r += 8;\n    }\n    if ((x & 0xf) == 0) {\n      x >>= 4;\n      r += 4;\n    }\n    if ((x & 3) == 0) {\n      x >>= 2;\n      r += 2;\n    }\n    if ((x & 1) == 0) {\n      ++r;\n    }\n    return r;\n  }\n  // return number of 1 bits in x\n  function cbit(x) {\n    var r = 0;\n    while (x != 0) {\n      x &= x - 1;\n      ++r;\n    }\n    return r;\n  }\n  //#endregion BIT_OPERATIONS\n\n  var b64map = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n  var b64pad = \"=\";\n  function hex2b64(h) {\n    var i;\n    var c;\n    var ret = \"\";\n    for (i = 0; i + 3 <= h.length; i += 3) {\n      c = parseInt(h.substring(i, i + 3), 16);\n      ret += b64map.charAt(c >> 6) + b64map.charAt(c & 63);\n    }\n    if (i + 1 == h.length) {\n      c = parseInt(h.substring(i, i + 1), 16);\n      ret += b64map.charAt(c << 2);\n    } else\n    if (i + 2 == h.length) {\n      c = parseInt(h.substring(i, i + 2), 16);\n      ret += b64map.charAt(c >> 2) + b64map.charAt((c & 3) << 4);\n    }\n    while ((ret.length & 3) > 0) {\n      ret += b64pad;\n    }\n    return ret;\n  }\n  // convert a base64 string to hex\n  function b64tohex(s) {\n    var ret = \"\";\n    var i;\n    var k = 0; // b64 state, 0-3\n    var slop = 0;\n    for (i = 0; i < s.length; ++i) {\n      if (s.charAt(i) == b64pad) {\n        break;\n      }\n      var v = b64map.indexOf(s.charAt(i));\n      if (v < 0) {\n        continue;\n      }\n      if (k == 0) {\n        ret += int2char(v >> 2);\n        slop = v & 3;\n        k = 1;\n      } else\n      if (k == 1) {\n        ret += int2char(slop << 2 | v >> 4);\n        slop = v & 0xf;\n        k = 2;\n      } else\n      if (k == 2) {\n        ret += int2char(slop);\n        ret += int2char(v >> 2);\n        slop = v & 3;\n        k = 3;\n      } else\n      {\n        ret += int2char(slop << 2 | v >> 4);\n        ret += int2char(v & 0xf);\n        k = 0;\n      }\n    }\n    if (k == 1) {\n      ret += int2char(slop << 2);\n    }\n    return ret;\n  }\n\n  /*! *****************************************************************************\r\n    Copyright (c) Microsoft Corporation. All rights reserved.\r\n    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\n    this file except in compliance with the License. You may obtain a copy of the\r\n    License at http://www.apache.org/licenses/LICENSE-2.0\r\n    \r\n    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\n    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\n    MERCHANTABLITY OR NON-INFRINGEMENT.\r\n    \r\n    See the Apache Version 2.0 License for specific language governing permissions\r\n    and limitations under the License.\r\n    ***************************************************************************** */\n  /* global Reflect, Promise */\n\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf ||\n    { __proto__: [] } instanceof Array && function (d, b) {d.__proto__ = b;} ||\n    function (d, b) {for (var p in b) {if (b.hasOwnProperty(p)) d[p] = b[p];}};\n    return _extendStatics(d, b);\n  };\n\n  function __extends(d, b) {\n    _extendStatics(d, b);\n    function __() {this.constructor = d;}\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  }\n\n  // Hex JavaScript decoder\n  // Copyright (c) 2008-2013 Lapo Luchini <lapo@lapo.it>\n  // Permission to use, copy, modify, and/or distribute this software for any\n  // purpose with or without fee is hereby granted, provided that the above\n  // copyright notice and this permission notice appear in all copies.\n  //\n  // THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n  // WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n  // MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n  // ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n  // WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n  // ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n  // OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n  /*jshint browser: true, strict: true, immed: true, latedef: true, undef: true, regexdash: false */\n  var decoder;\n  var Hex = {\n    decode: function decode(a) {\n      var i;\n      if (decoder === undefined) {\n        var hex = \"0123456789ABCDEF\";\n        var ignore = \" \\f\\n\\r\\t\\xA0\\u2028\\u2029\";\n        decoder = {};\n        for (i = 0; i < 16; ++i) {\n          decoder[hex.charAt(i)] = i;\n        }\n        hex = hex.toLowerCase();\n        for (i = 10; i < 16; ++i) {\n          decoder[hex.charAt(i)] = i;\n        }\n        for (i = 0; i < ignore.length; ++i) {\n          decoder[ignore.charAt(i)] = -1;\n        }\n      }\n      var out = [];\n      var bits = 0;\n      var char_count = 0;\n      for (i = 0; i < a.length; ++i) {\n        var c = a.charAt(i);\n        if (c == \"=\") {\n          break;\n        }\n        c = decoder[c];\n        if (c == -1) {\n          continue;\n        }\n        if (c === undefined) {\n          throw new Error(\"Illegal character at offset \" + i);\n        }\n        bits |= c;\n        if (++char_count >= 2) {\n          out[out.length] = bits;\n          bits = 0;\n          char_count = 0;\n        } else\n        {\n          bits <<= 4;\n        }\n      }\n      if (char_count) {\n        throw new Error(\"Hex encoding incomplete: 4 bits missing\");\n      }\n      return out;\n    } };\n\n\n  // Base64 JavaScript decoder\n  // Copyright (c) 2008-2013 Lapo Luchini <lapo@lapo.it>\n  // Permission to use, copy, modify, and/or distribute this software for any\n  // purpose with or without fee is hereby granted, provided that the above\n  // copyright notice and this permission notice appear in all copies.\n  //\n  // THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n  // WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n  // MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n  // ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n  // WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n  // ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n  // OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n  /*jshint browser: true, strict: true, immed: true, latedef: true, undef: true, regexdash: false */\n  var decoder$1;\n  var Base64 = {\n    decode: function decode(a) {\n      var i;\n      if (decoder$1 === undefined) {\n        var b64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n        var ignore = \"= \\f\\n\\r\\t\\xA0\\u2028\\u2029\";\n        decoder$1 = Object.create(null);\n        for (i = 0; i < 64; ++i) {\n          decoder$1[b64.charAt(i)] = i;\n        }\n        for (i = 0; i < ignore.length; ++i) {\n          decoder$1[ignore.charAt(i)] = -1;\n        }\n      }\n      var out = [];\n      var bits = 0;\n      var char_count = 0;\n      for (i = 0; i < a.length; ++i) {\n        var c = a.charAt(i);\n        if (c == \"=\") {\n          break;\n        }\n        c = decoder$1[c];\n        if (c == -1) {\n          continue;\n        }\n        if (c === undefined) {\n          throw new Error(\"Illegal character at offset \" + i);\n        }\n        bits |= c;\n        if (++char_count >= 4) {\n          out[out.length] = bits >> 16;\n          out[out.length] = bits >> 8 & 0xFF;\n          out[out.length] = bits & 0xFF;\n          bits = 0;\n          char_count = 0;\n        } else\n        {\n          bits <<= 6;\n        }\n      }\n      switch (char_count) {\n        case 1:\n          throw new Error(\"Base64 encoding incomplete: at least 2 bits missing\");\n        case 2:\n          out[out.length] = bits >> 10;\n          break;\n        case 3:\n          out[out.length] = bits >> 16;\n          out[out.length] = bits >> 8 & 0xFF;\n          break;}\n\n      return out;\n    },\n    re: /-----BEGIN [^-]+-----([A-Za-z0-9+\\/=\\s]+)-----END [^-]+-----|begin-base64[^\\n]+\\n([A-Za-z0-9+\\/=\\s]+)====/,\n    unarmor: function unarmor(a) {\n      var m = Base64.re.exec(a);\n      if (m) {\n        if (m[1]) {\n          a = m[1];\n        } else\n        if (m[2]) {\n          a = m[2];\n        } else\n        {\n          throw new Error(\"RegExp out of sync\");\n        }\n      }\n      return Base64.decode(a);\n    } };\n\n\n  // Big integer base-10 printing library\n  // Copyright (c) 2014 Lapo Luchini <lapo@lapo.it>\n  // Permission to use, copy, modify, and/or distribute this software for any\n  // purpose with or without fee is hereby granted, provided that the above\n  // copyright notice and this permission notice appear in all copies.\n  //\n  // THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n  // WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n  // MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n  // ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n  // WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n  // ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n  // OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n  /*jshint browser: true, strict: true, immed: true, latedef: true, undef: true, regexdash: false */\n  var max = 10000000000000; // biggest integer that can still fit 2^53 when multiplied by 256\n  var Int10 = /** @class */function () {\n    function Int10(value) {\n      this.buf = [+value || 0];\n    }\n    Int10.prototype.mulAdd = function (m, c) {\n      // assert(m <= 256)\n      var b = this.buf;\n      var l = b.length;\n      var i;\n      var t;\n      for (i = 0; i < l; ++i) {\n        t = b[i] * m + c;\n        if (t < max) {\n          c = 0;\n        } else\n        {\n          c = 0 | t / max;\n          t -= c * max;\n        }\n        b[i] = t;\n      }\n      if (c > 0) {\n        b[i] = c;\n      }\n    };\n    Int10.prototype.sub = function (c) {\n      // assert(m <= 256)\n      var b = this.buf;\n      var l = b.length;\n      var i;\n      var t;\n      for (i = 0; i < l; ++i) {\n        t = b[i] - c;\n        if (t < 0) {\n          t += max;\n          c = 1;\n        } else\n        {\n          c = 0;\n        }\n        b[i] = t;\n      }\n      while (b[b.length - 1] === 0) {\n        b.pop();\n      }\n    };\n    Int10.prototype.toString = function (base) {\n      if ((base || 10) != 10) {\n        throw new Error(\"only base 10 is supported\");\n      }\n      var b = this.buf;\n      var s = b[b.length - 1].toString();\n      for (var i = b.length - 2; i >= 0; --i) {\n        s += (max + b[i]).toString().substring(1);\n      }\n      return s;\n    };\n    Int10.prototype.valueOf = function () {\n      var b = this.buf;\n      var v = 0;\n      for (var i = b.length - 1; i >= 0; --i) {\n        v = v * max + b[i];\n      }\n      return v;\n    };\n    Int10.prototype.simplify = function () {\n      var b = this.buf;\n      return b.length == 1 ? b[0] : this;\n    };\n    return Int10;\n  }();\n\n  // ASN.1 JavaScript decoder\n  var ellipsis = \"\\u2026\";\n  var reTimeS = /^(\\d\\d)(0[1-9]|1[0-2])(0[1-9]|[12]\\d|3[01])([01]\\d|2[0-3])(?:([0-5]\\d)(?:([0-5]\\d)(?:[.,](\\d{1,3}))?)?)?(Z|[-+](?:[0]\\d|1[0-2])([0-5]\\d)?)?$/;\n  var reTimeL = /^(\\d\\d\\d\\d)(0[1-9]|1[0-2])(0[1-9]|[12]\\d|3[01])([01]\\d|2[0-3])(?:([0-5]\\d)(?:([0-5]\\d)(?:[.,](\\d{1,3}))?)?)?(Z|[-+](?:[0]\\d|1[0-2])([0-5]\\d)?)?$/;\n  function stringCut(str, len) {\n    if (str.length > len) {\n      str = str.substring(0, len) + ellipsis;\n    }\n    return str;\n  }\n  var Stream = /** @class */function () {\n    function Stream(enc, pos) {\n      this.hexDigits = \"0123456789ABCDEF\";\n      if (enc instanceof Stream) {\n        this.enc = enc.enc;\n        this.pos = enc.pos;\n      } else\n      {\n        // enc should be an array or a binary string\n        this.enc = enc;\n        this.pos = pos;\n      }\n    }\n    Stream.prototype.get = function (pos) {\n      if (pos === undefined) {\n        pos = this.pos++;\n      }\n      if (pos >= this.enc.length) {\n        throw new Error(\"Requesting byte offset \" + pos + \" on a stream of length \" + this.enc.length);\n      }\n      return \"string\" === typeof this.enc ? this.enc.charCodeAt(pos) : this.enc[pos];\n    };\n    Stream.prototype.hexByte = function (b) {\n      return this.hexDigits.charAt(b >> 4 & 0xF) + this.hexDigits.charAt(b & 0xF);\n    };\n    Stream.prototype.hexDump = function (start, end, raw) {\n      var s = \"\";\n      for (var i = start; i < end; ++i) {\n        s += this.hexByte(this.get(i));\n        if (raw !== true) {\n          switch (i & 0xF) {\n            case 0x7:\n              s += \"  \";\n              break;\n            case 0xF:\n              s += \"\\n\";\n              break;\n            default:\n              s += \" \";}\n\n        }\n      }\n      return s;\n    };\n    Stream.prototype.isASCII = function (start, end) {\n      for (var i = start; i < end; ++i) {\n        var c = this.get(i);\n        if (c < 32 || c > 176) {\n          return false;\n        }\n      }\n      return true;\n    };\n    Stream.prototype.parseStringISO = function (start, end) {\n      var s = \"\";\n      for (var i = start; i < end; ++i) {\n        s += String.fromCharCode(this.get(i));\n      }\n      return s;\n    };\n    Stream.prototype.parseStringUTF = function (start, end) {\n      var s = \"\";\n      for (var i = start; i < end;) {\n        var c = this.get(i++);\n        if (c < 128) {\n          s += String.fromCharCode(c);\n        } else\n        if (c > 191 && c < 224) {\n          s += String.fromCharCode((c & 0x1F) << 6 | this.get(i++) & 0x3F);\n        } else\n        {\n          s += String.fromCharCode((c & 0x0F) << 12 | (this.get(i++) & 0x3F) << 6 | this.get(i++) & 0x3F);\n        }\n      }\n      return s;\n    };\n    Stream.prototype.parseStringBMP = function (start, end) {\n      var str = \"\";\n      var hi;\n      var lo;\n      for (var i = start; i < end;) {\n        hi = this.get(i++);\n        lo = this.get(i++);\n        str += String.fromCharCode(hi << 8 | lo);\n      }\n      return str;\n    };\n    Stream.prototype.parseTime = function (start, end, shortYear) {\n      var s = this.parseStringISO(start, end);\n      var m = (shortYear ? reTimeS : reTimeL).exec(s);\n      if (!m) {\n        return \"Unrecognized time: \" + s;\n      }\n      if (shortYear) {\n        // to avoid querying the timer, use the fixed range [1970, 2069]\n        // it will conform with ITU X.400 [-10, +40] sliding window until 2030\n        m[1] = +m[1];\n        m[1] += +m[1] < 70 ? 2000 : 1900;\n      }\n      s = m[1] + \"-\" + m[2] + \"-\" + m[3] + \" \" + m[4];\n      if (m[5]) {\n        s += \":\" + m[5];\n        if (m[6]) {\n          s += \":\" + m[6];\n          if (m[7]) {\n            s += \".\" + m[7];\n          }\n        }\n      }\n      if (m[8]) {\n        s += \" UTC\";\n        if (m[8] != \"Z\") {\n          s += m[8];\n          if (m[9]) {\n            s += \":\" + m[9];\n          }\n        }\n      }\n      return s;\n    };\n    Stream.prototype.parseInteger = function (start, end) {\n      var v = this.get(start);\n      var neg = v > 127;\n      var pad = neg ? 255 : 0;\n      var len;\n      var s = \"\";\n      // skip unuseful bits (not allowed in DER)\n      while (v == pad && ++start < end) {\n        v = this.get(start);\n      }\n      len = end - start;\n      if (len === 0) {\n        return neg ? -1 : 0;\n      }\n      // show bit length of huge integers\n      if (len > 4) {\n        s = v;\n        len <<= 3;\n        while (((+s ^ pad) & 0x80) == 0) {\n          s = +s << 1;\n          --len;\n        }\n        s = \"(\" + len + \" bit)\\n\";\n      }\n      // decode the integer\n      if (neg) {\n        v = v - 256;\n      }\n      var n = new Int10(v);\n      for (var i = start + 1; i < end; ++i) {\n        n.mulAdd(256, this.get(i));\n      }\n      return s + n.toString();\n    };\n    Stream.prototype.parseBitString = function (start, end, maxLength) {\n      var unusedBit = this.get(start);\n      var lenBit = (end - start - 1 << 3) - unusedBit;\n      var intro = \"(\" + lenBit + \" bit)\\n\";\n      var s = \"\";\n      for (var i = start + 1; i < end; ++i) {\n        var b = this.get(i);\n        var skip = i == end - 1 ? unusedBit : 0;\n        for (var j = 7; j >= skip; --j) {\n          s += b >> j & 1 ? \"1\" : \"0\";\n        }\n        if (s.length > maxLength) {\n          return intro + stringCut(s, maxLength);\n        }\n      }\n      return intro + s;\n    };\n    Stream.prototype.parseOctetString = function (start, end, maxLength) {\n      if (this.isASCII(start, end)) {\n        return stringCut(this.parseStringISO(start, end), maxLength);\n      }\n      var len = end - start;\n      var s = \"(\" + len + \" byte)\\n\";\n      maxLength /= 2; // we work in bytes\n      if (len > maxLength) {\n        end = start + maxLength;\n      }\n      for (var i = start; i < end; ++i) {\n        s += this.hexByte(this.get(i));\n      }\n      if (len > maxLength) {\n        s += ellipsis;\n      }\n      return s;\n    };\n    Stream.prototype.parseOID = function (start, end, maxLength) {\n      var s = \"\";\n      var n = new Int10();\n      var bits = 0;\n      for (var i = start; i < end; ++i) {\n        var v = this.get(i);\n        n.mulAdd(128, v & 0x7F);\n        bits += 7;\n        if (!(v & 0x80)) {// finished\n          if (s === \"\") {\n            n = n.simplify();\n            if (n instanceof Int10) {\n              n.sub(80);\n              s = \"2.\" + n.toString();\n            } else\n            {\n              var m = n < 80 ? n < 40 ? 0 : 1 : 2;\n              s = m + \".\" + (n - m * 40);\n            }\n          } else\n          {\n            s += \".\" + n.toString();\n          }\n          if (s.length > maxLength) {\n            return stringCut(s, maxLength);\n          }\n          n = new Int10();\n          bits = 0;\n        }\n      }\n      if (bits > 0) {\n        s += \".incomplete\";\n      }\n      return s;\n    };\n    return Stream;\n  }();\n  var ASN1 = /** @class */function () {\n    function ASN1(stream, header, length, tag, sub) {\n      if (!(tag instanceof ASN1Tag)) {\n        throw new Error(\"Invalid tag value.\");\n      }\n      this.stream = stream;\n      this.header = header;\n      this.length = length;\n      this.tag = tag;\n      this.sub = sub;\n    }\n    ASN1.prototype.typeName = function () {\n      switch (this.tag.tagClass) {\n        case 0: // universal\n          switch (this.tag.tagNumber) {\n            case 0x00:\n              return \"EOC\";\n            case 0x01:\n              return \"BOOLEAN\";\n            case 0x02:\n              return \"INTEGER\";\n            case 0x03:\n              return \"BIT_STRING\";\n            case 0x04:\n              return \"OCTET_STRING\";\n            case 0x05:\n              return \"NULL\";\n            case 0x06:\n              return \"OBJECT_IDENTIFIER\";\n            case 0x07:\n              return \"ObjectDescriptor\";\n            case 0x08:\n              return \"EXTERNAL\";\n            case 0x09:\n              return \"REAL\";\n            case 0x0A:\n              return \"ENUMERATED\";\n            case 0x0B:\n              return \"EMBEDDED_PDV\";\n            case 0x0C:\n              return \"UTF8String\";\n            case 0x10:\n              return \"SEQUENCE\";\n            case 0x11:\n              return \"SET\";\n            case 0x12:\n              return \"NumericString\";\n            case 0x13:\n              return \"PrintableString\"; // ASCII subset\n            case 0x14:\n              return \"TeletexString\"; // aka T61String\n            case 0x15:\n              return \"VideotexString\";\n            case 0x16:\n              return \"IA5String\"; // ASCII\n            case 0x17:\n              return \"UTCTime\";\n            case 0x18:\n              return \"GeneralizedTime\";\n            case 0x19:\n              return \"GraphicString\";\n            case 0x1A:\n              return \"VisibleString\"; // ASCII subset\n            case 0x1B:\n              return \"GeneralString\";\n            case 0x1C:\n              return \"UniversalString\";\n            case 0x1E:\n              return \"BMPString\";}\n\n          return \"Universal_\" + this.tag.tagNumber.toString();\n        case 1:\n          return \"Application_\" + this.tag.tagNumber.toString();\n        case 2:\n          return \"[\" + this.tag.tagNumber.toString() + \"]\"; // Context\n        case 3:\n          return \"Private_\" + this.tag.tagNumber.toString();}\n\n    };\n    ASN1.prototype.content = function (maxLength) {\n      if (this.tag === undefined) {\n        return null;\n      }\n      if (maxLength === undefined) {\n        maxLength = Infinity;\n      }\n      var content = this.posContent();\n      var len = Math.abs(this.length);\n      if (!this.tag.isUniversal()) {\n        if (this.sub !== null) {\n          return \"(\" + this.sub.length + \" elem)\";\n        }\n        return this.stream.parseOctetString(content, content + len, maxLength);\n      }\n      switch (this.tag.tagNumber) {\n        case 0x01: // BOOLEAN\n          return this.stream.get(content) === 0 ? \"false\" : \"true\";\n        case 0x02: // INTEGER\n          return this.stream.parseInteger(content, content + len);\n        case 0x03: // BIT_STRING\n          return this.sub ? \"(\" + this.sub.length + \" elem)\" :\n          this.stream.parseBitString(content, content + len, maxLength);\n        case 0x04: // OCTET_STRING\n          return this.sub ? \"(\" + this.sub.length + \" elem)\" :\n          this.stream.parseOctetString(content, content + len, maxLength);\n        // case 0x05: // NULL\n        case 0x06: // OBJECT_IDENTIFIER\n          return this.stream.parseOID(content, content + len, maxLength);\n        // case 0x07: // ObjectDescriptor\n        // case 0x08: // EXTERNAL\n        // case 0x09: // REAL\n        // case 0x0A: // ENUMERATED\n        // case 0x0B: // EMBEDDED_PDV\n        case 0x10: // SEQUENCE\n        case 0x11: // SET\n          if (this.sub !== null) {\n            return \"(\" + this.sub.length + \" elem)\";\n          } else\n          {\n            return \"(no elem)\";\n          }\n        case 0x0C: // UTF8String\n          return stringCut(this.stream.parseStringUTF(content, content + len), maxLength);\n        case 0x12: // NumericString\n        case 0x13: // PrintableString\n        case 0x14: // TeletexString\n        case 0x15: // VideotexString\n        case 0x16: // IA5String\n        // case 0x19: // GraphicString\n        case 0x1A: // VisibleString\n          // case 0x1B: // GeneralString\n          // case 0x1C: // UniversalString\n          return stringCut(this.stream.parseStringISO(content, content + len), maxLength);\n        case 0x1E: // BMPString\n          return stringCut(this.stream.parseStringBMP(content, content + len), maxLength);\n        case 0x17: // UTCTime\n        case 0x18: // GeneralizedTime\n          return this.stream.parseTime(content, content + len, this.tag.tagNumber == 0x17);}\n\n      return null;\n    };\n    ASN1.prototype.toString = function () {\n      return this.typeName() + \"@\" + this.stream.pos + \"[header:\" + this.header + \",length:\" + this.length + \",sub:\" + (this.sub === null ? \"null\" : this.sub.length) + \"]\";\n    };\n    ASN1.prototype.toPrettyString = function (indent) {\n      if (indent === undefined) {\n        indent = \"\";\n      }\n      var s = indent + this.typeName() + \" @\" + this.stream.pos;\n      if (this.length >= 0) {\n        s += \"+\";\n      }\n      s += this.length;\n      if (this.tag.tagConstructed) {\n        s += \" (constructed)\";\n      } else\n      if (this.tag.isUniversal() && (this.tag.tagNumber == 0x03 || this.tag.tagNumber == 0x04) && this.sub !== null) {\n        s += \" (encapsulates)\";\n      }\n      s += \"\\n\";\n      if (this.sub !== null) {\n        indent += \"  \";\n        for (var i = 0, max = this.sub.length; i < max; ++i) {\n          s += this.sub[i].toPrettyString(indent);\n        }\n      }\n      return s;\n    };\n    ASN1.prototype.posStart = function () {\n      return this.stream.pos;\n    };\n    ASN1.prototype.posContent = function () {\n      return this.stream.pos + this.header;\n    };\n    ASN1.prototype.posEnd = function () {\n      return this.stream.pos + this.header + Math.abs(this.length);\n    };\n    ASN1.prototype.toHexString = function () {\n      return this.stream.hexDump(this.posStart(), this.posEnd(), true);\n    };\n    ASN1.decodeLength = function (stream) {\n      var buf = stream.get();\n      var len = buf & 0x7F;\n      if (len == buf) {\n        return len;\n      }\n      // no reason to use Int10, as it would be a huge buffer anyways\n      if (len > 6) {\n        throw new Error(\"Length over 48 bits not supported at position \" + (stream.pos - 1));\n      }\n      if (len === 0) {\n        return null;\n      } // undefined\n      buf = 0;\n      for (var i = 0; i < len; ++i) {\n        buf = buf * 256 + stream.get();\n      }\n      return buf;\n    };\n    /**\r\n        * Retrieve the hexadecimal value (as a string) of the current ASN.1 element\r\n        * @returns {string}\r\n        * @public\r\n        */\n    ASN1.prototype.getHexStringValue = function () {\n      var hexString = this.toHexString();\n      var offset = this.header * 2;\n      var length = this.length * 2;\n      return hexString.substr(offset, length);\n    };\n    ASN1.decode = function (str) {\n      var stream;\n      if (!(str instanceof Stream)) {\n        stream = new Stream(str, 0);\n      } else\n      {\n        stream = str;\n      }\n      var streamStart = new Stream(stream);\n      var tag = new ASN1Tag(stream);\n      var len = ASN1.decodeLength(stream);\n      var start = stream.pos;\n      var header = start - streamStart.pos;\n      var sub = null;\n      var getSub = function getSub() {\n        var ret = [];\n        if (len !== null) {\n          // definite length\n          var end = start + len;\n          while (stream.pos < end) {\n            ret[ret.length] = ASN1.decode(stream);\n          }\n          if (stream.pos != end) {\n            throw new Error(\"Content size is not correct for container starting at offset \" + start);\n          }\n        } else\n        {\n          // undefined length\n          try {\n            for (;;) {\n              var s = ASN1.decode(stream);\n              if (s.tag.isEOC()) {\n                break;\n              }\n              ret[ret.length] = s;\n            }\n            len = start - stream.pos; // undefined lengths are represented as negative values\n          }\n          catch (e) {\n            throw new Error(\"Exception while decoding undefined length content: \" + e);\n          }\n        }\n        return ret;\n      };\n      if (tag.tagConstructed) {\n        // must have valid content\n        sub = getSub();\n      } else\n      if (tag.isUniversal() && (tag.tagNumber == 0x03 || tag.tagNumber == 0x04)) {\n        // sometimes BitString and OctetString are used to encapsulate ASN.1\n        try {\n          if (tag.tagNumber == 0x03) {\n            if (stream.get() != 0) {\n              throw new Error(\"BIT STRINGs with unused bits cannot encapsulate.\");\n            }\n          }\n          sub = getSub();\n          for (var i = 0; i < sub.length; ++i) {\n            if (sub[i].tag.isEOC()) {\n              throw new Error(\"EOC is not supposed to be actual content.\");\n            }\n          }\n        }\n        catch (e) {\n          // but silently ignore when they don't\n          sub = null;\n        }\n      }\n      if (sub === null) {\n        if (len === null) {\n          throw new Error(\"We can't skip over an invalid tag with undefined length at offset \" + start);\n        }\n        stream.pos = start + Math.abs(len);\n      }\n      return new ASN1(streamStart, header, len, tag, sub);\n    };\n    return ASN1;\n  }();\n  var ASN1Tag = /** @class */function () {\n    function ASN1Tag(stream) {\n      var buf = stream.get();\n      this.tagClass = buf >> 6;\n      this.tagConstructed = (buf & 0x20) !== 0;\n      this.tagNumber = buf & 0x1F;\n      if (this.tagNumber == 0x1F) {// long tag\n        var n = new Int10();\n        do {\n          buf = stream.get();\n          n.mulAdd(128, buf & 0x7F);\n        } while (buf & 0x80);\n        this.tagNumber = n.simplify();\n      }\n    }\n    ASN1Tag.prototype.isUniversal = function () {\n      return this.tagClass === 0x00;\n    };\n    ASN1Tag.prototype.isEOC = function () {\n      return this.tagClass === 0x00 && this.tagNumber === 0x00;\n    };\n    return ASN1Tag;\n  }();\n\n  // Copyright (c) 2005  Tom Wu\n  // Bits per digit\n  var dbits;\n  // JavaScript engine analysis\n  var canary = 0xdeadbeefcafe;\n  var j_lm = (canary & 0xffffff) == 0xefcafe;\n  //#region\n  var lowprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];\n  var lplim = (1 << 26) / lowprimes[lowprimes.length - 1];\n  //#endregion\n  // (public) Constructor\n  var BigInteger = /** @class */function () {\n    function BigInteger(a, b, c) {\n      if (a != null) {\n        if (\"number\" == typeof a) {\n          this.fromNumber(a, b, c);\n        } else\n        if (b == null && \"string\" != typeof a) {\n          this.fromString(a, 256);\n        } else\n        {\n          this.fromString(a, b);\n        }\n      }\n    }\n    //#region PUBLIC\n    // BigInteger.prototype.toString = bnToString;\n    // (public) return string representation in given radix\n    BigInteger.prototype.toString = function (b) {\n      if (this.s < 0) {\n        return \"-\" + this.negate().toString(b);\n      }\n      var k;\n      if (b == 16) {\n        k = 4;\n      } else\n      if (b == 8) {\n        k = 3;\n      } else\n      if (b == 2) {\n        k = 1;\n      } else\n      if (b == 32) {\n        k = 5;\n      } else\n      if (b == 4) {\n        k = 2;\n      } else\n      {\n        return this.toRadix(b);\n      }\n      var km = (1 << k) - 1;\n      var d;\n      var m = false;\n      var r = \"\";\n      var i = this.t;\n      var p = this.DB - i * this.DB % k;\n      if (i-- > 0) {\n        if (p < this.DB && (d = this[i] >> p) > 0) {\n          m = true;\n          r = int2char(d);\n        }\n        while (i >= 0) {\n          if (p < k) {\n            d = (this[i] & (1 << p) - 1) << k - p;\n            d |= this[--i] >> (p += this.DB - k);\n          } else\n          {\n            d = this[i] >> (p -= k) & km;\n            if (p <= 0) {\n              p += this.DB;\n              --i;\n            }\n          }\n          if (d > 0) {\n            m = true;\n          }\n          if (m) {\n            r += int2char(d);\n          }\n        }\n      }\n      return m ? r : \"0\";\n    };\n    // BigInteger.prototype.negate = bnNegate;\n    // (public) -this\n    BigInteger.prototype.negate = function () {\n      var r = nbi();\n      BigInteger.ZERO.subTo(this, r);\n      return r;\n    };\n    // BigInteger.prototype.abs = bnAbs;\n    // (public) |this|\n    BigInteger.prototype.abs = function () {\n      return this.s < 0 ? this.negate() : this;\n    };\n    // BigInteger.prototype.compareTo = bnCompareTo;\n    // (public) return + if this > a, - if this < a, 0 if equal\n    BigInteger.prototype.compareTo = function (a) {\n      var r = this.s - a.s;\n      if (r != 0) {\n        return r;\n      }\n      var i = this.t;\n      r = i - a.t;\n      if (r != 0) {\n        return this.s < 0 ? -r : r;\n      }\n      while (--i >= 0) {\n        if ((r = this[i] - a[i]) != 0) {\n          return r;\n        }\n      }\n      return 0;\n    };\n    // BigInteger.prototype.bitLength = bnBitLength;\n    // (public) return the number of bits in \"this\"\n    BigInteger.prototype.bitLength = function () {\n      if (this.t <= 0) {\n        return 0;\n      }\n      return this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ this.s & this.DM);\n    };\n    // BigInteger.prototype.mod = bnMod;\n    // (public) this mod a\n    BigInteger.prototype.mod = function (a) {\n      var r = nbi();\n      this.abs().divRemTo(a, null, r);\n      if (this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) {\n        a.subTo(r, r);\n      }\n      return r;\n    };\n    // BigInteger.prototype.modPowInt = bnModPowInt;\n    // (public) this^e % m, 0 <= e < 2^32\n    BigInteger.prototype.modPowInt = function (e, m) {\n      var z;\n      if (e < 256 || m.isEven()) {\n        z = new Classic(m);\n      } else\n      {\n        z = new Montgomery(m);\n      }\n      return this.exp(e, z);\n    };\n    // BigInteger.prototype.clone = bnClone;\n    // (public)\n    BigInteger.prototype.clone = function () {\n      var r = nbi();\n      this.copyTo(r);\n      return r;\n    };\n    // BigInteger.prototype.intValue = bnIntValue;\n    // (public) return value as integer\n    BigInteger.prototype.intValue = function () {\n      if (this.s < 0) {\n        if (this.t == 1) {\n          return this[0] - this.DV;\n        } else\n        if (this.t == 0) {\n          return -1;\n        }\n      } else\n      if (this.t == 1) {\n        return this[0];\n      } else\n      if (this.t == 0) {\n        return 0;\n      }\n      // assumes 16 < DB < 32\n      return (this[1] & (1 << 32 - this.DB) - 1) << this.DB | this[0];\n    };\n    // BigInteger.prototype.byteValue = bnByteValue;\n    // (public) return value as byte\n    BigInteger.prototype.byteValue = function () {\n      return this.t == 0 ? this.s : this[0] << 24 >> 24;\n    };\n    // BigInteger.prototype.shortValue = bnShortValue;\n    // (public) return value as short (assumes DB>=16)\n    BigInteger.prototype.shortValue = function () {\n      return this.t == 0 ? this.s : this[0] << 16 >> 16;\n    };\n    // BigInteger.prototype.signum = bnSigNum;\n    // (public) 0 if this == 0, 1 if this > 0\n    BigInteger.prototype.signum = function () {\n      if (this.s < 0) {\n        return -1;\n      } else\n      if (this.t <= 0 || this.t == 1 && this[0] <= 0) {\n        return 0;\n      } else\n      {\n        return 1;\n      }\n    };\n    // BigInteger.prototype.toByteArray = bnToByteArray;\n    // (public) convert to bigendian byte array\n    BigInteger.prototype.toByteArray = function () {\n      var i = this.t;\n      var r = [];\n      r[0] = this.s;\n      var p = this.DB - i * this.DB % 8;\n      var d;\n      var k = 0;\n      if (i-- > 0) {\n        if (p < this.DB && (d = this[i] >> p) != (this.s & this.DM) >> p) {\n          r[k++] = d | this.s << this.DB - p;\n        }\n        while (i >= 0) {\n          if (p < 8) {\n            d = (this[i] & (1 << p) - 1) << 8 - p;\n            d |= this[--i] >> (p += this.DB - 8);\n          } else\n          {\n            d = this[i] >> (p -= 8) & 0xff;\n            if (p <= 0) {\n              p += this.DB;\n              --i;\n            }\n          }\n          if ((d & 0x80) != 0) {\n            d |= -256;\n          }\n          if (k == 0 && (this.s & 0x80) != (d & 0x80)) {\n            ++k;\n          }\n          if (k > 0 || d != this.s) {\n            r[k++] = d;\n          }\n        }\n      }\n      return r;\n    };\n    // BigInteger.prototype.equals = bnEquals;\n    BigInteger.prototype.equals = function (a) {\n      return this.compareTo(a) == 0;\n    };\n    // BigInteger.prototype.min = bnMin;\n    BigInteger.prototype.min = function (a) {\n      return this.compareTo(a) < 0 ? this : a;\n    };\n    // BigInteger.prototype.max = bnMax;\n    BigInteger.prototype.max = function (a) {\n      return this.compareTo(a) > 0 ? this : a;\n    };\n    // BigInteger.prototype.and = bnAnd;\n    BigInteger.prototype.and = function (a) {\n      var r = nbi();\n      this.bitwiseTo(a, op_and, r);\n      return r;\n    };\n    // BigInteger.prototype.or = bnOr;\n    BigInteger.prototype.or = function (a) {\n      var r = nbi();\n      this.bitwiseTo(a, op_or, r);\n      return r;\n    };\n    // BigInteger.prototype.xor = bnXor;\n    BigInteger.prototype.xor = function (a) {\n      var r = nbi();\n      this.bitwiseTo(a, op_xor, r);\n      return r;\n    };\n    // BigInteger.prototype.andNot = bnAndNot;\n    BigInteger.prototype.andNot = function (a) {\n      var r = nbi();\n      this.bitwiseTo(a, op_andnot, r);\n      return r;\n    };\n    // BigInteger.prototype.not = bnNot;\n    // (public) ~this\n    BigInteger.prototype.not = function () {\n      var r = nbi();\n      for (var i = 0; i < this.t; ++i) {\n        r[i] = this.DM & ~this[i];\n      }\n      r.t = this.t;\n      r.s = ~this.s;\n      return r;\n    };\n    // BigInteger.prototype.shiftLeft = bnShiftLeft;\n    // (public) this << n\n    BigInteger.prototype.shiftLeft = function (n) {\n      var r = nbi();\n      if (n < 0) {\n        this.rShiftTo(-n, r);\n      } else\n      {\n        this.lShiftTo(n, r);\n      }\n      return r;\n    };\n    // BigInteger.prototype.shiftRight = bnShiftRight;\n    // (public) this >> n\n    BigInteger.prototype.shiftRight = function (n) {\n      var r = nbi();\n      if (n < 0) {\n        this.lShiftTo(-n, r);\n      } else\n      {\n        this.rShiftTo(n, r);\n      }\n      return r;\n    };\n    // BigInteger.prototype.getLowestSetBit = bnGetLowestSetBit;\n    // (public) returns index of lowest 1-bit (or -1 if none)\n    BigInteger.prototype.getLowestSetBit = function () {\n      for (var i = 0; i < this.t; ++i) {\n        if (this[i] != 0) {\n          return i * this.DB + lbit(this[i]);\n        }\n      }\n      if (this.s < 0) {\n        return this.t * this.DB;\n      }\n      return -1;\n    };\n    // BigInteger.prototype.bitCount = bnBitCount;\n    // (public) return number of set bits\n    BigInteger.prototype.bitCount = function () {\n      var r = 0;\n      var x = this.s & this.DM;\n      for (var i = 0; i < this.t; ++i) {\n        r += cbit(this[i] ^ x);\n      }\n      return r;\n    };\n    // BigInteger.prototype.testBit = bnTestBit;\n    // (public) true iff nth bit is set\n    BigInteger.prototype.testBit = function (n) {\n      var j = Math.floor(n / this.DB);\n      if (j >= this.t) {\n        return this.s != 0;\n      }\n      return (this[j] & 1 << n % this.DB) != 0;\n    };\n    // BigInteger.prototype.setBit = bnSetBit;\n    // (public) this | (1<<n)\n    BigInteger.prototype.setBit = function (n) {\n      return this.changeBit(n, op_or);\n    };\n    // BigInteger.prototype.clearBit = bnClearBit;\n    // (public) this & ~(1<<n)\n    BigInteger.prototype.clearBit = function (n) {\n      return this.changeBit(n, op_andnot);\n    };\n    // BigInteger.prototype.flipBit = bnFlipBit;\n    // (public) this ^ (1<<n)\n    BigInteger.prototype.flipBit = function (n) {\n      return this.changeBit(n, op_xor);\n    };\n    // BigInteger.prototype.add = bnAdd;\n    // (public) this + a\n    BigInteger.prototype.add = function (a) {\n      var r = nbi();\n      this.addTo(a, r);\n      return r;\n    };\n    // BigInteger.prototype.subtract = bnSubtract;\n    // (public) this - a\n    BigInteger.prototype.subtract = function (a) {\n      var r = nbi();\n      this.subTo(a, r);\n      return r;\n    };\n    // BigInteger.prototype.multiply = bnMultiply;\n    // (public) this * a\n    BigInteger.prototype.multiply = function (a) {\n      var r = nbi();\n      this.multiplyTo(a, r);\n      return r;\n    };\n    // BigInteger.prototype.divide = bnDivide;\n    // (public) this / a\n    BigInteger.prototype.divide = function (a) {\n      var r = nbi();\n      this.divRemTo(a, r, null);\n      return r;\n    };\n    // BigInteger.prototype.remainder = bnRemainder;\n    // (public) this % a\n    BigInteger.prototype.remainder = function (a) {\n      var r = nbi();\n      this.divRemTo(a, null, r);\n      return r;\n    };\n    // BigInteger.prototype.divideAndRemainder = bnDivideAndRemainder;\n    // (public) [this/a,this%a]\n    BigInteger.prototype.divideAndRemainder = function (a) {\n      var q = nbi();\n      var r = nbi();\n      this.divRemTo(a, q, r);\n      return [q, r];\n    };\n    // BigInteger.prototype.modPow = bnModPow;\n    // (public) this^e % m (HAC 14.85)\n    BigInteger.prototype.modPow = function (e, m) {\n      var i = e.bitLength();\n      var k;\n      var r = nbv(1);\n      var z;\n      if (i <= 0) {\n        return r;\n      } else\n      if (i < 18) {\n        k = 1;\n      } else\n      if (i < 48) {\n        k = 3;\n      } else\n      if (i < 144) {\n        k = 4;\n      } else\n      if (i < 768) {\n        k = 5;\n      } else\n      {\n        k = 6;\n      }\n      if (i < 8) {\n        z = new Classic(m);\n      } else\n      if (m.isEven()) {\n        z = new Barrett(m);\n      } else\n      {\n        z = new Montgomery(m);\n      }\n      // precomputation\n      var g = [];\n      var n = 3;\n      var k1 = k - 1;\n      var km = (1 << k) - 1;\n      g[1] = z.convert(this);\n      if (k > 1) {\n        var g2 = nbi();\n        z.sqrTo(g[1], g2);\n        while (n <= km) {\n          g[n] = nbi();\n          z.mulTo(g2, g[n - 2], g[n]);\n          n += 2;\n        }\n      }\n      var j = e.t - 1;\n      var w;\n      var is1 = true;\n      var r2 = nbi();\n      var t;\n      i = nbits(e[j]) - 1;\n      while (j >= 0) {\n        if (i >= k1) {\n          w = e[j] >> i - k1 & km;\n        } else\n        {\n          w = (e[j] & (1 << i + 1) - 1) << k1 - i;\n          if (j > 0) {\n            w |= e[j - 1] >> this.DB + i - k1;\n          }\n        }\n        n = k;\n        while ((w & 1) == 0) {\n          w >>= 1;\n          --n;\n        }\n        if ((i -= n) < 0) {\n          i += this.DB;\n          --j;\n        }\n        if (is1) {// ret == 1, don't bother squaring or multiplying it\n          g[w].copyTo(r);\n          is1 = false;\n        } else\n        {\n          while (n > 1) {\n            z.sqrTo(r, r2);\n            z.sqrTo(r2, r);\n            n -= 2;\n          }\n          if (n > 0) {\n            z.sqrTo(r, r2);\n          } else\n          {\n            t = r;\n            r = r2;\n            r2 = t;\n          }\n          z.mulTo(r2, g[w], r);\n        }\n        while (j >= 0 && (e[j] & 1 << i) == 0) {\n          z.sqrTo(r, r2);\n          t = r;\n          r = r2;\n          r2 = t;\n          if (--i < 0) {\n            i = this.DB - 1;\n            --j;\n          }\n        }\n      }\n      return z.revert(r);\n    };\n    // BigInteger.prototype.modInverse = bnModInverse;\n    // (public) 1/this % m (HAC 14.61)\n    BigInteger.prototype.modInverse = function (m) {\n      var ac = m.isEven();\n      if (this.isEven() && ac || m.signum() == 0) {\n        return BigInteger.ZERO;\n      }\n      var u = m.clone();\n      var v = this.clone();\n      var a = nbv(1);\n      var b = nbv(0);\n      var c = nbv(0);\n      var d = nbv(1);\n      while (u.signum() != 0) {\n        while (u.isEven()) {\n          u.rShiftTo(1, u);\n          if (ac) {\n            if (!a.isEven() || !b.isEven()) {\n              a.addTo(this, a);\n              b.subTo(m, b);\n            }\n            a.rShiftTo(1, a);\n          } else\n          if (!b.isEven()) {\n            b.subTo(m, b);\n          }\n          b.rShiftTo(1, b);\n        }\n        while (v.isEven()) {\n          v.rShiftTo(1, v);\n          if (ac) {\n            if (!c.isEven() || !d.isEven()) {\n              c.addTo(this, c);\n              d.subTo(m, d);\n            }\n            c.rShiftTo(1, c);\n          } else\n          if (!d.isEven()) {\n            d.subTo(m, d);\n          }\n          d.rShiftTo(1, d);\n        }\n        if (u.compareTo(v) >= 0) {\n          u.subTo(v, u);\n          if (ac) {\n            a.subTo(c, a);\n          }\n          b.subTo(d, b);\n        } else\n        {\n          v.subTo(u, v);\n          if (ac) {\n            c.subTo(a, c);\n          }\n          d.subTo(b, d);\n        }\n      }\n      if (v.compareTo(BigInteger.ONE) != 0) {\n        return BigInteger.ZERO;\n      }\n      if (d.compareTo(m) >= 0) {\n        return d.subtract(m);\n      }\n      if (d.signum() < 0) {\n        d.addTo(m, d);\n      } else\n      {\n        return d;\n      }\n      if (d.signum() < 0) {\n        return d.add(m);\n      } else\n      {\n        return d;\n      }\n    };\n    // BigInteger.prototype.pow = bnPow;\n    // (public) this^e\n    BigInteger.prototype.pow = function (e) {\n      return this.exp(e, new NullExp());\n    };\n    // BigInteger.prototype.gcd = bnGCD;\n    // (public) gcd(this,a) (HAC 14.54)\n    BigInteger.prototype.gcd = function (a) {\n      var x = this.s < 0 ? this.negate() : this.clone();\n      var y = a.s < 0 ? a.negate() : a.clone();\n      if (x.compareTo(y) < 0) {\n        var t = x;\n        x = y;\n        y = t;\n      }\n      var i = x.getLowestSetBit();\n      var g = y.getLowestSetBit();\n      if (g < 0) {\n        return x;\n      }\n      if (i < g) {\n        g = i;\n      }\n      if (g > 0) {\n        x.rShiftTo(g, x);\n        y.rShiftTo(g, y);\n      }\n      while (x.signum() > 0) {\n        if ((i = x.getLowestSetBit()) > 0) {\n          x.rShiftTo(i, x);\n        }\n        if ((i = y.getLowestSetBit()) > 0) {\n          y.rShiftTo(i, y);\n        }\n        if (x.compareTo(y) >= 0) {\n          x.subTo(y, x);\n          x.rShiftTo(1, x);\n        } else\n        {\n          y.subTo(x, y);\n          y.rShiftTo(1, y);\n        }\n      }\n      if (g > 0) {\n        y.lShiftTo(g, y);\n      }\n      return y;\n    };\n    // BigInteger.prototype.isProbablePrime = bnIsProbablePrime;\n    // (public) test primality with certainty >= 1-.5^t\n    BigInteger.prototype.isProbablePrime = function (t) {\n      var i;\n      var x = this.abs();\n      if (x.t == 1 && x[0] <= lowprimes[lowprimes.length - 1]) {\n        for (i = 0; i < lowprimes.length; ++i) {\n          if (x[0] == lowprimes[i]) {\n            return true;\n          }\n        }\n        return false;\n      }\n      if (x.isEven()) {\n        return false;\n      }\n      i = 1;\n      while (i < lowprimes.length) {\n        var m = lowprimes[i];\n        var j = i + 1;\n        while (j < lowprimes.length && m < lplim) {\n          m *= lowprimes[j++];\n        }\n        m = x.modInt(m);\n        while (i < j) {\n          if (m % lowprimes[i++] == 0) {\n            return false;\n          }\n        }\n      }\n      return x.millerRabin(t);\n    };\n    //#endregion PUBLIC\n    //#region PROTECTED\n    // BigInteger.prototype.copyTo = bnpCopyTo;\n    // (protected) copy this to r\n    BigInteger.prototype.copyTo = function (r) {\n      for (var i = this.t - 1; i >= 0; --i) {\n        r[i] = this[i];\n      }\n      r.t = this.t;\n      r.s = this.s;\n    };\n    // BigInteger.prototype.fromInt = bnpFromInt;\n    // (protected) set from integer value x, -DV <= x < DV\n    BigInteger.prototype.fromInt = function (x) {\n      this.t = 1;\n      this.s = x < 0 ? -1 : 0;\n      if (x > 0) {\n        this[0] = x;\n      } else\n      if (x < -1) {\n        this[0] = x + this.DV;\n      } else\n      {\n        this.t = 0;\n      }\n    };\n    // BigInteger.prototype.fromString = bnpFromString;\n    // (protected) set from string and radix\n    BigInteger.prototype.fromString = function (s, b) {\n      var k;\n      if (b == 16) {\n        k = 4;\n      } else\n      if (b == 8) {\n        k = 3;\n      } else\n      if (b == 256) {\n        k = 8;\n        /* byte array */\n      } else\n      if (b == 2) {\n        k = 1;\n      } else\n      if (b == 32) {\n        k = 5;\n      } else\n      if (b == 4) {\n        k = 2;\n      } else\n      {\n        this.fromRadix(s, b);\n        return;\n      }\n      this.t = 0;\n      this.s = 0;\n      var i = s.length;\n      var mi = false;\n      var sh = 0;\n      while (--i >= 0) {\n        var x = k == 8 ? +s[i] & 0xff : intAt(s, i);\n        if (x < 0) {\n          if (s.charAt(i) == \"-\") {\n            mi = true;\n          }\n          continue;\n        }\n        mi = false;\n        if (sh == 0) {\n          this[this.t++] = x;\n        } else\n        if (sh + k > this.DB) {\n          this[this.t - 1] |= (x & (1 << this.DB - sh) - 1) << sh;\n          this[this.t++] = x >> this.DB - sh;\n        } else\n        {\n          this[this.t - 1] |= x << sh;\n        }\n        sh += k;\n        if (sh >= this.DB) {\n          sh -= this.DB;\n        }\n      }\n      if (k == 8 && (+s[0] & 0x80) != 0) {\n        this.s = -1;\n        if (sh > 0) {\n          this[this.t - 1] |= (1 << this.DB - sh) - 1 << sh;\n        }\n      }\n      this.clamp();\n      if (mi) {\n        BigInteger.ZERO.subTo(this, this);\n      }\n    };\n    // BigInteger.prototype.clamp = bnpClamp;\n    // (protected) clamp off excess high words\n    BigInteger.prototype.clamp = function () {\n      var c = this.s & this.DM;\n      while (this.t > 0 && this[this.t - 1] == c) {\n        --this.t;\n      }\n    };\n    // BigInteger.prototype.dlShiftTo = bnpDLShiftTo;\n    // (protected) r = this << n*DB\n    BigInteger.prototype.dlShiftTo = function (n, r) {\n      var i;\n      for (i = this.t - 1; i >= 0; --i) {\n        r[i + n] = this[i];\n      }\n      for (i = n - 1; i >= 0; --i) {\n        r[i] = 0;\n      }\n      r.t = this.t + n;\n      r.s = this.s;\n    };\n    // BigInteger.prototype.drShiftTo = bnpDRShiftTo;\n    // (protected) r = this >> n*DB\n    BigInteger.prototype.drShiftTo = function (n, r) {\n      for (var i = n; i < this.t; ++i) {\n        r[i - n] = this[i];\n      }\n      r.t = Math.max(this.t - n, 0);\n      r.s = this.s;\n    };\n    // BigInteger.prototype.lShiftTo = bnpLShiftTo;\n    // (protected) r = this << n\n    BigInteger.prototype.lShiftTo = function (n, r) {\n      var bs = n % this.DB;\n      var cbs = this.DB - bs;\n      var bm = (1 << cbs) - 1;\n      var ds = Math.floor(n / this.DB);\n      var c = this.s << bs & this.DM;\n      for (var i = this.t - 1; i >= 0; --i) {\n        r[i + ds + 1] = this[i] >> cbs | c;\n        c = (this[i] & bm) << bs;\n      }\n      for (var i = ds - 1; i >= 0; --i) {\n        r[i] = 0;\n      }\n      r[ds] = c;\n      r.t = this.t + ds + 1;\n      r.s = this.s;\n      r.clamp();\n    };\n    // BigInteger.prototype.rShiftTo = bnpRShiftTo;\n    // (protected) r = this >> n\n    BigInteger.prototype.rShiftTo = function (n, r) {\n      r.s = this.s;\n      var ds = Math.floor(n / this.DB);\n      if (ds >= this.t) {\n        r.t = 0;\n        return;\n      }\n      var bs = n % this.DB;\n      var cbs = this.DB - bs;\n      var bm = (1 << bs) - 1;\n      r[0] = this[ds] >> bs;\n      for (var i = ds + 1; i < this.t; ++i) {\n        r[i - ds - 1] |= (this[i] & bm) << cbs;\n        r[i - ds] = this[i] >> bs;\n      }\n      if (bs > 0) {\n        r[this.t - ds - 1] |= (this.s & bm) << cbs;\n      }\n      r.t = this.t - ds;\n      r.clamp();\n    };\n    // BigInteger.prototype.subTo = bnpSubTo;\n    // (protected) r = this - a\n    BigInteger.prototype.subTo = function (a, r) {\n      var i = 0;\n      var c = 0;\n      var m = Math.min(a.t, this.t);\n      while (i < m) {\n        c += this[i] - a[i];\n        r[i++] = c & this.DM;\n        c >>= this.DB;\n      }\n      if (a.t < this.t) {\n        c -= a.s;\n        while (i < this.t) {\n          c += this[i];\n          r[i++] = c & this.DM;\n          c >>= this.DB;\n        }\n        c += this.s;\n      } else\n      {\n        c += this.s;\n        while (i < a.t) {\n          c -= a[i];\n          r[i++] = c & this.DM;\n          c >>= this.DB;\n        }\n        c -= a.s;\n      }\n      r.s = c < 0 ? -1 : 0;\n      if (c < -1) {\n        r[i++] = this.DV + c;\n      } else\n      if (c > 0) {\n        r[i++] = c;\n      }\n      r.t = i;\n      r.clamp();\n    };\n    // BigInteger.prototype.multiplyTo = bnpMultiplyTo;\n    // (protected) r = this * a, r != this,a (HAC 14.12)\n    // \"this\" should be the larger one if appropriate.\n    BigInteger.prototype.multiplyTo = function (a, r) {\n      var x = this.abs();\n      var y = a.abs();\n      var i = x.t;\n      r.t = i + y.t;\n      while (--i >= 0) {\n        r[i] = 0;\n      }\n      for (i = 0; i < y.t; ++i) {\n        r[i + x.t] = x.am(0, y[i], r, i, 0, x.t);\n      }\n      r.s = 0;\n      r.clamp();\n      if (this.s != a.s) {\n        BigInteger.ZERO.subTo(r, r);\n      }\n    };\n    // BigInteger.prototype.squareTo = bnpSquareTo;\n    // (protected) r = this^2, r != this (HAC 14.16)\n    BigInteger.prototype.squareTo = function (r) {\n      var x = this.abs();\n      var i = r.t = 2 * x.t;\n      while (--i >= 0) {\n        r[i] = 0;\n      }\n      for (i = 0; i < x.t - 1; ++i) {\n        var c = x.am(i, x[i], r, 2 * i, 0, 1);\n        if ((r[i + x.t] += x.am(i + 1, 2 * x[i], r, 2 * i + 1, c, x.t - i - 1)) >= x.DV) {\n          r[i + x.t] -= x.DV;\n          r[i + x.t + 1] = 1;\n        }\n      }\n      if (r.t > 0) {\n        r[r.t - 1] += x.am(i, x[i], r, 2 * i, 0, 1);\n      }\n      r.s = 0;\n      r.clamp();\n    };\n    // BigInteger.prototype.divRemTo = bnpDivRemTo;\n    // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)\n    // r != q, this != m.  q or r may be null.\n    BigInteger.prototype.divRemTo = function (m, q, r) {\n      var pm = m.abs();\n      if (pm.t <= 0) {\n        return;\n      }\n      var pt = this.abs();\n      if (pt.t < pm.t) {\n        if (q != null) {\n          q.fromInt(0);\n        }\n        if (r != null) {\n          this.copyTo(r);\n        }\n        return;\n      }\n      if (r == null) {\n        r = nbi();\n      }\n      var y = nbi();\n      var ts = this.s;\n      var ms = m.s;\n      var nsh = this.DB - nbits(pm[pm.t - 1]); // normalize modulus\n      if (nsh > 0) {\n        pm.lShiftTo(nsh, y);\n        pt.lShiftTo(nsh, r);\n      } else\n      {\n        pm.copyTo(y);\n        pt.copyTo(r);\n      }\n      var ys = y.t;\n      var y0 = y[ys - 1];\n      if (y0 == 0) {\n        return;\n      }\n      var yt = y0 * (1 << this.F1) + (ys > 1 ? y[ys - 2] >> this.F2 : 0);\n      var d1 = this.FV / yt;\n      var d2 = (1 << this.F1) / yt;\n      var e = 1 << this.F2;\n      var i = r.t;\n      var j = i - ys;\n      var t = q == null ? nbi() : q;\n      y.dlShiftTo(j, t);\n      if (r.compareTo(t) >= 0) {\n        r[r.t++] = 1;\n        r.subTo(t, r);\n      }\n      BigInteger.ONE.dlShiftTo(ys, t);\n      t.subTo(y, y); // \"negative\" y so we can replace sub with am later\n      while (y.t < ys) {\n        y[y.t++] = 0;\n      }\n      while (--j >= 0) {\n        // Estimate quotient digit\n        var qd = r[--i] == y0 ? this.DM : Math.floor(r[i] * d1 + (r[i - 1] + e) * d2);\n        if ((r[i] += y.am(0, qd, r, j, 0, ys)) < qd) {// Try it out\n          y.dlShiftTo(j, t);\n          r.subTo(t, r);\n          while (r[i] < --qd) {\n            r.subTo(t, r);\n          }\n        }\n      }\n      if (q != null) {\n        r.drShiftTo(ys, q);\n        if (ts != ms) {\n          BigInteger.ZERO.subTo(q, q);\n        }\n      }\n      r.t = ys;\n      r.clamp();\n      if (nsh > 0) {\n        r.rShiftTo(nsh, r);\n      } // Denormalize remainder\n      if (ts < 0) {\n        BigInteger.ZERO.subTo(r, r);\n      }\n    };\n    // BigInteger.prototype.invDigit = bnpInvDigit;\n    // (protected) return \"-1/this % 2^DB\"; useful for Mont. reduction\n    // justification:\n    //         xy == 1 (mod m)\n    //         xy =  1+km\n    //   xy(2-xy) = (1+km)(1-km)\n    // x[y(2-xy)] = 1-k^2m^2\n    // x[y(2-xy)] == 1 (mod m^2)\n    // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2\n    // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.\n    // JS multiply \"overflows\" differently from C/C++, so care is needed here.\n    BigInteger.prototype.invDigit = function () {\n      if (this.t < 1) {\n        return 0;\n      }\n      var x = this[0];\n      if ((x & 1) == 0) {\n        return 0;\n      }\n      var y = x & 3; // y == 1/x mod 2^2\n      y = y * (2 - (x & 0xf) * y) & 0xf; // y == 1/x mod 2^4\n      y = y * (2 - (x & 0xff) * y) & 0xff; // y == 1/x mod 2^8\n      y = y * (2 - ((x & 0xffff) * y & 0xffff)) & 0xffff; // y == 1/x mod 2^16\n      // last step - calculate inverse mod DV directly;\n      // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints\n      y = y * (2 - x * y % this.DV) % this.DV; // y == 1/x mod 2^dbits\n      // we really want the negative inverse, and -DV < y < DV\n      return y > 0 ? this.DV - y : -y;\n    };\n    // BigInteger.prototype.isEven = bnpIsEven;\n    // (protected) true iff this is even\n    BigInteger.prototype.isEven = function () {\n      return (this.t > 0 ? this[0] & 1 : this.s) == 0;\n    };\n    // BigInteger.prototype.exp = bnpExp;\n    // (protected) this^e, e < 2^32, doing sqr and mul with \"r\" (HAC 14.79)\n    BigInteger.prototype.exp = function (e, z) {\n      if (e > 0xffffffff || e < 1) {\n        return BigInteger.ONE;\n      }\n      var r = nbi();\n      var r2 = nbi();\n      var g = z.convert(this);\n      var i = nbits(e) - 1;\n      g.copyTo(r);\n      while (--i >= 0) {\n        z.sqrTo(r, r2);\n        if ((e & 1 << i) > 0) {\n          z.mulTo(r2, g, r);\n        } else\n        {\n          var t = r;\n          r = r2;\n          r2 = t;\n        }\n      }\n      return z.revert(r);\n    };\n    // BigInteger.prototype.chunkSize = bnpChunkSize;\n    // (protected) return x s.t. r^x < DV\n    BigInteger.prototype.chunkSize = function (r) {\n      return Math.floor(Math.LN2 * this.DB / Math.log(r));\n    };\n    // BigInteger.prototype.toRadix = bnpToRadix;\n    // (protected) convert to radix string\n    BigInteger.prototype.toRadix = function (b) {\n      if (b == null) {\n        b = 10;\n      }\n      if (this.signum() == 0 || b < 2 || b > 36) {\n        return \"0\";\n      }\n      var cs = this.chunkSize(b);\n      var a = Math.pow(b, cs);\n      var d = nbv(a);\n      var y = nbi();\n      var z = nbi();\n      var r = \"\";\n      this.divRemTo(d, y, z);\n      while (y.signum() > 0) {\n        r = (a + z.intValue()).toString(b).substr(1) + r;\n        y.divRemTo(d, y, z);\n      }\n      return z.intValue().toString(b) + r;\n    };\n    // BigInteger.prototype.fromRadix = bnpFromRadix;\n    // (protected) convert from radix string\n    BigInteger.prototype.fromRadix = function (s, b) {\n      this.fromInt(0);\n      if (b == null) {\n        b = 10;\n      }\n      var cs = this.chunkSize(b);\n      var d = Math.pow(b, cs);\n      var mi = false;\n      var j = 0;\n      var w = 0;\n      for (var i = 0; i < s.length; ++i) {\n        var x = intAt(s, i);\n        if (x < 0) {\n          if (s.charAt(i) == \"-\" && this.signum() == 0) {\n            mi = true;\n          }\n          continue;\n        }\n        w = b * w + x;\n        if (++j >= cs) {\n          this.dMultiply(d);\n          this.dAddOffset(w, 0);\n          j = 0;\n          w = 0;\n        }\n      }\n      if (j > 0) {\n        this.dMultiply(Math.pow(b, j));\n        this.dAddOffset(w, 0);\n      }\n      if (mi) {\n        BigInteger.ZERO.subTo(this, this);\n      }\n    };\n    // BigInteger.prototype.fromNumber = bnpFromNumber;\n    // (protected) alternate constructor\n    BigInteger.prototype.fromNumber = function (a, b, c) {\n      if (\"number\" == typeof b) {\n        // new BigInteger(int,int,RNG)\n        if (a < 2) {\n          this.fromInt(1);\n        } else\n        {\n          this.fromNumber(a, c);\n          if (!this.testBit(a - 1)) {\n            // force MSB set\n            this.bitwiseTo(BigInteger.ONE.shiftLeft(a - 1), op_or, this);\n          }\n          if (this.isEven()) {\n            this.dAddOffset(1, 0);\n          } // force odd\n          while (!this.isProbablePrime(b)) {\n            this.dAddOffset(2, 0);\n            if (this.bitLength() > a) {\n              this.subTo(BigInteger.ONE.shiftLeft(a - 1), this);\n            }\n          }\n        }\n      } else\n      {\n        // new BigInteger(int,RNG)\n        var x = [];\n        var t = a & 7;\n        x.length = (a >> 3) + 1;\n        b.nextBytes(x);\n        if (t > 0) {\n          x[0] &= (1 << t) - 1;\n        } else\n        {\n          x[0] = 0;\n        }\n        this.fromString(x, 256);\n      }\n    };\n    // BigInteger.prototype.bitwiseTo = bnpBitwiseTo;\n    // (protected) r = this op a (bitwise)\n    BigInteger.prototype.bitwiseTo = function (a, op, r) {\n      var i;\n      var f;\n      var m = Math.min(a.t, this.t);\n      for (i = 0; i < m; ++i) {\n        r[i] = op(this[i], a[i]);\n      }\n      if (a.t < this.t) {\n        f = a.s & this.DM;\n        for (i = m; i < this.t; ++i) {\n          r[i] = op(this[i], f);\n        }\n        r.t = this.t;\n      } else\n      {\n        f = this.s & this.DM;\n        for (i = m; i < a.t; ++i) {\n          r[i] = op(f, a[i]);\n        }\n        r.t = a.t;\n      }\n      r.s = op(this.s, a.s);\n      r.clamp();\n    };\n    // BigInteger.prototype.changeBit = bnpChangeBit;\n    // (protected) this op (1<<n)\n    BigInteger.prototype.changeBit = function (n, op) {\n      var r = BigInteger.ONE.shiftLeft(n);\n      this.bitwiseTo(r, op, r);\n      return r;\n    };\n    // BigInteger.prototype.addTo = bnpAddTo;\n    // (protected) r = this + a\n    BigInteger.prototype.addTo = function (a, r) {\n      var i = 0;\n      var c = 0;\n      var m = Math.min(a.t, this.t);\n      while (i < m) {\n        c += this[i] + a[i];\n        r[i++] = c & this.DM;\n        c >>= this.DB;\n      }\n      if (a.t < this.t) {\n        c += a.s;\n        while (i < this.t) {\n          c += this[i];\n          r[i++] = c & this.DM;\n          c >>= this.DB;\n        }\n        c += this.s;\n      } else\n      {\n        c += this.s;\n        while (i < a.t) {\n          c += a[i];\n          r[i++] = c & this.DM;\n          c >>= this.DB;\n        }\n        c += a.s;\n      }\n      r.s = c < 0 ? -1 : 0;\n      if (c > 0) {\n        r[i++] = c;\n      } else\n      if (c < -1) {\n        r[i++] = this.DV + c;\n      }\n      r.t = i;\n      r.clamp();\n    };\n    // BigInteger.prototype.dMultiply = bnpDMultiply;\n    // (protected) this *= n, this >= 0, 1 < n < DV\n    BigInteger.prototype.dMultiply = function (n) {\n      this[this.t] = this.am(0, n - 1, this, 0, 0, this.t);\n      ++this.t;\n      this.clamp();\n    };\n    // BigInteger.prototype.dAddOffset = bnpDAddOffset;\n    // (protected) this += n << w words, this >= 0\n    BigInteger.prototype.dAddOffset = function (n, w) {\n      if (n == 0) {\n        return;\n      }\n      while (this.t <= w) {\n        this[this.t++] = 0;\n      }\n      this[w] += n;\n      while (this[w] >= this.DV) {\n        this[w] -= this.DV;\n        if (++w >= this.t) {\n          this[this.t++] = 0;\n        }\n        ++this[w];\n      }\n    };\n    // BigInteger.prototype.multiplyLowerTo = bnpMultiplyLowerTo;\n    // (protected) r = lower n words of \"this * a\", a.t <= n\n    // \"this\" should be the larger one if appropriate.\n    BigInteger.prototype.multiplyLowerTo = function (a, n, r) {\n      var i = Math.min(this.t + a.t, n);\n      r.s = 0; // assumes a,this >= 0\n      r.t = i;\n      while (i > 0) {\n        r[--i] = 0;\n      }\n      for (var j = r.t - this.t; i < j; ++i) {\n        r[i + this.t] = this.am(0, a[i], r, i, 0, this.t);\n      }\n      for (var j = Math.min(a.t, n); i < j; ++i) {\n        this.am(0, a[i], r, i, 0, n - i);\n      }\n      r.clamp();\n    };\n    // BigInteger.prototype.multiplyUpperTo = bnpMultiplyUpperTo;\n    // (protected) r = \"this * a\" without lower n words, n > 0\n    // \"this\" should be the larger one if appropriate.\n    BigInteger.prototype.multiplyUpperTo = function (a, n, r) {\n      --n;\n      var i = r.t = this.t + a.t - n;\n      r.s = 0; // assumes a,this >= 0\n      while (--i >= 0) {\n        r[i] = 0;\n      }\n      for (i = Math.max(n - this.t, 0); i < a.t; ++i) {\n        r[this.t + i - n] = this.am(n - i, a[i], r, 0, 0, this.t + i - n);\n      }\n      r.clamp();\n      r.drShiftTo(1, r);\n    };\n    // BigInteger.prototype.modInt = bnpModInt;\n    // (protected) this % n, n < 2^26\n    BigInteger.prototype.modInt = function (n) {\n      if (n <= 0) {\n        return 0;\n      }\n      var d = this.DV % n;\n      var r = this.s < 0 ? n - 1 : 0;\n      if (this.t > 0) {\n        if (d == 0) {\n          r = this[0] % n;\n        } else\n        {\n          for (var i = this.t - 1; i >= 0; --i) {\n            r = (d * r + this[i]) % n;\n          }\n        }\n      }\n      return r;\n    };\n    // BigInteger.prototype.millerRabin = bnpMillerRabin;\n    // (protected) true if probably prime (HAC 4.24, Miller-Rabin)\n    BigInteger.prototype.millerRabin = function (t) {\n      var n1 = this.subtract(BigInteger.ONE);\n      var k = n1.getLowestSetBit();\n      if (k <= 0) {\n        return false;\n      }\n      var r = n1.shiftRight(k);\n      t = t + 1 >> 1;\n      if (t > lowprimes.length) {\n        t = lowprimes.length;\n      }\n      var a = nbi();\n      for (var i = 0; i < t; ++i) {\n        // Pick bases at random, instead of starting at 2\n        a.fromInt(lowprimes[Math.floor(Math.random() * lowprimes.length)]);\n        var y = a.modPow(r, this);\n        if (y.compareTo(BigInteger.ONE) != 0 && y.compareTo(n1) != 0) {\n          var j = 1;\n          while (j++ < k && y.compareTo(n1) != 0) {\n            y = y.modPowInt(2, this);\n            if (y.compareTo(BigInteger.ONE) == 0) {\n              return false;\n            }\n          }\n          if (y.compareTo(n1) != 0) {\n            return false;\n          }\n        }\n      }\n      return true;\n    };\n    // BigInteger.prototype.square = bnSquare;\n    // (public) this^2\n    BigInteger.prototype.square = function () {\n      var r = nbi();\n      this.squareTo(r);\n      return r;\n    };\n    //#region ASYNC\n    // Public API method\n    BigInteger.prototype.gcda = function (a, callback) {\n      var x = this.s < 0 ? this.negate() : this.clone();\n      var y = a.s < 0 ? a.negate() : a.clone();\n      if (x.compareTo(y) < 0) {\n        var t = x;\n        x = y;\n        y = t;\n      }\n      var i = x.getLowestSetBit();\n      var g = y.getLowestSetBit();\n      if (g < 0) {\n        callback(x);\n        return;\n      }\n      if (i < g) {\n        g = i;\n      }\n      if (g > 0) {\n        x.rShiftTo(g, x);\n        y.rShiftTo(g, y);\n      }\n      // Workhorse of the algorithm, gets called 200 - 800 times per 512 bit keygen.\n      var gcda1 = function gcda1() {\n        if ((i = x.getLowestSetBit()) > 0) {\n          x.rShiftTo(i, x);\n        }\n        if ((i = y.getLowestSetBit()) > 0) {\n          y.rShiftTo(i, y);\n        }\n        if (x.compareTo(y) >= 0) {\n          x.subTo(y, x);\n          x.rShiftTo(1, x);\n        } else\n        {\n          y.subTo(x, y);\n          y.rShiftTo(1, y);\n        }\n        if (!(x.signum() > 0)) {\n          if (g > 0) {\n            y.lShiftTo(g, y);\n          }\n          setTimeout(function () {callback(y);}, 0); // escape\n        } else\n        {\n          setTimeout(gcda1, 0);\n        }\n      };\n      setTimeout(gcda1, 10);\n    };\n    // (protected) alternate constructor\n    BigInteger.prototype.fromNumberAsync = function (a, b, c, callback) {\n      if (\"number\" == typeof b) {\n        if (a < 2) {\n          this.fromInt(1);\n        } else\n        {\n          this.fromNumber(a, c);\n          if (!this.testBit(a - 1)) {\n            this.bitwiseTo(BigInteger.ONE.shiftLeft(a - 1), op_or, this);\n          }\n          if (this.isEven()) {\n            this.dAddOffset(1, 0);\n          }\n          var bnp_1 = this;\n          var bnpfn1_1 = function bnpfn1_1() {\n            bnp_1.dAddOffset(2, 0);\n            if (bnp_1.bitLength() > a) {\n              bnp_1.subTo(BigInteger.ONE.shiftLeft(a - 1), bnp_1);\n            }\n            if (bnp_1.isProbablePrime(b)) {\n              setTimeout(function () {callback();}, 0); // escape\n            } else\n            {\n              setTimeout(bnpfn1_1, 0);\n            }\n          };\n          setTimeout(bnpfn1_1, 0);\n        }\n      } else\n      {\n        var x = [];\n        var t = a & 7;\n        x.length = (a >> 3) + 1;\n        b.nextBytes(x);\n        if (t > 0) {\n          x[0] &= (1 << t) - 1;\n        } else\n        {\n          x[0] = 0;\n        }\n        this.fromString(x, 256);\n      }\n    };\n    return BigInteger;\n  }();\n  //#region REDUCERS\n  //#region NullExp\n  var NullExp = /** @class */function () {\n    function NullExp() {\n    }\n    // NullExp.prototype.convert = nNop;\n    NullExp.prototype.convert = function (x) {\n      return x;\n    };\n    // NullExp.prototype.revert = nNop;\n    NullExp.prototype.revert = function (x) {\n      return x;\n    };\n    // NullExp.prototype.mulTo = nMulTo;\n    NullExp.prototype.mulTo = function (x, y, r) {\n      x.multiplyTo(y, r);\n    };\n    // NullExp.prototype.sqrTo = nSqrTo;\n    NullExp.prototype.sqrTo = function (x, r) {\n      x.squareTo(r);\n    };\n    return NullExp;\n  }();\n  // Modular reduction using \"classic\" algorithm\n  var Classic = /** @class */function () {\n    function Classic(m) {\n      this.m = m;\n    }\n    // Classic.prototype.convert = cConvert;\n    Classic.prototype.convert = function (x) {\n      if (x.s < 0 || x.compareTo(this.m) >= 0) {\n        return x.mod(this.m);\n      } else\n      {\n        return x;\n      }\n    };\n    // Classic.prototype.revert = cRevert;\n    Classic.prototype.revert = function (x) {\n      return x;\n    };\n    // Classic.prototype.reduce = cReduce;\n    Classic.prototype.reduce = function (x) {\n      x.divRemTo(this.m, null, x);\n    };\n    // Classic.prototype.mulTo = cMulTo;\n    Classic.prototype.mulTo = function (x, y, r) {\n      x.multiplyTo(y, r);\n      this.reduce(r);\n    };\n    // Classic.prototype.sqrTo = cSqrTo;\n    Classic.prototype.sqrTo = function (x, r) {\n      x.squareTo(r);\n      this.reduce(r);\n    };\n    return Classic;\n  }();\n  //#endregion\n  //#region Montgomery\n  // Montgomery reduction\n  var Montgomery = /** @class */function () {\n    function Montgomery(m) {\n      this.m = m;\n      this.mp = m.invDigit();\n      this.mpl = this.mp & 0x7fff;\n      this.mph = this.mp >> 15;\n      this.um = (1 << m.DB - 15) - 1;\n      this.mt2 = 2 * m.t;\n    }\n    // Montgomery.prototype.convert = montConvert;\n    // xR mod m\n    Montgomery.prototype.convert = function (x) {\n      var r = nbi();\n      x.abs().dlShiftTo(this.m.t, r);\n      r.divRemTo(this.m, null, r);\n      if (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) {\n        this.m.subTo(r, r);\n      }\n      return r;\n    };\n    // Montgomery.prototype.revert = montRevert;\n    // x/R mod m\n    Montgomery.prototype.revert = function (x) {\n      var r = nbi();\n      x.copyTo(r);\n      this.reduce(r);\n      return r;\n    };\n    // Montgomery.prototype.reduce = montReduce;\n    // x = x/R mod m (HAC 14.32)\n    Montgomery.prototype.reduce = function (x) {\n      while (x.t <= this.mt2) {\n        // pad x so am has enough room later\n        x[x.t++] = 0;\n      }\n      for (var i = 0; i < this.m.t; ++i) {\n        // faster way of calculating u0 = x[i]*mp mod DV\n        var j = x[i] & 0x7fff;\n        var u0 = j * this.mpl + ((j * this.mph + (x[i] >> 15) * this.mpl & this.um) << 15) & x.DM;\n        // use am to combine the multiply-shift-add into one call\n        j = i + this.m.t;\n        x[j] += this.m.am(0, u0, x, i, 0, this.m.t);\n        // propagate carry\n        while (x[j] >= x.DV) {\n          x[j] -= x.DV;\n          x[++j]++;\n        }\n      }\n      x.clamp();\n      x.drShiftTo(this.m.t, x);\n      if (x.compareTo(this.m) >= 0) {\n        x.subTo(this.m, x);\n      }\n    };\n    // Montgomery.prototype.mulTo = montMulTo;\n    // r = \"xy/R mod m\"; x,y != r\n    Montgomery.prototype.mulTo = function (x, y, r) {\n      x.multiplyTo(y, r);\n      this.reduce(r);\n    };\n    // Montgomery.prototype.sqrTo = montSqrTo;\n    // r = \"x^2/R mod m\"; x != r\n    Montgomery.prototype.sqrTo = function (x, r) {\n      x.squareTo(r);\n      this.reduce(r);\n    };\n    return Montgomery;\n  }();\n  //#endregion Montgomery\n  //#region Barrett\n  // Barrett modular reduction\n  var Barrett = /** @class */function () {\n    function Barrett(m) {\n      this.m = m;\n      // setup Barrett\n      this.r2 = nbi();\n      this.q3 = nbi();\n      BigInteger.ONE.dlShiftTo(2 * m.t, this.r2);\n      this.mu = this.r2.divide(m);\n    }\n    // Barrett.prototype.convert = barrettConvert;\n    Barrett.prototype.convert = function (x) {\n      if (x.s < 0 || x.t > 2 * this.m.t) {\n        return x.mod(this.m);\n      } else\n      if (x.compareTo(this.m) < 0) {\n        return x;\n      } else\n      {\n        var r = nbi();\n        x.copyTo(r);\n        this.reduce(r);\n        return r;\n      }\n    };\n    // Barrett.prototype.revert = barrettRevert;\n    Barrett.prototype.revert = function (x) {\n      return x;\n    };\n    // Barrett.prototype.reduce = barrettReduce;\n    // x = x mod m (HAC 14.42)\n    Barrett.prototype.reduce = function (x) {\n      x.drShiftTo(this.m.t - 1, this.r2);\n      if (x.t > this.m.t + 1) {\n        x.t = this.m.t + 1;\n        x.clamp();\n      }\n      this.mu.multiplyUpperTo(this.r2, this.m.t + 1, this.q3);\n      this.m.multiplyLowerTo(this.q3, this.m.t + 1, this.r2);\n      while (x.compareTo(this.r2) < 0) {\n        x.dAddOffset(1, this.m.t + 1);\n      }\n      x.subTo(this.r2, x);\n      while (x.compareTo(this.m) >= 0) {\n        x.subTo(this.m, x);\n      }\n    };\n    // Barrett.prototype.mulTo = barrettMulTo;\n    // r = x*y mod m; x,y != r\n    Barrett.prototype.mulTo = function (x, y, r) {\n      x.multiplyTo(y, r);\n      this.reduce(r);\n    };\n    // Barrett.prototype.sqrTo = barrettSqrTo;\n    // r = x^2 mod m; x != r\n    Barrett.prototype.sqrTo = function (x, r) {\n      x.squareTo(r);\n      this.reduce(r);\n    };\n    return Barrett;\n  }();\n  //#endregion\n  //#endregion REDUCERS\n  // return new, unset BigInteger\n  function nbi() {return new BigInteger(null);}\n  function parseBigInt(str, r) {\n    return new BigInteger(str, r);\n  }\n  // am: Compute w_j += (x*this_i), propagate carries,\n  // c is initial carry, returns final carry.\n  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue\n  // We need to select the fastest one that works in this environment.\n  // am1: use a single mult and divide to get the high bits,\n  // max digit bits should be 26 because\n  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)\n  function am1(i, x, w, j, c, n) {\n    while (--n >= 0) {\n      var v = x * this[i++] + w[j] + c;\n      c = Math.floor(v / 0x4000000);\n      w[j++] = v & 0x3ffffff;\n    }\n    return c;\n  }\n  // am2 avoids a big mult-and-extract completely.\n  // Max digit bits should be <= 30 because we do bitwise ops\n  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)\n  function am2(i, x, w, j, c, n) {\n    var xl = x & 0x7fff;\n    var xh = x >> 15;\n    while (--n >= 0) {\n      var l = this[i] & 0x7fff;\n      var h = this[i++] >> 15;\n      var m = xh * l + h * xl;\n      l = xl * l + ((m & 0x7fff) << 15) + w[j] + (c & 0x3fffffff);\n      c = (l >>> 30) + (m >>> 15) + xh * h + (c >>> 30);\n      w[j++] = l & 0x3fffffff;\n    }\n    return c;\n  }\n  // Alternately, set max digit bits to 28 since some\n  // browsers slow down when dealing with 32-bit numbers.\n  function am3(i, x, w, j, c, n) {\n    var xl = x & 0x3fff;\n    var xh = x >> 14;\n    while (--n >= 0) {\n      var l = this[i] & 0x3fff;\n      var h = this[i++] >> 14;\n      var m = xh * l + h * xl;\n      l = xl * l + ((m & 0x3fff) << 14) + w[j] + c;\n      c = (l >> 28) + (m >> 14) + xh * h;\n      w[j++] = l & 0xfffffff;\n    }\n    return c;\n  }\n  if (j_lm && navigator.appName == \"Microsoft Internet Explorer\") {\n    BigInteger.prototype.am = am2;\n    dbits = 30;\n  } else\n  if (j_lm && navigator.appName != \"Netscape\") {\n    BigInteger.prototype.am = am1;\n    dbits = 26;\n  } else\n  {// Mozilla/Netscape seems to prefer am3\n    BigInteger.prototype.am = am3;\n    dbits = 28;\n  }\n  BigInteger.prototype.DB = dbits;\n  BigInteger.prototype.DM = (1 << dbits) - 1;\n  BigInteger.prototype.DV = 1 << dbits;\n  var BI_FP = 52;\n  BigInteger.prototype.FV = Math.pow(2, BI_FP);\n  BigInteger.prototype.F1 = BI_FP - dbits;\n  BigInteger.prototype.F2 = 2 * dbits - BI_FP;\n  // Digit conversions\n  var BI_RC = [];\n  var rr;\n  var vv;\n  rr = \"0\".charCodeAt(0);\n  for (vv = 0; vv <= 9; ++vv) {\n    BI_RC[rr++] = vv;\n  }\n  rr = \"a\".charCodeAt(0);\n  for (vv = 10; vv < 36; ++vv) {\n    BI_RC[rr++] = vv;\n  }\n  rr = \"A\".charCodeAt(0);\n  for (vv = 10; vv < 36; ++vv) {\n    BI_RC[rr++] = vv;\n  }\n  function intAt(s, i) {\n    var c = BI_RC[s.charCodeAt(i)];\n    return c == null ? -1 : c;\n  }\n  // return bigint initialized to value\n  function nbv(i) {\n    var r = nbi();\n    r.fromInt(i);\n    return r;\n  }\n  // returns bit length of the integer x\n  function nbits(x) {\n    var r = 1;\n    var t;\n    if ((t = x >>> 16) != 0) {\n      x = t;\n      r += 16;\n    }\n    if ((t = x >> 8) != 0) {\n      x = t;\n      r += 8;\n    }\n    if ((t = x >> 4) != 0) {\n      x = t;\n      r += 4;\n    }\n    if ((t = x >> 2) != 0) {\n      x = t;\n      r += 2;\n    }\n    if ((t = x >> 1) != 0) {\n      x = t;\n      r += 1;\n    }\n    return r;\n  }\n  // \"constants\"\n  BigInteger.ZERO = nbv(0);\n  BigInteger.ONE = nbv(1);\n\n  // prng4.js - uses Arcfour as a PRNG\n  var Arcfour = /** @class */function () {\n    function Arcfour() {\n      this.i = 0;\n      this.j = 0;\n      this.S = [];\n    }\n    // Arcfour.prototype.init = ARC4init;\n    // Initialize arcfour context from key, an array of ints, each from [0..255]\n    Arcfour.prototype.init = function (key) {\n      var i;\n      var j;\n      var t;\n      for (i = 0; i < 256; ++i) {\n        this.S[i] = i;\n      }\n      j = 0;\n      for (i = 0; i < 256; ++i) {\n        j = j + this.S[i] + key[i % key.length] & 255;\n        t = this.S[i];\n        this.S[i] = this.S[j];\n        this.S[j] = t;\n      }\n      this.i = 0;\n      this.j = 0;\n    };\n    // Arcfour.prototype.next = ARC4next;\n    Arcfour.prototype.next = function () {\n      var t;\n      this.i = this.i + 1 & 255;\n      this.j = this.j + this.S[this.i] & 255;\n      t = this.S[this.i];\n      this.S[this.i] = this.S[this.j];\n      this.S[this.j] = t;\n      return this.S[t + this.S[this.i] & 255];\n    };\n    return Arcfour;\n  }();\n  // Plug in your RNG constructor here\n  function prng_newstate() {\n    return new Arcfour();\n  }\n  // Pool size must be a multiple of 4 and greater than 32.\n  // An array of bytes the size of the pool will be passed to init()\n  var rng_psize = 256;\n\n  // Random number generator - requires a PRNG backend, e.g. prng4.js\n  var rng_state;\n  var rng_pool = null;\n  var rng_pptr;\n  // Initialize the pool with junk if needed.\n  if (rng_pool == null) {\n    rng_pool = [];\n    rng_pptr = 0;\n    var t = void 0;\n    if (window.crypto && window.crypto.getRandomValues) {\n      // Extract entropy (2048 bits) from RNG if available\n      var z = new Uint32Array(256);\n      window.crypto.getRandomValues(z);\n      for (t = 0; t < z.length; ++t) {\n        rng_pool[rng_pptr++] = z[t] & 255;\n      }\n    }\n    // Use mouse events for entropy, if we do not have enough entropy by the time\n    // we need it, entropy will be generated by Math.random.\n    var onMouseMoveListener_1 = function onMouseMoveListener_1(ev) {\n      this.count = this.count || 0;\n      if (this.count >= 256 || rng_pptr >= rng_psize) {\n        if (window.removeEventListener) {\n          window.removeEventListener(\"mousemove\", onMouseMoveListener_1, false);\n        } else\n        if (window.detachEvent) {\n          window.detachEvent(\"onmousemove\", onMouseMoveListener_1);\n        }\n        return;\n      }\n      try {\n        var mouseCoordinates = ev.x + ev.y;\n        rng_pool[rng_pptr++] = mouseCoordinates & 255;\n        this.count += 1;\n      }\n      catch (e) {\n        // Sometimes Firefox will deny permission to access event properties for some reason. Ignore.\n      }\n    };\n    if (window.addEventListener) {\n      window.addEventListener(\"mousemove\", onMouseMoveListener_1, false);\n    } else\n    if (window.attachEvent) {\n      window.attachEvent(\"onmousemove\", onMouseMoveListener_1);\n    }\n  }\n  function rng_get_byte() {\n    if (rng_state == null) {\n      rng_state = prng_newstate();\n      // At this point, we may not have collected enough entropy.  If not, fall back to Math.random\n      while (rng_pptr < rng_psize) {\n        var random = Math.floor(65536 * Math.random());\n        rng_pool[rng_pptr++] = random & 255;\n      }\n      rng_state.init(rng_pool);\n      for (rng_pptr = 0; rng_pptr < rng_pool.length; ++rng_pptr) {\n        rng_pool[rng_pptr] = 0;\n      }\n      rng_pptr = 0;\n    }\n    // TODO: allow reseeding after first request\n    return rng_state.next();\n  }\n  var SecureRandom = /** @class */function () {\n    function SecureRandom() {\n    }\n    SecureRandom.prototype.nextBytes = function (ba) {\n      for (var i = 0; i < ba.length; ++i) {\n        ba[i] = rng_get_byte();\n      }\n    };\n    return SecureRandom;\n  }();\n\n  // Depends on jsbn.js and rng.js\n  // function linebrk(s,n) {\n  //   var ret = \"\";\n  //   var i = 0;\n  //   while(i + n < s.length) {\n  //     ret += s.substring(i,i+n) + \"\\n\";\n  //     i += n;\n  //   }\n  //   return ret + s.substring(i,s.length);\n  // }\n  // function byte2Hex(b) {\n  //   if(b < 0x10)\n  //     return \"0\" + b.toString(16);\n  //   else\n  //     return b.toString(16);\n  // }\n  function pkcs1pad1(s, n) {\n    if (n < s.length + 22) {\n      __f__(\"error\", \"Message too long for RSA\", \" at node_modules\\\\jsencrypt\\\\bin\\\\jsencrypt.js:2837\");\n      return null;\n    }\n    var len = n - s.length - 6;\n    var filler = \"\";\n    for (var f = 0; f < len; f += 2) {\n      filler += \"ff\";\n    }\n    var m = \"0001\" + filler + \"00\" + s;\n    return parseBigInt(m, 16);\n  }\n  // PKCS#1 (type 2, random) pad input string s to n bytes, and return a bigint\n  function pkcs1pad2(s, n) {\n    if (n < s.length + 11) {// TODO: fix for utf-8\n      __f__(\"error\", \"Message too long for RSA\", \" at node_modules\\\\jsencrypt\\\\bin\\\\jsencrypt.js:2851\");\n      return null;\n    }\n    var ba = [];\n    var i = s.length - 1;\n    while (i >= 0 && n > 0) {\n      var c = s.charCodeAt(i--);\n      if (c < 128) {// encode using utf-8\n        ba[--n] = c;\n      } else\n      if (c > 127 && c < 2048) {\n        ba[--n] = c & 63 | 128;\n        ba[--n] = c >> 6 | 192;\n      } else\n      {\n        ba[--n] = c & 63 | 128;\n        ba[--n] = c >> 6 & 63 | 128;\n        ba[--n] = c >> 12 | 224;\n      }\n    }\n    ba[--n] = 0;\n    var rng = new SecureRandom();\n    var x = [];\n    while (n > 2) {// random non-zero pad\n      x[0] = 0;\n      while (x[0] == 0) {\n        rng.nextBytes(x);\n      }\n      ba[--n] = x[0];\n    }\n    ba[--n] = 2;\n    ba[--n] = 0;\n    return new BigInteger(ba);\n  }\n  // \"empty\" RSA key constructor\n  var RSAKey = /** @class */function () {\n    function RSAKey() {\n      this.n = null;\n      this.e = 0;\n      this.d = null;\n      this.p = null;\n      this.q = null;\n      this.dmp1 = null;\n      this.dmq1 = null;\n      this.coeff = null;\n    }\n    //#region PROTECTED\n    // protected\n    // RSAKey.prototype.doPublic = RSADoPublic;\n    // Perform raw public operation on \"x\": return x^e (mod n)\n    RSAKey.prototype.doPublic = function (x) {\n      return x.modPowInt(this.e, this.n);\n    };\n    // RSAKey.prototype.doPrivate = RSADoPrivate;\n    // Perform raw private operation on \"x\": return x^d (mod n)\n    RSAKey.prototype.doPrivate = function (x) {\n      if (this.p == null || this.q == null) {\n        return x.modPow(this.d, this.n);\n      }\n      // TODO: re-calculate any missing CRT params\n      var xp = x.mod(this.p).modPow(this.dmp1, this.p);\n      var xq = x.mod(this.q).modPow(this.dmq1, this.q);\n      while (xp.compareTo(xq) < 0) {\n        xp = xp.add(this.p);\n      }\n      return xp.subtract(xq).multiply(this.coeff).mod(this.p).multiply(this.q).add(xq);\n    };\n    //#endregion PROTECTED\n    //#region PUBLIC\n    // RSAKey.prototype.setPublic = RSASetPublic;\n    // Set the public key fields N and e from hex strings\n    RSAKey.prototype.setPublic = function (N, E) {\n      if (N != null && E != null && N.length > 0 && E.length > 0) {\n        this.n = parseBigInt(N, 16);\n        this.e = parseInt(E, 16);\n      } else\n      {\n        __f__(\"error\", \"Invalid RSA public key\", \" at node_modules\\\\jsencrypt\\\\bin\\\\jsencrypt.js:2928\");\n      }\n    };\n    // RSAKey.prototype.encrypt = RSAEncrypt;\n    // Return the PKCS#1 RSA encryption of \"text\" as an even-length hex string\n    RSAKey.prototype.encrypt = function (text) {\n      var m = pkcs1pad2(text, this.n.bitLength() + 7 >> 3);\n      if (m == null) {\n        return null;\n      }\n      var c = this.doPublic(m);\n      if (c == null) {\n        return null;\n      }\n      var h = c.toString(16);\n      if ((h.length & 1) == 0) {\n        return h;\n      } else\n      {\n        return \"0\" + h;\n      }\n    };\n    // RSAKey.prototype.setPrivate = RSASetPrivate;\n    // Set the private key fields N, e, and d from hex strings\n    RSAKey.prototype.setPrivate = function (N, E, D) {\n      if (N != null && E != null && N.length > 0 && E.length > 0) {\n        this.n = parseBigInt(N, 16);\n        this.e = parseInt(E, 16);\n        this.d = parseBigInt(D, 16);\n      } else\n      {\n        __f__(\"error\", \"Invalid RSA private key\", \" at node_modules\\\\jsencrypt\\\\bin\\\\jsencrypt.js:2959\");\n      }\n    };\n    // RSAKey.prototype.setPrivateEx = RSASetPrivateEx;\n    // Set the private key fields N, e, d and CRT params from hex strings\n    RSAKey.prototype.setPrivateEx = function (N, E, D, P, Q, DP, DQ, C) {\n      if (N != null && E != null && N.length > 0 && E.length > 0) {\n        this.n = parseBigInt(N, 16);\n        this.e = parseInt(E, 16);\n        this.d = parseBigInt(D, 16);\n        this.p = parseBigInt(P, 16);\n        this.q = parseBigInt(Q, 16);\n        this.dmp1 = parseBigInt(DP, 16);\n        this.dmq1 = parseBigInt(DQ, 16);\n        this.coeff = parseBigInt(C, 16);\n      } else\n      {\n        __f__(\"error\", \"Invalid RSA private key\", \" at node_modules\\\\jsencrypt\\\\bin\\\\jsencrypt.js:2976\");\n      }\n    };\n    // RSAKey.prototype.generate = RSAGenerate;\n    // Generate a new random private key B bits long, using public expt E\n    RSAKey.prototype.generate = function (B, E) {\n      var rng = new SecureRandom();\n      var qs = B >> 1;\n      this.e = parseInt(E, 16);\n      var ee = new BigInteger(E, 16);\n      for (;;) {\n        for (;;) {\n          this.p = new BigInteger(B - qs, 1, rng);\n          if (this.p.subtract(BigInteger.ONE).gcd(ee).compareTo(BigInteger.ONE) == 0 && this.p.isProbablePrime(10)) {\n            break;\n          }\n        }\n        for (;;) {\n          this.q = new BigInteger(qs, 1, rng);\n          if (this.q.subtract(BigInteger.ONE).gcd(ee).compareTo(BigInteger.ONE) == 0 && this.q.isProbablePrime(10)) {\n            break;\n          }\n        }\n        if (this.p.compareTo(this.q) <= 0) {\n          var t = this.p;\n          this.p = this.q;\n          this.q = t;\n        }\n        var p1 = this.p.subtract(BigInteger.ONE);\n        var q1 = this.q.subtract(BigInteger.ONE);\n        var phi = p1.multiply(q1);\n        if (phi.gcd(ee).compareTo(BigInteger.ONE) == 0) {\n          this.n = this.p.multiply(this.q);\n          this.d = ee.modInverse(phi);\n          this.dmp1 = this.d.mod(p1);\n          this.dmq1 = this.d.mod(q1);\n          this.coeff = this.q.modInverse(this.p);\n          break;\n        }\n      }\n    };\n    // RSAKey.prototype.decrypt = RSADecrypt;\n    // Return the PKCS#1 RSA decryption of \"ctext\".\n    // \"ctext\" is an even-length hex string and the output is a plain string.\n    RSAKey.prototype.decrypt = function (ctext) {\n      var c = parseBigInt(ctext, 16);\n      var m = this.doPrivate(c);\n      if (m == null) {\n        return null;\n      }\n      return pkcs1unpad2(m, this.n.bitLength() + 7 >> 3);\n    };\n    // Generate a new random private key B bits long, using public expt E\n    RSAKey.prototype.generateAsync = function (B, E, callback) {\n      var rng = new SecureRandom();\n      var qs = B >> 1;\n      this.e = parseInt(E, 16);\n      var ee = new BigInteger(E, 16);\n      var rsa = this;\n      // These functions have non-descript names because they were originally for(;;) loops.\n      // I don't know about cryptography to give them better names than loop1-4.\n      var loop1 = function loop1() {\n        var loop4 = function loop4() {\n          if (rsa.p.compareTo(rsa.q) <= 0) {\n            var t = rsa.p;\n            rsa.p = rsa.q;\n            rsa.q = t;\n          }\n          var p1 = rsa.p.subtract(BigInteger.ONE);\n          var q1 = rsa.q.subtract(BigInteger.ONE);\n          var phi = p1.multiply(q1);\n          if (phi.gcd(ee).compareTo(BigInteger.ONE) == 0) {\n            rsa.n = rsa.p.multiply(rsa.q);\n            rsa.d = ee.modInverse(phi);\n            rsa.dmp1 = rsa.d.mod(p1);\n            rsa.dmq1 = rsa.d.mod(q1);\n            rsa.coeff = rsa.q.modInverse(rsa.p);\n            setTimeout(function () {callback();}, 0); // escape\n          } else\n          {\n            setTimeout(loop1, 0);\n          }\n        };\n        var loop3 = function loop3() {\n          rsa.q = nbi();\n          rsa.q.fromNumberAsync(qs, 1, rng, function () {\n            rsa.q.subtract(BigInteger.ONE).gcda(ee, function (r) {\n              if (r.compareTo(BigInteger.ONE) == 0 && rsa.q.isProbablePrime(10)) {\n                setTimeout(loop4, 0);\n              } else\n              {\n                setTimeout(loop3, 0);\n              }\n            });\n          });\n        };\n        var loop2 = function loop2() {\n          rsa.p = nbi();\n          rsa.p.fromNumberAsync(B - qs, 1, rng, function () {\n            rsa.p.subtract(BigInteger.ONE).gcda(ee, function (r) {\n              if (r.compareTo(BigInteger.ONE) == 0 && rsa.p.isProbablePrime(10)) {\n                setTimeout(loop3, 0);\n              } else\n              {\n                setTimeout(loop2, 0);\n              }\n            });\n          });\n        };\n        setTimeout(loop2, 0);\n      };\n      setTimeout(loop1, 0);\n    };\n    RSAKey.prototype.sign = function (text, digestMethod, digestName) {\n      var header = getDigestHeader(digestName);\n      var digest = header + digestMethod(text).toString();\n      var m = pkcs1pad1(digest, this.n.bitLength() / 4);\n      if (m == null) {\n        return null;\n      }\n      var c = this.doPrivate(m);\n      if (c == null) {\n        return null;\n      }\n      var h = c.toString(16);\n      if ((h.length & 1) == 0) {\n        return h;\n      } else\n      {\n        return \"0\" + h;\n      }\n    };\n    RSAKey.prototype.verify = function (text, signature, digestMethod) {\n      var c = parseBigInt(signature, 16);\n      var m = this.doPublic(c);\n      if (m == null) {\n        return null;\n      }\n      var unpadded = m.toString(16).replace(/^1f+00/, \"\");\n      var digest = removeDigestHeader(unpadded);\n      return digest == digestMethod(text).toString();\n    };\n    return RSAKey;\n  }();\n  // Undo PKCS#1 (type 2, random) padding and, if valid, return the plaintext\n  function pkcs1unpad2(d, n) {\n    var b = d.toByteArray();\n    var i = 0;\n    while (i < b.length && b[i] == 0) {\n      ++i;\n    }\n    if (b.length - i != n - 1 || b[i] != 2) {\n      return null;\n    }\n    ++i;\n    while (b[i] != 0) {\n      if (++i >= b.length) {\n        return null;\n      }\n    }\n    var ret = \"\";\n    while (++i < b.length) {\n      var c = b[i] & 255;\n      if (c < 128) {// utf-8 decode\n        ret += String.fromCharCode(c);\n      } else\n      if (c > 191 && c < 224) {\n        ret += String.fromCharCode((c & 31) << 6 | b[i + 1] & 63);\n        ++i;\n      } else\n      {\n        ret += String.fromCharCode((c & 15) << 12 | (b[i + 1] & 63) << 6 | b[i + 2] & 63);\n        i += 2;\n      }\n    }\n    return ret;\n  }\n  // https://tools.ietf.org/html/rfc3447#page-43\n  var DIGEST_HEADERS = {\n    md2: \"3020300c06082a864886f70d020205000410\",\n    md5: \"3020300c06082a864886f70d020505000410\",\n    sha1: \"3021300906052b0e03021a05000414\",\n    sha224: \"302d300d06096086480165030402040500041c\",\n    sha256: \"3031300d060960864801650304020105000420\",\n    sha384: \"3041300d060960864801650304020205000430\",\n    sha512: \"3051300d060960864801650304020305000440\",\n    ripemd160: \"3021300906052b2403020105000414\" };\n\n  function getDigestHeader(name) {\n    return DIGEST_HEADERS[name] || \"\";\n  }\n  function removeDigestHeader(str) {\n    for (var name_1 in DIGEST_HEADERS) {\n      if (DIGEST_HEADERS.hasOwnProperty(name_1)) {\n        var header = DIGEST_HEADERS[name_1];\n        var len = header.length;\n        if (str.substr(0, len) == header) {\n          return str.substr(len);\n        }\n      }\n    }\n    return str;\n  }\n  // Return the PKCS#1 RSA encryption of \"text\" as a Base64-encoded string\n  // function RSAEncryptB64(text) {\n  //  var h = this.encrypt(text);\n  //  if(h) return hex2b64(h); else return null;\n  // }\n  // public\n  // RSAKey.prototype.encrypt_b64 = RSAEncryptB64;\n\n  /*!\r\n  Copyright (c) 2011, Yahoo! Inc. All rights reserved.\r\n  Code licensed under the BSD License:\r\n  http://developer.yahoo.com/yui/license.html\r\n  version: 2.9.0\r\n  */\n  var YAHOO = {};\n  YAHOO.lang = {\n    /**\r\n                  * Utility to set up the prototype, constructor and superclass properties to\r\n                  * support an inheritance strategy that can chain constructors and methods.\r\n                  * Static members will not be inherited.\r\n                  *\r\n                  * @method extend\r\n                  * @static\r\n                  * @param {Function} subc   the object to modify\r\n                  * @param {Function} superc the object to inherit\r\n                  * @param {Object} overrides  additional properties/methods to add to the\r\n                  *                              subclass prototype.  These will override the\r\n                  *                              matching items obtained from the superclass\r\n                  *                              if present.\r\n                  */\n    extend: function extend(subc, superc, overrides) {\n      if (!superc || !subc) {\n        throw new Error(\"YAHOO.lang.extend failed, please check that \" +\n        \"all dependencies are included.\");\n      }\n\n      var F = function F() {};\n      F.prototype = superc.prototype;\n      subc.prototype = new F();\n      subc.prototype.constructor = subc;\n      subc.superclass = superc.prototype;\n\n      if (superc.prototype.constructor == Object.prototype.constructor) {\n        superc.prototype.constructor = superc;\n      }\n\n      if (overrides) {\n        var i;\n        for (i in overrides) {\n          subc.prototype[i] = overrides[i];\n        }\n\n        /*\r\n           * IE will not enumerate native functions in a derived object even if the\r\n           * function was overridden.  This is a workaround for specific functions\r\n           * we care about on the Object prototype.\r\n           * @property _IEEnumFix\r\n           * @param {Function} r  the object to receive the augmentation\r\n           * @param {Function} s  the object that supplies the properties to augment\r\n           * @static\r\n           * @private\r\n           */\n        var _IEEnumFix = function _IEEnumFix() {},\n        ADD = [\"toString\", \"valueOf\"];\n        try {\n          if (/MSIE/.test(navigator.userAgent)) {\n            _IEEnumFix = function _IEEnumFix(r, s) {\n              for (i = 0; i < ADD.length; i = i + 1) {\n                var fname = ADD[i],f = s[fname];\n                if (typeof f === 'function' && f != Object.prototype[fname]) {\n                  r[fname] = f;\n                }\n              }\n            };\n          }\n        } catch (ex) {}_IEEnumFix(subc.prototype, overrides);\n      }\n    } };\n\n\n  /* asn1-1.0.13.js (c) 2013-2017 Kenji Urushima | kjur.github.com/jsrsasign/license\r\n          */\n\n  /**\r\n              * @fileOverview\r\n              * @name asn1-1.0.js\r\n              * @author Kenji Urushima kenji.urushima@gmail.com\r\n              * @version asn1 1.0.13 (2017-Jun-02)\r\n              * @since jsrsasign 2.1\r\n              * @license <a href=\"https://kjur.github.io/jsrsasign/license/\">MIT License</a>\r\n              */\n\n  /**\r\n                  * kjur's class library name space\r\n                  * <p>\r\n                  * This name space provides following name spaces:\r\n                  * <ul>\r\n                  * <li>{@link KJUR.asn1} - ASN.1 primitive hexadecimal encoder</li>\r\n                  * <li>{@link KJUR.asn1.x509} - ASN.1 structure for X.509 certificate and CRL</li>\r\n                  * <li>{@link KJUR.crypto} - Java Cryptographic Extension(JCE) style MessageDigest/Signature\r\n                  * class and utilities</li>\r\n                  * </ul>\r\n                  * </p>\r\n                  * NOTE: Please ignore method summary and document of this namespace. This caused by a bug of jsdoc2.\r\n                  * @name KJUR\r\n                  * @namespace kjur's class library name space\r\n                  */\n  var KJUR = {};\n\n  /**\r\n                  * kjur's ASN.1 class library name space\r\n                  * <p>\r\n                  * This is ITU-T X.690 ASN.1 DER encoder class library and\r\n                  * class structure and methods is very similar to\r\n                  * org.bouncycastle.asn1 package of\r\n                  * well known BouncyCaslte Cryptography Library.\r\n                  * <h4>PROVIDING ASN.1 PRIMITIVES</h4>\r\n                  * Here are ASN.1 DER primitive classes.\r\n                  * <ul>\r\n                  * <li>0x01 {@link KJUR.asn1.DERBoolean}</li>\r\n                  * <li>0x02 {@link KJUR.asn1.DERInteger}</li>\r\n                  * <li>0x03 {@link KJUR.asn1.DERBitString}</li>\r\n                  * <li>0x04 {@link KJUR.asn1.DEROctetString}</li>\r\n                  * <li>0x05 {@link KJUR.asn1.DERNull}</li>\r\n                  * <li>0x06 {@link KJUR.asn1.DERObjectIdentifier}</li>\r\n                  * <li>0x0a {@link KJUR.asn1.DEREnumerated}</li>\r\n                  * <li>0x0c {@link KJUR.asn1.DERUTF8String}</li>\r\n                  * <li>0x12 {@link KJUR.asn1.DERNumericString}</li>\r\n                  * <li>0x13 {@link KJUR.asn1.DERPrintableString}</li>\r\n                  * <li>0x14 {@link KJUR.asn1.DERTeletexString}</li>\r\n                  * <li>0x16 {@link KJUR.asn1.DERIA5String}</li>\r\n                  * <li>0x17 {@link KJUR.asn1.DERUTCTime}</li>\r\n                  * <li>0x18 {@link KJUR.asn1.DERGeneralizedTime}</li>\r\n                  * <li>0x30 {@link KJUR.asn1.DERSequence}</li>\r\n                  * <li>0x31 {@link KJUR.asn1.DERSet}</li>\r\n                  * </ul>\r\n                  * <h4>OTHER ASN.1 CLASSES</h4>\r\n                  * <ul>\r\n                  * <li>{@link KJUR.asn1.ASN1Object}</li>\r\n                  * <li>{@link KJUR.asn1.DERAbstractString}</li>\r\n                  * <li>{@link KJUR.asn1.DERAbstractTime}</li>\r\n                  * <li>{@link KJUR.asn1.DERAbstractStructured}</li>\r\n                  * <li>{@link KJUR.asn1.DERTaggedObject}</li>\r\n                  * </ul>\r\n                  * <h4>SUB NAME SPACES</h4>\r\n                  * <ul>\r\n                  * <li>{@link KJUR.asn1.cades} - CAdES long term signature format</li>\r\n                  * <li>{@link KJUR.asn1.cms} - Cryptographic Message Syntax</li>\r\n                  * <li>{@link KJUR.asn1.csr} - Certificate Signing Request (CSR/PKCS#10)</li>\r\n                  * <li>{@link KJUR.asn1.tsp} - RFC 3161 Timestamping Protocol Format</li>\r\n                  * <li>{@link KJUR.asn1.x509} - RFC 5280 X.509 certificate and CRL</li>\r\n                  * </ul>\r\n                  * </p>\r\n                  * NOTE: Please ignore method summary and document of this namespace.\r\n                  * This caused by a bug of jsdoc2.\r\n                  * @name KJUR.asn1\r\n                  * @namespace\r\n                  */\n  if (typeof KJUR.asn1 == \"undefined\" || !KJUR.asn1) KJUR.asn1 = {};\n\n  /**\r\n                                                                      * ASN1 utilities class\r\n                                                                      * @name KJUR.asn1.ASN1Util\r\n                                                                      * @class ASN1 utilities class\r\n                                                                      * @since asn1 1.0.2\r\n                                                                      */\n  KJUR.asn1.ASN1Util = new function () {\n    this.integerToByteHex = function (i) {\n      var h = i.toString(16);\n      if (h.length % 2 == 1) h = '0' + h;\n      return h;\n    };\n    this.bigIntToMinTwosComplementsHex = function (bigIntegerValue) {\n      var h = bigIntegerValue.toString(16);\n      if (h.substr(0, 1) != '-') {\n        if (h.length % 2 == 1) {\n          h = '0' + h;\n        } else {\n          if (!h.match(/^[0-7]/)) {\n            h = '00' + h;\n          }\n        }\n      } else {\n        var hPos = h.substr(1);\n        var xorLen = hPos.length;\n        if (xorLen % 2 == 1) {\n          xorLen += 1;\n        } else {\n          if (!h.match(/^[0-7]/)) {\n            xorLen += 2;\n          }\n        }\n        var hMask = '';\n        for (var i = 0; i < xorLen; i++) {\n          hMask += 'f';\n        }\n        var biMask = new BigInteger(hMask, 16);\n        var biNeg = biMask.xor(bigIntegerValue).add(BigInteger.ONE);\n        h = biNeg.toString(16).replace(/^-/, '');\n      }\n      return h;\n    };\n    /**\r\n        * get PEM string from hexadecimal data and header string\r\n        * @name getPEMStringFromHex\r\n        * @memberOf KJUR.asn1.ASN1Util\r\n        * @function\r\n        * @param {String} dataHex hexadecimal string of PEM body\r\n        * @param {String} pemHeader PEM header string (ex. 'RSA PRIVATE KEY')\r\n        * @return {String} PEM formatted string of input data\r\n        * @description\r\n        * This method converts a hexadecimal string to a PEM string with\r\n        * a specified header. Its line break will be CRLF(\"\\r\\n\").\r\n        * @example\r\n        * var pem  = KJUR.asn1.ASN1Util.getPEMStringFromHex('616161', 'RSA PRIVATE KEY');\r\n        * // value of pem will be:\r\n        * -----BEGIN PRIVATE KEY-----\r\n        * YWFh\r\n        * -----END PRIVATE KEY-----\r\n        */\n    this.getPEMStringFromHex = function (dataHex, pemHeader) {\n      return hextopem(dataHex, pemHeader);\n    };\n\n    /**\r\n        * generate ASN1Object specifed by JSON parameters\r\n        * @name newObject\r\n        * @memberOf KJUR.asn1.ASN1Util\r\n        * @function\r\n        * @param {Array} param JSON parameter to generate ASN1Object\r\n        * @return {KJUR.asn1.ASN1Object} generated object\r\n        * @since asn1 1.0.3\r\n        * @description\r\n        * generate any ASN1Object specified by JSON param\r\n        * including ASN.1 primitive or structured.\r\n        * Generally 'param' can be described as follows:\r\n        * <blockquote>\r\n        * {TYPE-OF-ASNOBJ: ASN1OBJ-PARAMETER}\r\n        * </blockquote>\r\n        * 'TYPE-OF-ASN1OBJ' can be one of following symbols:\r\n        * <ul>\r\n        * <li>'bool' - DERBoolean</li>\r\n        * <li>'int' - DERInteger</li>\r\n        * <li>'bitstr' - DERBitString</li>\r\n        * <li>'octstr' - DEROctetString</li>\r\n        * <li>'null' - DERNull</li>\r\n        * <li>'oid' - DERObjectIdentifier</li>\r\n        * <li>'enum' - DEREnumerated</li>\r\n        * <li>'utf8str' - DERUTF8String</li>\r\n        * <li>'numstr' - DERNumericString</li>\r\n        * <li>'prnstr' - DERPrintableString</li>\r\n        * <li>'telstr' - DERTeletexString</li>\r\n        * <li>'ia5str' - DERIA5String</li>\r\n        * <li>'utctime' - DERUTCTime</li>\r\n        * <li>'gentime' - DERGeneralizedTime</li>\r\n        * <li>'seq' - DERSequence</li>\r\n        * <li>'set' - DERSet</li>\r\n        * <li>'tag' - DERTaggedObject</li>\r\n        * </ul>\r\n        * @example\r\n        * newObject({'prnstr': 'aaa'});\r\n        * newObject({'seq': [{'int': 3}, {'prnstr': 'aaa'}]})\r\n        * // ASN.1 Tagged Object\r\n        * newObject({'tag': {'tag': 'a1',\r\n        *                    'explicit': true,\r\n        *                    'obj': {'seq': [{'int': 3}, {'prnstr': 'aaa'}]}}});\r\n        * // more simple representation of ASN.1 Tagged Object\r\n        * newObject({'tag': ['a1',\r\n        *                    true,\r\n        *                    {'seq': [\r\n        *                      {'int': 3},\r\n        *                      {'prnstr': 'aaa'}]}\r\n        *                   ]});\r\n        */\n    this.newObject = function (param) {\n      var _KJUR = KJUR,\n      _KJUR_asn1 = _KJUR.asn1,\n      _DERBoolean = _KJUR_asn1.DERBoolean,\n      _DERInteger = _KJUR_asn1.DERInteger,\n      _DERBitString = _KJUR_asn1.DERBitString,\n      _DEROctetString = _KJUR_asn1.DEROctetString,\n      _DERNull = _KJUR_asn1.DERNull,\n      _DERObjectIdentifier = _KJUR_asn1.DERObjectIdentifier,\n      _DEREnumerated = _KJUR_asn1.DEREnumerated,\n      _DERUTF8String = _KJUR_asn1.DERUTF8String,\n      _DERNumericString = _KJUR_asn1.DERNumericString,\n      _DERPrintableString = _KJUR_asn1.DERPrintableString,\n      _DERTeletexString = _KJUR_asn1.DERTeletexString,\n      _DERIA5String = _KJUR_asn1.DERIA5String,\n      _DERUTCTime = _KJUR_asn1.DERUTCTime,\n      _DERGeneralizedTime = _KJUR_asn1.DERGeneralizedTime,\n      _DERSequence = _KJUR_asn1.DERSequence,\n      _DERSet = _KJUR_asn1.DERSet,\n      _DERTaggedObject = _KJUR_asn1.DERTaggedObject,\n      _newObject = _KJUR_asn1.ASN1Util.newObject;\n\n      var keys = Object.keys(param);\n      if (keys.length != 1)\n      throw \"key of param shall be only one.\";\n      var key = keys[0];\n\n      if (\":bool:int:bitstr:octstr:null:oid:enum:utf8str:numstr:prnstr:telstr:ia5str:utctime:gentime:seq:set:tag:\".indexOf(\":\" + key + \":\") == -1)\n      throw \"undefined key: \" + key;\n\n      if (key == \"bool\") return new _DERBoolean(param[key]);\n      if (key == \"int\") return new _DERInteger(param[key]);\n      if (key == \"bitstr\") return new _DERBitString(param[key]);\n      if (key == \"octstr\") return new _DEROctetString(param[key]);\n      if (key == \"null\") return new _DERNull(param[key]);\n      if (key == \"oid\") return new _DERObjectIdentifier(param[key]);\n      if (key == \"enum\") return new _DEREnumerated(param[key]);\n      if (key == \"utf8str\") return new _DERUTF8String(param[key]);\n      if (key == \"numstr\") return new _DERNumericString(param[key]);\n      if (key == \"prnstr\") return new _DERPrintableString(param[key]);\n      if (key == \"telstr\") return new _DERTeletexString(param[key]);\n      if (key == \"ia5str\") return new _DERIA5String(param[key]);\n      if (key == \"utctime\") return new _DERUTCTime(param[key]);\n      if (key == \"gentime\") return new _DERGeneralizedTime(param[key]);\n\n      if (key == \"seq\") {\n        var paramList = param[key];\n        var a = [];\n        for (var i = 0; i < paramList.length; i++) {\n          var asn1Obj = _newObject(paramList[i]);\n          a.push(asn1Obj);\n        }\n        return new _DERSequence({ 'array': a });\n      }\n\n      if (key == \"set\") {\n        var paramList = param[key];\n        var a = [];\n        for (var i = 0; i < paramList.length; i++) {\n          var asn1Obj = _newObject(paramList[i]);\n          a.push(asn1Obj);\n        }\n        return new _DERSet({ 'array': a });\n      }\n\n      if (key == \"tag\") {\n        var tagParam = param[key];\n        if (Object.prototype.toString.call(tagParam) === '[object Array]' &&\n        tagParam.length == 3) {\n          var obj = _newObject(tagParam[2]);\n          return new _DERTaggedObject({ tag: tagParam[0],\n            explicit: tagParam[1],\n            obj: obj });\n        } else {\n          var newParam = {};\n          if (tagParam.explicit !== undefined)\n          newParam.explicit = tagParam.explicit;\n          if (tagParam.tag !== undefined)\n          newParam.tag = tagParam.tag;\n          if (tagParam.obj === undefined)\n          throw \"obj shall be specified for 'tag'.\";\n          newParam.obj = _newObject(tagParam.obj);\n          return new _DERTaggedObject(newParam);\n        }\n      }\n    };\n\n    /**\r\n        * get encoded hexadecimal string of ASN1Object specifed by JSON parameters\r\n        * @name jsonToASN1HEX\r\n        * @memberOf KJUR.asn1.ASN1Util\r\n        * @function\r\n        * @param {Array} param JSON parameter to generate ASN1Object\r\n        * @return hexadecimal string of ASN1Object\r\n        * @since asn1 1.0.4\r\n        * @description\r\n        * As for ASN.1 object representation of JSON object,\r\n        * please see {@link newObject}.\r\n        * @example\r\n        * jsonToASN1HEX({'prnstr': 'aaa'});\r\n        */\n    this.jsonToASN1HEX = function (param) {\n      var asn1Obj = this.newObject(param);\n      return asn1Obj.getEncodedHex();\n    };\n  }();\n\n  /**\r\n        * get dot noted oid number string from hexadecimal value of OID\r\n        * @name oidHexToInt\r\n        * @memberOf KJUR.asn1.ASN1Util\r\n        * @function\r\n        * @param {String} hex hexadecimal value of object identifier\r\n        * @return {String} dot noted string of object identifier\r\n        * @since jsrsasign 4.8.3 asn1 1.0.7\r\n        * @description\r\n        * This static method converts from hexadecimal string representation of\r\n        * ASN.1 value of object identifier to oid number string.\r\n        * @example\r\n        * KJUR.asn1.ASN1Util.oidHexToInt('550406') &rarr; \"2.5.4.6\"\r\n        */\n  KJUR.asn1.ASN1Util.oidHexToInt = function (hex) {\n    var s = \"\";\n    var i01 = parseInt(hex.substr(0, 2), 16);\n    var i0 = Math.floor(i01 / 40);\n    var i1 = i01 % 40;\n    var s = i0 + \".\" + i1;\n\n    var binbuf = \"\";\n    for (var i = 2; i < hex.length; i += 2) {\n      var value = parseInt(hex.substr(i, 2), 16);\n      var bin = (\"00000000\" + value.toString(2)).slice(-8);\n      binbuf = binbuf + bin.substr(1, 7);\n      if (bin.substr(0, 1) == \"0\") {\n        var bi = new BigInteger(binbuf, 2);\n        s = s + \".\" + bi.toString(10);\n        binbuf = \"\";\n      }\n    }\n    return s;\n  };\n\n  /**\r\n      * get hexadecimal value of object identifier from dot noted oid value\r\n      * @name oidIntToHex\r\n      * @memberOf KJUR.asn1.ASN1Util\r\n      * @function\r\n      * @param {String} oidString dot noted string of object identifier\r\n      * @return {String} hexadecimal value of object identifier\r\n      * @since jsrsasign 4.8.3 asn1 1.0.7\r\n      * @description\r\n      * This static method converts from object identifier value string.\r\n      * to hexadecimal string representation of it.\r\n      * @example\r\n      * KJUR.asn1.ASN1Util.oidIntToHex(\"2.5.4.6\") &rarr; \"550406\"\r\n      */\n  KJUR.asn1.ASN1Util.oidIntToHex = function (oidString) {\n    var itox = function itox(i) {\n      var h = i.toString(16);\n      if (h.length == 1) h = '0' + h;\n      return h;\n    };\n\n    var roidtox = function roidtox(roid) {\n      var h = '';\n      var bi = new BigInteger(roid, 10);\n      var b = bi.toString(2);\n      var padLen = 7 - b.length % 7;\n      if (padLen == 7) padLen = 0;\n      var bPad = '';\n      for (var i = 0; i < padLen; i++) {bPad += '0';}\n      b = bPad + b;\n      for (var i = 0; i < b.length - 1; i += 7) {\n        var b8 = b.substr(i, 7);\n        if (i != b.length - 7) b8 = '1' + b8;\n        h += itox(parseInt(b8, 2));\n      }\n      return h;\n    };\n\n    if (!oidString.match(/^[0-9.]+$/)) {\n      throw \"malformed oid string: \" + oidString;\n    }\n    var h = '';\n    var a = oidString.split('.');\n    var i0 = parseInt(a[0]) * 40 + parseInt(a[1]);\n    h += itox(i0);\n    a.splice(0, 2);\n    for (var i = 0; i < a.length; i++) {\n      h += roidtox(a[i]);\n    }\n    return h;\n  };\n\n\n  // ********************************************************************\n  //  Abstract ASN.1 Classes\n  // ********************************************************************\n\n  // ********************************************************************\n\n  /**\r\n   * base class for ASN.1 DER encoder object\r\n   * @name KJUR.asn1.ASN1Object\r\n   * @class base class for ASN.1 DER encoder object\r\n   * @property {Boolean} isModified flag whether internal data was changed\r\n   * @property {String} hTLV hexadecimal string of ASN.1 TLV\r\n   * @property {String} hT hexadecimal string of ASN.1 TLV tag(T)\r\n   * @property {String} hL hexadecimal string of ASN.1 TLV length(L)\r\n   * @property {String} hV hexadecimal string of ASN.1 TLV value(V)\r\n   * @description\r\n   */\n  KJUR.asn1.ASN1Object = function () {\n    var hV = '';\n\n    /**\r\n                  * get hexadecimal ASN.1 TLV length(L) bytes from TLV value(V)\r\n                  * @name getLengthHexFromValue\r\n                  * @memberOf KJUR.asn1.ASN1Object#\r\n                  * @function\r\n                  * @return {String} hexadecimal string of ASN.1 TLV length(L)\r\n                  */\n    this.getLengthHexFromValue = function () {\n      if (typeof this.hV == \"undefined\" || this.hV == null) {\n        throw \"this.hV is null or undefined.\";\n      }\n      if (this.hV.length % 2 == 1) {\n        throw \"value hex must be even length: n=\" + hV.length + \",v=\" + this.hV;\n      }\n      var n = this.hV.length / 2;\n      var hN = n.toString(16);\n      if (hN.length % 2 == 1) {\n        hN = \"0\" + hN;\n      }\n      if (n < 128) {\n        return hN;\n      } else {\n        var hNlen = hN.length / 2;\n        if (hNlen > 15) {\n          throw \"ASN.1 length too long to represent by 8x: n = \" + n.toString(16);\n        }\n        var head = 128 + hNlen;\n        return head.toString(16) + hN;\n      }\n    };\n\n    /**\r\n        * get hexadecimal string of ASN.1 TLV bytes\r\n        * @name getEncodedHex\r\n        * @memberOf KJUR.asn1.ASN1Object#\r\n        * @function\r\n        * @return {String} hexadecimal string of ASN.1 TLV\r\n        */\n    this.getEncodedHex = function () {\n      if (this.hTLV == null || this.isModified) {\n        this.hV = this.getFreshValueHex();\n        this.hL = this.getLengthHexFromValue();\n        this.hTLV = this.hT + this.hL + this.hV;\n        this.isModified = false;\n        //alert(\"first time: \" + this.hTLV);\n      }\n      return this.hTLV;\n    };\n\n    /**\r\n        * get hexadecimal string of ASN.1 TLV value(V) bytes\r\n        * @name getValueHex\r\n        * @memberOf KJUR.asn1.ASN1Object#\r\n        * @function\r\n        * @return {String} hexadecimal string of ASN.1 TLV value(V) bytes\r\n        */\n    this.getValueHex = function () {\n      this.getEncodedHex();\n      return this.hV;\n    };\n\n    this.getFreshValueHex = function () {\n      return '';\n    };\n  };\n\n  // == BEGIN DERAbstractString ================================================\n  /**\r\n   * base class for ASN.1 DER string classes\r\n   * @name KJUR.asn1.DERAbstractString\r\n   * @class base class for ASN.1 DER string classes\r\n   * @param {Array} params associative array of parameters (ex. {'str': 'aaa'})\r\n   * @property {String} s internal string of value\r\n   * @extends KJUR.asn1.ASN1Object\r\n   * @description\r\n   * <br/>\r\n   * As for argument 'params' for constructor, you can specify one of\r\n   * following properties:\r\n   * <ul>\r\n   * <li>str - specify initial ASN.1 value(V) by a string</li>\r\n   * <li>hex - specify initial ASN.1 value(V) by a hexadecimal string</li>\r\n   * </ul>\r\n   * NOTE: 'params' can be omitted.\r\n   */\n  KJUR.asn1.DERAbstractString = function (params) {\n    KJUR.asn1.DERAbstractString.superclass.constructor.call(this);\n\n    /**\r\n                                                                    * get string value of this string object\r\n                                                                    * @name getString\r\n                                                                    * @memberOf KJUR.asn1.DERAbstractString#\r\n                                                                    * @function\r\n                                                                    * @return {String} string value of this string object\r\n                                                                    */\n    this.getString = function () {\n      return this.s;\n    };\n\n    /**\r\n        * set value by a string\r\n        * @name setString\r\n        * @memberOf KJUR.asn1.DERAbstractString#\r\n        * @function\r\n        * @param {String} newS value by a string to set\r\n        */\n    this.setString = function (newS) {\n      this.hTLV = null;\n      this.isModified = true;\n      this.s = newS;\n      this.hV = stohex(this.s);\n    };\n\n    /**\r\n        * set value by a hexadecimal string\r\n        * @name setStringHex\r\n        * @memberOf KJUR.asn1.DERAbstractString#\r\n        * @function\r\n        * @param {String} newHexString value by a hexadecimal string to set\r\n        */\n    this.setStringHex = function (newHexString) {\n      this.hTLV = null;\n      this.isModified = true;\n      this.s = null;\n      this.hV = newHexString;\n    };\n\n    this.getFreshValueHex = function () {\n      return this.hV;\n    };\n\n    if (typeof params != \"undefined\") {\n      if (typeof params == \"string\") {\n        this.setString(params);\n      } else if (typeof params['str'] != \"undefined\") {\n        this.setString(params['str']);\n      } else if (typeof params['hex'] != \"undefined\") {\n        this.setStringHex(params['hex']);\n      }\n    }\n  };\n  YAHOO.lang.extend(KJUR.asn1.DERAbstractString, KJUR.asn1.ASN1Object);\n  // == END   DERAbstractString ================================================\n\n  // == BEGIN DERAbstractTime ==================================================\n  /**\r\n   * base class for ASN.1 DER Generalized/UTCTime class\r\n   * @name KJUR.asn1.DERAbstractTime\r\n   * @class base class for ASN.1 DER Generalized/UTCTime class\r\n   * @param {Array} params associative array of parameters (ex. {'str': '130430235959Z'})\r\n   * @extends KJUR.asn1.ASN1Object\r\n   * @description\r\n   * @see KJUR.asn1.ASN1Object - superclass\r\n   */\n  KJUR.asn1.DERAbstractTime = function (params) {\n    KJUR.asn1.DERAbstractTime.superclass.constructor.call(this);\n\n    // --- PRIVATE METHODS --------------------\n    this.localDateToUTC = function (d) {\n      utc = d.getTime() + d.getTimezoneOffset() * 60000;\n      var utcDate = new Date(utc);\n      return utcDate;\n    };\n\n    /*\r\n        * format date string by Data object\r\n        * @name formatDate\r\n        * @memberOf KJUR.asn1.AbstractTime;\r\n        * @param {Date} dateObject\r\n        * @param {string} type 'utc' or 'gen'\r\n        * @param {boolean} withMillis flag for with millisections or not\r\n        * @description\r\n        * 'withMillis' flag is supported from asn1 1.0.6.\r\n        */\n    this.formatDate = function (dateObject, type, withMillis) {\n      var pad = this.zeroPadding;\n      var d = this.localDateToUTC(dateObject);\n      var year = String(d.getFullYear());\n      if (type == 'utc') year = year.substr(2, 2);\n      var month = pad(String(d.getMonth() + 1), 2);\n      var day = pad(String(d.getDate()), 2);\n      var hour = pad(String(d.getHours()), 2);\n      var min = pad(String(d.getMinutes()), 2);\n      var sec = pad(String(d.getSeconds()), 2);\n      var s = year + month + day + hour + min + sec;\n      if (withMillis === true) {\n        var millis = d.getMilliseconds();\n        if (millis != 0) {\n          var sMillis = pad(String(millis), 3);\n          sMillis = sMillis.replace(/[0]+$/, \"\");\n          s = s + \".\" + sMillis;\n        }\n      }\n      return s + \"Z\";\n    };\n\n    this.zeroPadding = function (s, len) {\n      if (s.length >= len) return s;\n      return new Array(len - s.length + 1).join('0') + s;\n    };\n\n    // --- PUBLIC METHODS --------------------\n    /**\r\n     * get string value of this string object\r\n     * @name getString\r\n     * @memberOf KJUR.asn1.DERAbstractTime#\r\n     * @function\r\n     * @return {String} string value of this time object\r\n     */\n    this.getString = function () {\n      return this.s;\n    };\n\n    /**\r\n        * set value by a string\r\n        * @name setString\r\n        * @memberOf KJUR.asn1.DERAbstractTime#\r\n        * @function\r\n        * @param {String} newS value by a string to set such like \"130430235959Z\"\r\n        */\n    this.setString = function (newS) {\n      this.hTLV = null;\n      this.isModified = true;\n      this.s = newS;\n      this.hV = stohex(newS);\n    };\n\n    /**\r\n        * set value by a Date object\r\n        * @name setByDateValue\r\n        * @memberOf KJUR.asn1.DERAbstractTime#\r\n        * @function\r\n        * @param {Integer} year year of date (ex. 2013)\r\n        * @param {Integer} month month of date between 1 and 12 (ex. 12)\r\n        * @param {Integer} day day of month\r\n        * @param {Integer} hour hours of date\r\n        * @param {Integer} min minutes of date\r\n        * @param {Integer} sec seconds of date\r\n        */\n    this.setByDateValue = function (year, month, day, hour, min, sec) {\n      var dateObject = new Date(Date.UTC(year, month - 1, day, hour, min, sec, 0));\n      this.setByDate(dateObject);\n    };\n\n    this.getFreshValueHex = function () {\n      return this.hV;\n    };\n  };\n  YAHOO.lang.extend(KJUR.asn1.DERAbstractTime, KJUR.asn1.ASN1Object);\n  // == END   DERAbstractTime ==================================================\n\n  // == BEGIN DERAbstractStructured ============================================\n  /**\r\n   * base class for ASN.1 DER structured class\r\n   * @name KJUR.asn1.DERAbstractStructured\r\n   * @class base class for ASN.1 DER structured class\r\n   * @property {Array} asn1Array internal array of ASN1Object\r\n   * @extends KJUR.asn1.ASN1Object\r\n   * @description\r\n   * @see KJUR.asn1.ASN1Object - superclass\r\n   */\n  KJUR.asn1.DERAbstractStructured = function (params) {\n    KJUR.asn1.DERAbstractString.superclass.constructor.call(this);\n\n    /**\r\n                                                                    * set value by array of ASN1Object\r\n                                                                    * @name setByASN1ObjectArray\r\n                                                                    * @memberOf KJUR.asn1.DERAbstractStructured#\r\n                                                                    * @function\r\n                                                                    * @param {array} asn1ObjectArray array of ASN1Object to set\r\n                                                                    */\n    this.setByASN1ObjectArray = function (asn1ObjectArray) {\n      this.hTLV = null;\n      this.isModified = true;\n      this.asn1Array = asn1ObjectArray;\n    };\n\n    /**\r\n        * append an ASN1Object to internal array\r\n        * @name appendASN1Object\r\n        * @memberOf KJUR.asn1.DERAbstractStructured#\r\n        * @function\r\n        * @param {ASN1Object} asn1Object to add\r\n        */\n    this.appendASN1Object = function (asn1Object) {\n      this.hTLV = null;\n      this.isModified = true;\n      this.asn1Array.push(asn1Object);\n    };\n\n    this.asn1Array = new Array();\n    if (typeof params != \"undefined\") {\n      if (typeof params['array'] != \"undefined\") {\n        this.asn1Array = params['array'];\n      }\n    }\n  };\n  YAHOO.lang.extend(KJUR.asn1.DERAbstractStructured, KJUR.asn1.ASN1Object);\n\n\n  // ********************************************************************\n  //  ASN.1 Object Classes\n  // ********************************************************************\n\n  // ********************************************************************\n  /**\r\n   * class for ASN.1 DER Boolean\r\n   * @name KJUR.asn1.DERBoolean\r\n   * @class class for ASN.1 DER Boolean\r\n   * @extends KJUR.asn1.ASN1Object\r\n   * @description\r\n   * @see KJUR.asn1.ASN1Object - superclass\r\n   */\n  KJUR.asn1.DERBoolean = function () {\n    KJUR.asn1.DERBoolean.superclass.constructor.call(this);\n    this.hT = \"01\";\n    this.hTLV = \"0101ff\";\n  };\n  YAHOO.lang.extend(KJUR.asn1.DERBoolean, KJUR.asn1.ASN1Object);\n\n  // ********************************************************************\n  /**\r\n   * class for ASN.1 DER Integer\r\n   * @name KJUR.asn1.DERInteger\r\n   * @class class for ASN.1 DER Integer\r\n   * @extends KJUR.asn1.ASN1Object\r\n   * @description\r\n   * <br/>\r\n   * As for argument 'params' for constructor, you can specify one of\r\n   * following properties:\r\n   * <ul>\r\n   * <li>int - specify initial ASN.1 value(V) by integer value</li>\r\n   * <li>bigint - specify initial ASN.1 value(V) by BigInteger object</li>\r\n   * <li>hex - specify initial ASN.1 value(V) by a hexadecimal string</li>\r\n   * </ul>\r\n   * NOTE: 'params' can be omitted.\r\n   */\n  KJUR.asn1.DERInteger = function (params) {\n    KJUR.asn1.DERInteger.superclass.constructor.call(this);\n    this.hT = \"02\";\n\n    /**\r\n                     * set value by Tom Wu's BigInteger object\r\n                     * @name setByBigInteger\r\n                     * @memberOf KJUR.asn1.DERInteger#\r\n                     * @function\r\n                     * @param {BigInteger} bigIntegerValue to set\r\n                     */\n    this.setByBigInteger = function (bigIntegerValue) {\n      this.hTLV = null;\n      this.isModified = true;\n      this.hV = KJUR.asn1.ASN1Util.bigIntToMinTwosComplementsHex(bigIntegerValue);\n    };\n\n    /**\r\n        * set value by integer value\r\n        * @name setByInteger\r\n        * @memberOf KJUR.asn1.DERInteger\r\n        * @function\r\n        * @param {Integer} integer value to set\r\n        */\n    this.setByInteger = function (intValue) {\n      var bi = new BigInteger(String(intValue), 10);\n      this.setByBigInteger(bi);\n    };\n\n    /**\r\n        * set value by integer value\r\n        * @name setValueHex\r\n        * @memberOf KJUR.asn1.DERInteger#\r\n        * @function\r\n        * @param {String} hexadecimal string of integer value\r\n        * @description\r\n        * <br/>\r\n        * NOTE: Value shall be represented by minimum octet length of\r\n        * two's complement representation.\r\n        * @example\r\n        * new KJUR.asn1.DERInteger(123);\r\n        * new KJUR.asn1.DERInteger({'int': 123});\r\n        * new KJUR.asn1.DERInteger({'hex': '1fad'});\r\n        */\n    this.setValueHex = function (newHexString) {\n      this.hV = newHexString;\n    };\n\n    this.getFreshValueHex = function () {\n      return this.hV;\n    };\n\n    if (typeof params != \"undefined\") {\n      if (typeof params['bigint'] != \"undefined\") {\n        this.setByBigInteger(params['bigint']);\n      } else if (typeof params['int'] != \"undefined\") {\n        this.setByInteger(params['int']);\n      } else if (typeof params == \"number\") {\n        this.setByInteger(params);\n      } else if (typeof params['hex'] != \"undefined\") {\n        this.setValueHex(params['hex']);\n      }\n    }\n  };\n  YAHOO.lang.extend(KJUR.asn1.DERInteger, KJUR.asn1.ASN1Object);\n\n  // ********************************************************************\n  /**\r\n   * class for ASN.1 DER encoded BitString primitive\r\n   * @name KJUR.asn1.DERBitString\r\n   * @class class for ASN.1 DER encoded BitString primitive\r\n   * @extends KJUR.asn1.ASN1Object\r\n   * @description\r\n   * <br/>\r\n   * As for argument 'params' for constructor, you can specify one of\r\n   * following properties:\r\n   * <ul>\r\n   * <li>bin - specify binary string (ex. '10111')</li>\r\n   * <li>array - specify array of boolean (ex. [true,false,true,true])</li>\r\n   * <li>hex - specify hexadecimal string of ASN.1 value(V) including unused bits</li>\r\n   * <li>obj - specify {@link KJUR.asn1.ASN1Util.newObject}\r\n   * argument for \"BitString encapsulates\" structure.</li>\r\n   * </ul>\r\n   * NOTE1: 'params' can be omitted.<br/>\r\n   * NOTE2: 'obj' parameter have been supported since\r\n   * asn1 1.0.11, jsrsasign 6.1.1 (2016-Sep-25).<br/>\r\n   * @example\r\n   * // default constructor\r\n   * o = new KJUR.asn1.DERBitString();\r\n   * // initialize with binary string\r\n   * o = new KJUR.asn1.DERBitString({bin: \"1011\"});\r\n   * // initialize with boolean array\r\n   * o = new KJUR.asn1.DERBitString({array: [true,false,true,true]});\r\n   * // initialize with hexadecimal string (04 is unused bits)\r\n   * o = new KJUR.asn1.DEROctetString({hex: \"04bac0\"});\r\n   * // initialize with ASN1Util.newObject argument for encapsulated\r\n   * o = new KJUR.asn1.DERBitString({obj: {seq: [{int: 3}, {prnstr: 'aaa'}]}});\r\n   * // above generates a ASN.1 data like this:\r\n   * // BIT STRING, encapsulates {\r\n   * //   SEQUENCE {\r\n   * //     INTEGER 3\r\n   * //     PrintableString 'aaa'\r\n   * //     }\r\n   * //   }\r\n   */\n  KJUR.asn1.DERBitString = function (params) {\n    if (params !== undefined && typeof params.obj !== \"undefined\") {\n      var o = KJUR.asn1.ASN1Util.newObject(params.obj);\n      params.hex = \"00\" + o.getEncodedHex();\n    }\n    KJUR.asn1.DERBitString.superclass.constructor.call(this);\n    this.hT = \"03\";\n\n    /**\r\n                     * set ASN.1 value(V) by a hexadecimal string including unused bits\r\n                     * @name setHexValueIncludingUnusedBits\r\n                     * @memberOf KJUR.asn1.DERBitString#\r\n                     * @function\r\n                     * @param {String} newHexStringIncludingUnusedBits\r\n                     */\n    this.setHexValueIncludingUnusedBits = function (newHexStringIncludingUnusedBits) {\n      this.hTLV = null;\n      this.isModified = true;\n      this.hV = newHexStringIncludingUnusedBits;\n    };\n\n    /**\r\n        * set ASN.1 value(V) by unused bit and hexadecimal string of value\r\n        * @name setUnusedBitsAndHexValue\r\n        * @memberOf KJUR.asn1.DERBitString#\r\n        * @function\r\n        * @param {Integer} unusedBits\r\n        * @param {String} hValue\r\n        */\n    this.setUnusedBitsAndHexValue = function (unusedBits, hValue) {\n      if (unusedBits < 0 || 7 < unusedBits) {\n        throw \"unused bits shall be from 0 to 7: u = \" + unusedBits;\n      }\n      var hUnusedBits = \"0\" + unusedBits;\n      this.hTLV = null;\n      this.isModified = true;\n      this.hV = hUnusedBits + hValue;\n    };\n\n    /**\r\n        * set ASN.1 DER BitString by binary string<br/>\r\n        * @name setByBinaryString\r\n        * @memberOf KJUR.asn1.DERBitString#\r\n        * @function\r\n        * @param {String} binaryString binary value string (i.e. '10111')\r\n        * @description\r\n        * Its unused bits will be calculated automatically by length of\r\n        * 'binaryValue'. <br/>\r\n        * NOTE: Trailing zeros '0' will be ignored.\r\n        * @example\r\n        * o = new KJUR.asn1.DERBitString();\r\n        * o.setByBooleanArray(\"01011\");\r\n        */\n    this.setByBinaryString = function (binaryString) {\n      binaryString = binaryString.replace(/0+$/, '');\n      var unusedBits = 8 - binaryString.length % 8;\n      if (unusedBits == 8) unusedBits = 0;\n      for (var i = 0; i <= unusedBits; i++) {\n        binaryString += '0';\n      }\n      var h = '';\n      for (var i = 0; i < binaryString.length - 1; i += 8) {\n        var b = binaryString.substr(i, 8);\n        var x = parseInt(b, 2).toString(16);\n        if (x.length == 1) x = '0' + x;\n        h += x;\n      }\n      this.hTLV = null;\n      this.isModified = true;\n      this.hV = '0' + unusedBits + h;\n    };\n\n    /**\r\n        * set ASN.1 TLV value(V) by an array of boolean<br/>\r\n        * @name setByBooleanArray\r\n        * @memberOf KJUR.asn1.DERBitString#\r\n        * @function\r\n        * @param {array} booleanArray array of boolean (ex. [true, false, true])\r\n        * @description\r\n        * NOTE: Trailing falses will be ignored in the ASN.1 DER Object.\r\n        * @example\r\n        * o = new KJUR.asn1.DERBitString();\r\n        * o.setByBooleanArray([false, true, false, true, true]);\r\n        */\n    this.setByBooleanArray = function (booleanArray) {\n      var s = '';\n      for (var i = 0; i < booleanArray.length; i++) {\n        if (booleanArray[i] == true) {\n          s += '1';\n        } else {\n          s += '0';\n        }\n      }\n      this.setByBinaryString(s);\n    };\n\n    /**\r\n        * generate an array of falses with specified length<br/>\r\n        * @name newFalseArray\r\n        * @memberOf KJUR.asn1.DERBitString\r\n        * @function\r\n        * @param {Integer} nLength length of array to generate\r\n        * @return {array} array of boolean falses\r\n        * @description\r\n        * This static method may be useful to initialize boolean array.\r\n        * @example\r\n        * o = new KJUR.asn1.DERBitString();\r\n        * o.newFalseArray(3) &rarr; [false, false, false]\r\n        */\n    this.newFalseArray = function (nLength) {\n      var a = new Array(nLength);\n      for (var i = 0; i < nLength; i++) {\n        a[i] = false;\n      }\n      return a;\n    };\n\n    this.getFreshValueHex = function () {\n      return this.hV;\n    };\n\n    if (typeof params != \"undefined\") {\n      if (typeof params == \"string\" && params.toLowerCase().match(/^[0-9a-f]+$/)) {\n        this.setHexValueIncludingUnusedBits(params);\n      } else if (typeof params['hex'] != \"undefined\") {\n        this.setHexValueIncludingUnusedBits(params['hex']);\n      } else if (typeof params['bin'] != \"undefined\") {\n        this.setByBinaryString(params['bin']);\n      } else if (typeof params['array'] != \"undefined\") {\n        this.setByBooleanArray(params['array']);\n      }\n    }\n  };\n  YAHOO.lang.extend(KJUR.asn1.DERBitString, KJUR.asn1.ASN1Object);\n\n  // ********************************************************************\n  /**\r\n   * class for ASN.1 DER OctetString<br/>\r\n   * @name KJUR.asn1.DEROctetString\r\n   * @class class for ASN.1 DER OctetString\r\n   * @param {Array} params associative array of parameters (ex. {'str': 'aaa'})\r\n   * @extends KJUR.asn1.DERAbstractString\r\n   * @description\r\n   * This class provides ASN.1 OctetString simple type.<br/>\r\n   * Supported \"params\" attributes are:\r\n   * <ul>\r\n   * <li>str - to set a string as a value</li>\r\n   * <li>hex - to set a hexadecimal string as a value</li>\r\n   * <li>obj - to set a encapsulated ASN.1 value by JSON object\r\n   * which is defined in {@link KJUR.asn1.ASN1Util.newObject}</li>\r\n   * </ul>\r\n   * NOTE: A parameter 'obj' have been supported\r\n   * for \"OCTET STRING, encapsulates\" structure.\r\n   * since asn1 1.0.11, jsrsasign 6.1.1 (2016-Sep-25).\r\n   * @see KJUR.asn1.DERAbstractString - superclass\r\n   * @example\r\n   * // default constructor\r\n   * o = new KJUR.asn1.DEROctetString();\r\n   * // initialize with string\r\n   * o = new KJUR.asn1.DEROctetString({str: \"aaa\"});\r\n   * // initialize with hexadecimal string\r\n   * o = new KJUR.asn1.DEROctetString({hex: \"616161\"});\r\n   * // initialize with ASN1Util.newObject argument\r\n   * o = new KJUR.asn1.DEROctetString({obj: {seq: [{int: 3}, {prnstr: 'aaa'}]}});\r\n   * // above generates a ASN.1 data like this:\r\n   * // OCTET STRING, encapsulates {\r\n   * //   SEQUENCE {\r\n   * //     INTEGER 3\r\n   * //     PrintableString 'aaa'\r\n   * //     }\r\n   * //   }\r\n   */\n  KJUR.asn1.DEROctetString = function (params) {\n    if (params !== undefined && typeof params.obj !== \"undefined\") {\n      var o = KJUR.asn1.ASN1Util.newObject(params.obj);\n      params.hex = o.getEncodedHex();\n    }\n    KJUR.asn1.DEROctetString.superclass.constructor.call(this, params);\n    this.hT = \"04\";\n  };\n  YAHOO.lang.extend(KJUR.asn1.DEROctetString, KJUR.asn1.DERAbstractString);\n\n  // ********************************************************************\n  /**\r\n   * class for ASN.1 DER Null\r\n   * @name KJUR.asn1.DERNull\r\n   * @class class for ASN.1 DER Null\r\n   * @extends KJUR.asn1.ASN1Object\r\n   * @description\r\n   * @see KJUR.asn1.ASN1Object - superclass\r\n   */\n  KJUR.asn1.DERNull = function () {\n    KJUR.asn1.DERNull.superclass.constructor.call(this);\n    this.hT = \"05\";\n    this.hTLV = \"0500\";\n  };\n  YAHOO.lang.extend(KJUR.asn1.DERNull, KJUR.asn1.ASN1Object);\n\n  // ********************************************************************\n  /**\r\n   * class for ASN.1 DER ObjectIdentifier\r\n   * @name KJUR.asn1.DERObjectIdentifier\r\n   * @class class for ASN.1 DER ObjectIdentifier\r\n   * @param {Array} params associative array of parameters (ex. {'oid': '2.5.4.5'})\r\n   * @extends KJUR.asn1.ASN1Object\r\n   * @description\r\n   * <br/>\r\n   * As for argument 'params' for constructor, you can specify one of\r\n   * following properties:\r\n   * <ul>\r\n   * <li>oid - specify initial ASN.1 value(V) by a oid string (ex. 2.5.4.13)</li>\r\n   * <li>hex - specify initial ASN.1 value(V) by a hexadecimal string</li>\r\n   * </ul>\r\n   * NOTE: 'params' can be omitted.\r\n   */\n  KJUR.asn1.DERObjectIdentifier = function (params) {\n    var itox = function itox(i) {\n      var h = i.toString(16);\n      if (h.length == 1) h = '0' + h;\n      return h;\n    };\n    var roidtox = function roidtox(roid) {\n      var h = '';\n      var bi = new BigInteger(roid, 10);\n      var b = bi.toString(2);\n      var padLen = 7 - b.length % 7;\n      if (padLen == 7) padLen = 0;\n      var bPad = '';\n      for (var i = 0; i < padLen; i++) {bPad += '0';}\n      b = bPad + b;\n      for (var i = 0; i < b.length - 1; i += 7) {\n        var b8 = b.substr(i, 7);\n        if (i != b.length - 7) b8 = '1' + b8;\n        h += itox(parseInt(b8, 2));\n      }\n      return h;\n    };\n\n    KJUR.asn1.DERObjectIdentifier.superclass.constructor.call(this);\n    this.hT = \"06\";\n\n    /**\r\n                     * set value by a hexadecimal string\r\n                     * @name setValueHex\r\n                     * @memberOf KJUR.asn1.DERObjectIdentifier#\r\n                     * @function\r\n                     * @param {String} newHexString hexadecimal value of OID bytes\r\n                     */\n    this.setValueHex = function (newHexString) {\n      this.hTLV = null;\n      this.isModified = true;\n      this.s = null;\n      this.hV = newHexString;\n    };\n\n    /**\r\n        * set value by a OID string<br/>\r\n        * @name setValueOidString\r\n        * @memberOf KJUR.asn1.DERObjectIdentifier#\r\n        * @function\r\n        * @param {String} oidString OID string (ex. 2.5.4.13)\r\n        * @example\r\n        * o = new KJUR.asn1.DERObjectIdentifier();\r\n        * o.setValueOidString(\"2.5.4.13\");\r\n        */\n    this.setValueOidString = function (oidString) {\n      if (!oidString.match(/^[0-9.]+$/)) {\n        throw \"malformed oid string: \" + oidString;\n      }\n      var h = '';\n      var a = oidString.split('.');\n      var i0 = parseInt(a[0]) * 40 + parseInt(a[1]);\n      h += itox(i0);\n      a.splice(0, 2);\n      for (var i = 0; i < a.length; i++) {\n        h += roidtox(a[i]);\n      }\n      this.hTLV = null;\n      this.isModified = true;\n      this.s = null;\n      this.hV = h;\n    };\n\n    /**\r\n        * set value by a OID name\r\n        * @name setValueName\r\n        * @memberOf KJUR.asn1.DERObjectIdentifier#\r\n        * @function\r\n        * @param {String} oidName OID name (ex. 'serverAuth')\r\n        * @since 1.0.1\r\n        * @description\r\n        * OID name shall be defined in 'KJUR.asn1.x509.OID.name2oidList'.\r\n        * Otherwise raise error.\r\n        * @example\r\n        * o = new KJUR.asn1.DERObjectIdentifier();\r\n        * o.setValueName(\"serverAuth\");\r\n        */\n    this.setValueName = function (oidName) {\n      var oid = KJUR.asn1.x509.OID.name2oid(oidName);\n      if (oid !== '') {\n        this.setValueOidString(oid);\n      } else {\n        throw \"DERObjectIdentifier oidName undefined: \" + oidName;\n      }\n    };\n\n    this.getFreshValueHex = function () {\n      return this.hV;\n    };\n\n    if (params !== undefined) {\n      if (typeof params === \"string\") {\n        if (params.match(/^[0-2].[0-9.]+$/)) {\n          this.setValueOidString(params);\n        } else {\n          this.setValueName(params);\n        }\n      } else if (params.oid !== undefined) {\n        this.setValueOidString(params.oid);\n      } else if (params.hex !== undefined) {\n        this.setValueHex(params.hex);\n      } else if (params.name !== undefined) {\n        this.setValueName(params.name);\n      }\n    }\n  };\n  YAHOO.lang.extend(KJUR.asn1.DERObjectIdentifier, KJUR.asn1.ASN1Object);\n\n  // ********************************************************************\n  /**\r\n   * class for ASN.1 DER Enumerated\r\n   * @name KJUR.asn1.DEREnumerated\r\n   * @class class for ASN.1 DER Enumerated\r\n   * @extends KJUR.asn1.ASN1Object\r\n   * @description\r\n   * <br/>\r\n   * As for argument 'params' for constructor, you can specify one of\r\n   * following properties:\r\n   * <ul>\r\n   * <li>int - specify initial ASN.1 value(V) by integer value</li>\r\n   * <li>hex - specify initial ASN.1 value(V) by a hexadecimal string</li>\r\n   * </ul>\r\n   * NOTE: 'params' can be omitted.\r\n   * @example\r\n   * new KJUR.asn1.DEREnumerated(123);\r\n   * new KJUR.asn1.DEREnumerated({int: 123});\r\n   * new KJUR.asn1.DEREnumerated({hex: '1fad'});\r\n   */\n  KJUR.asn1.DEREnumerated = function (params) {\n    KJUR.asn1.DEREnumerated.superclass.constructor.call(this);\n    this.hT = \"0a\";\n\n    /**\r\n                     * set value by Tom Wu's BigInteger object\r\n                     * @name setByBigInteger\r\n                     * @memberOf KJUR.asn1.DEREnumerated#\r\n                     * @function\r\n                     * @param {BigInteger} bigIntegerValue to set\r\n                     */\n    this.setByBigInteger = function (bigIntegerValue) {\n      this.hTLV = null;\n      this.isModified = true;\n      this.hV = KJUR.asn1.ASN1Util.bigIntToMinTwosComplementsHex(bigIntegerValue);\n    };\n\n    /**\r\n        * set value by integer value\r\n        * @name setByInteger\r\n        * @memberOf KJUR.asn1.DEREnumerated#\r\n        * @function\r\n        * @param {Integer} integer value to set\r\n        */\n    this.setByInteger = function (intValue) {\n      var bi = new BigInteger(String(intValue), 10);\n      this.setByBigInteger(bi);\n    };\n\n    /**\r\n        * set value by integer value\r\n        * @name setValueHex\r\n        * @memberOf KJUR.asn1.DEREnumerated#\r\n        * @function\r\n        * @param {String} hexadecimal string of integer value\r\n        * @description\r\n        * <br/>\r\n        * NOTE: Value shall be represented by minimum octet length of\r\n        * two's complement representation.\r\n        */\n    this.setValueHex = function (newHexString) {\n      this.hV = newHexString;\n    };\n\n    this.getFreshValueHex = function () {\n      return this.hV;\n    };\n\n    if (typeof params != \"undefined\") {\n      if (typeof params['int'] != \"undefined\") {\n        this.setByInteger(params['int']);\n      } else if (typeof params == \"number\") {\n        this.setByInteger(params);\n      } else if (typeof params['hex'] != \"undefined\") {\n        this.setValueHex(params['hex']);\n      }\n    }\n  };\n  YAHOO.lang.extend(KJUR.asn1.DEREnumerated, KJUR.asn1.ASN1Object);\n\n  // ********************************************************************\n  /**\r\n   * class for ASN.1 DER UTF8String\r\n   * @name KJUR.asn1.DERUTF8String\r\n   * @class class for ASN.1 DER UTF8String\r\n   * @param {Array} params associative array of parameters (ex. {'str': 'aaa'})\r\n   * @extends KJUR.asn1.DERAbstractString\r\n   * @description\r\n   * @see KJUR.asn1.DERAbstractString - superclass\r\n   */\n  KJUR.asn1.DERUTF8String = function (params) {\n    KJUR.asn1.DERUTF8String.superclass.constructor.call(this, params);\n    this.hT = \"0c\";\n  };\n  YAHOO.lang.extend(KJUR.asn1.DERUTF8String, KJUR.asn1.DERAbstractString);\n\n  // ********************************************************************\n  /**\r\n   * class for ASN.1 DER NumericString\r\n   * @name KJUR.asn1.DERNumericString\r\n   * @class class for ASN.1 DER NumericString\r\n   * @param {Array} params associative array of parameters (ex. {'str': 'aaa'})\r\n   * @extends KJUR.asn1.DERAbstractString\r\n   * @description\r\n   * @see KJUR.asn1.DERAbstractString - superclass\r\n   */\n  KJUR.asn1.DERNumericString = function (params) {\n    KJUR.asn1.DERNumericString.superclass.constructor.call(this, params);\n    this.hT = \"12\";\n  };\n  YAHOO.lang.extend(KJUR.asn1.DERNumericString, KJUR.asn1.DERAbstractString);\n\n  // ********************************************************************\n  /**\r\n   * class for ASN.1 DER PrintableString\r\n   * @name KJUR.asn1.DERPrintableString\r\n   * @class class for ASN.1 DER PrintableString\r\n   * @param {Array} params associative array of parameters (ex. {'str': 'aaa'})\r\n   * @extends KJUR.asn1.DERAbstractString\r\n   * @description\r\n   * @see KJUR.asn1.DERAbstractString - superclass\r\n   */\n  KJUR.asn1.DERPrintableString = function (params) {\n    KJUR.asn1.DERPrintableString.superclass.constructor.call(this, params);\n    this.hT = \"13\";\n  };\n  YAHOO.lang.extend(KJUR.asn1.DERPrintableString, KJUR.asn1.DERAbstractString);\n\n  // ********************************************************************\n  /**\r\n   * class for ASN.1 DER TeletexString\r\n   * @name KJUR.asn1.DERTeletexString\r\n   * @class class for ASN.1 DER TeletexString\r\n   * @param {Array} params associative array of parameters (ex. {'str': 'aaa'})\r\n   * @extends KJUR.asn1.DERAbstractString\r\n   * @description\r\n   * @see KJUR.asn1.DERAbstractString - superclass\r\n   */\n  KJUR.asn1.DERTeletexString = function (params) {\n    KJUR.asn1.DERTeletexString.superclass.constructor.call(this, params);\n    this.hT = \"14\";\n  };\n  YAHOO.lang.extend(KJUR.asn1.DERTeletexString, KJUR.asn1.DERAbstractString);\n\n  // ********************************************************************\n  /**\r\n   * class for ASN.1 DER IA5String\r\n   * @name KJUR.asn1.DERIA5String\r\n   * @class class for ASN.1 DER IA5String\r\n   * @param {Array} params associative array of parameters (ex. {'str': 'aaa'})\r\n   * @extends KJUR.asn1.DERAbstractString\r\n   * @description\r\n   * @see KJUR.asn1.DERAbstractString - superclass\r\n   */\n  KJUR.asn1.DERIA5String = function (params) {\n    KJUR.asn1.DERIA5String.superclass.constructor.call(this, params);\n    this.hT = \"16\";\n  };\n  YAHOO.lang.extend(KJUR.asn1.DERIA5String, KJUR.asn1.DERAbstractString);\n\n  // ********************************************************************\n  /**\r\n   * class for ASN.1 DER UTCTime\r\n   * @name KJUR.asn1.DERUTCTime\r\n   * @class class for ASN.1 DER UTCTime\r\n   * @param {Array} params associative array of parameters (ex. {'str': '130430235959Z'})\r\n   * @extends KJUR.asn1.DERAbstractTime\r\n   * @description\r\n   * <br/>\r\n   * As for argument 'params' for constructor, you can specify one of\r\n   * following properties:\r\n   * <ul>\r\n   * <li>str - specify initial ASN.1 value(V) by a string (ex.'130430235959Z')</li>\r\n   * <li>hex - specify initial ASN.1 value(V) by a hexadecimal string</li>\r\n   * <li>date - specify Date object.</li>\r\n   * </ul>\r\n   * NOTE: 'params' can be omitted.\r\n   * <h4>EXAMPLES</h4>\r\n   * @example\r\n   * d1 = new KJUR.asn1.DERUTCTime();\r\n   * d1.setString('130430125959Z');\r\n   *\r\n   * d2 = new KJUR.asn1.DERUTCTime({'str': '130430125959Z'});\r\n   * d3 = new KJUR.asn1.DERUTCTime({'date': new Date(Date.UTC(2015, 0, 31, 0, 0, 0, 0))});\r\n   * d4 = new KJUR.asn1.DERUTCTime('130430125959Z');\r\n   */\n  KJUR.asn1.DERUTCTime = function (params) {\n    KJUR.asn1.DERUTCTime.superclass.constructor.call(this, params);\n    this.hT = \"17\";\n\n    /**\r\n                     * set value by a Date object<br/>\r\n                     * @name setByDate\r\n                     * @memberOf KJUR.asn1.DERUTCTime#\r\n                     * @function\r\n                     * @param {Date} dateObject Date object to set ASN.1 value(V)\r\n                     * @example\r\n                     * o = new KJUR.asn1.DERUTCTime();\r\n                     * o.setByDate(new Date(\"2016/12/31\"));\r\n                     */\n    this.setByDate = function (dateObject) {\n      this.hTLV = null;\n      this.isModified = true;\n      this.date = dateObject;\n      this.s = this.formatDate(this.date, 'utc');\n      this.hV = stohex(this.s);\n    };\n\n    this.getFreshValueHex = function () {\n      if (typeof this.date == \"undefined\" && typeof this.s == \"undefined\") {\n        this.date = new Date();\n        this.s = this.formatDate(this.date, 'utc');\n        this.hV = stohex(this.s);\n      }\n      return this.hV;\n    };\n\n    if (params !== undefined) {\n      if (params.str !== undefined) {\n        this.setString(params.str);\n      } else if (typeof params == \"string\" && params.match(/^[0-9]{12}Z$/)) {\n        this.setString(params);\n      } else if (params.hex !== undefined) {\n        this.setStringHex(params.hex);\n      } else if (params.date !== undefined) {\n        this.setByDate(params.date);\n      }\n    }\n  };\n  YAHOO.lang.extend(KJUR.asn1.DERUTCTime, KJUR.asn1.DERAbstractTime);\n\n  // ********************************************************************\n  /**\r\n   * class for ASN.1 DER GeneralizedTime\r\n   * @name KJUR.asn1.DERGeneralizedTime\r\n   * @class class for ASN.1 DER GeneralizedTime\r\n   * @param {Array} params associative array of parameters (ex. {'str': '20130430235959Z'})\r\n   * @property {Boolean} withMillis flag to show milliseconds or not\r\n   * @extends KJUR.asn1.DERAbstractTime\r\n   * @description\r\n   * <br/>\r\n   * As for argument 'params' for constructor, you can specify one of\r\n   * following properties:\r\n   * <ul>\r\n   * <li>str - specify initial ASN.1 value(V) by a string (ex.'20130430235959Z')</li>\r\n   * <li>hex - specify initial ASN.1 value(V) by a hexadecimal string</li>\r\n   * <li>date - specify Date object.</li>\r\n   * <li>millis - specify flag to show milliseconds (from 1.0.6)</li>\r\n   * </ul>\r\n   * NOTE1: 'params' can be omitted.\r\n   * NOTE2: 'withMillis' property is supported from asn1 1.0.6.\r\n   */\n  KJUR.asn1.DERGeneralizedTime = function (params) {\n    KJUR.asn1.DERGeneralizedTime.superclass.constructor.call(this, params);\n    this.hT = \"18\";\n    this.withMillis = false;\n\n    /**\r\n                              * set value by a Date object\r\n                              * @name setByDate\r\n                              * @memberOf KJUR.asn1.DERGeneralizedTime#\r\n                              * @function\r\n                              * @param {Date} dateObject Date object to set ASN.1 value(V)\r\n                              * @example\r\n                              * When you specify UTC time, use 'Date.UTC' method like this:<br/>\r\n                              * o1 = new DERUTCTime();\r\n                              * o1.setByDate(date);\r\n                              *\r\n                              * date = new Date(Date.UTC(2015, 0, 31, 23, 59, 59, 0)); #2015JAN31 23:59:59\r\n                              */\n    this.setByDate = function (dateObject) {\n      this.hTLV = null;\n      this.isModified = true;\n      this.date = dateObject;\n      this.s = this.formatDate(this.date, 'gen', this.withMillis);\n      this.hV = stohex(this.s);\n    };\n\n    this.getFreshValueHex = function () {\n      if (this.date === undefined && this.s === undefined) {\n        this.date = new Date();\n        this.s = this.formatDate(this.date, 'gen', this.withMillis);\n        this.hV = stohex(this.s);\n      }\n      return this.hV;\n    };\n\n    if (params !== undefined) {\n      if (params.str !== undefined) {\n        this.setString(params.str);\n      } else if (typeof params == \"string\" && params.match(/^[0-9]{14}Z$/)) {\n        this.setString(params);\n      } else if (params.hex !== undefined) {\n        this.setStringHex(params.hex);\n      } else if (params.date !== undefined) {\n        this.setByDate(params.date);\n      }\n      if (params.millis === true) {\n        this.withMillis = true;\n      }\n    }\n  };\n  YAHOO.lang.extend(KJUR.asn1.DERGeneralizedTime, KJUR.asn1.DERAbstractTime);\n\n  // ********************************************************************\n  /**\r\n   * class for ASN.1 DER Sequence\r\n   * @name KJUR.asn1.DERSequence\r\n   * @class class for ASN.1 DER Sequence\r\n   * @extends KJUR.asn1.DERAbstractStructured\r\n   * @description\r\n   * <br/>\r\n   * As for argument 'params' for constructor, you can specify one of\r\n   * following properties:\r\n   * <ul>\r\n   * <li>array - specify array of ASN1Object to set elements of content</li>\r\n   * </ul>\r\n   * NOTE: 'params' can be omitted.\r\n   */\n  KJUR.asn1.DERSequence = function (params) {\n    KJUR.asn1.DERSequence.superclass.constructor.call(this, params);\n    this.hT = \"30\";\n    this.getFreshValueHex = function () {\n      var h = '';\n      for (var i = 0; i < this.asn1Array.length; i++) {\n        var asn1Obj = this.asn1Array[i];\n        h += asn1Obj.getEncodedHex();\n      }\n      this.hV = h;\n      return this.hV;\n    };\n  };\n  YAHOO.lang.extend(KJUR.asn1.DERSequence, KJUR.asn1.DERAbstractStructured);\n\n  // ********************************************************************\n  /**\r\n   * class for ASN.1 DER Set\r\n   * @name KJUR.asn1.DERSet\r\n   * @class class for ASN.1 DER Set\r\n   * @extends KJUR.asn1.DERAbstractStructured\r\n   * @description\r\n   * <br/>\r\n   * As for argument 'params' for constructor, you can specify one of\r\n   * following properties:\r\n   * <ul>\r\n   * <li>array - specify array of ASN1Object to set elements of content</li>\r\n   * <li>sortflag - flag for sort (default: true). ASN.1 BER is not sorted in 'SET OF'.</li>\r\n   * </ul>\r\n   * NOTE1: 'params' can be omitted.<br/>\r\n   * NOTE2: sortflag is supported since 1.0.5.\r\n   */\n  KJUR.asn1.DERSet = function (params) {\n    KJUR.asn1.DERSet.superclass.constructor.call(this, params);\n    this.hT = \"31\";\n    this.sortFlag = true; // item shall be sorted only in ASN.1 DER\n    this.getFreshValueHex = function () {\n      var a = new Array();\n      for (var i = 0; i < this.asn1Array.length; i++) {\n        var asn1Obj = this.asn1Array[i];\n        a.push(asn1Obj.getEncodedHex());\n      }\n      if (this.sortFlag == true) a.sort();\n      this.hV = a.join('');\n      return this.hV;\n    };\n\n    if (typeof params != \"undefined\") {\n      if (typeof params.sortflag != \"undefined\" &&\n      params.sortflag == false)\n      this.sortFlag = false;\n    }\n  };\n  YAHOO.lang.extend(KJUR.asn1.DERSet, KJUR.asn1.DERAbstractStructured);\n\n  // ********************************************************************\n  /**\r\n   * class for ASN.1 DER TaggedObject\r\n   * @name KJUR.asn1.DERTaggedObject\r\n   * @class class for ASN.1 DER TaggedObject\r\n   * @extends KJUR.asn1.ASN1Object\r\n   * @description\r\n   * <br/>\r\n   * Parameter 'tagNoNex' is ASN.1 tag(T) value for this object.\r\n   * For example, if you find '[1]' tag in a ASN.1 dump,\r\n   * 'tagNoHex' will be 'a1'.\r\n   * <br/>\r\n   * As for optional argument 'params' for constructor, you can specify *ANY* of\r\n   * following properties:\r\n   * <ul>\r\n   * <li>explicit - specify true if this is explicit tag otherwise false\r\n   *     (default is 'true').</li>\r\n   * <li>tag - specify tag (default is 'a0' which means [0])</li>\r\n   * <li>obj - specify ASN1Object which is tagged</li>\r\n   * </ul>\r\n   * @example\r\n   * d1 = new KJUR.asn1.DERUTF8String({'str':'a'});\r\n   * d2 = new KJUR.asn1.DERTaggedObject({'obj': d1});\r\n   * hex = d2.getEncodedHex();\r\n   */\n  KJUR.asn1.DERTaggedObject = function (params) {\n    KJUR.asn1.DERTaggedObject.superclass.constructor.call(this);\n    this.hT = \"a0\";\n    this.hV = '';\n    this.isExplicit = true;\n    this.asn1Object = null;\n\n    /**\r\n                             * set value by an ASN1Object\r\n                             * @name setString\r\n                             * @memberOf KJUR.asn1.DERTaggedObject#\r\n                             * @function\r\n                             * @param {Boolean} isExplicitFlag flag for explicit/implicit tag\r\n                             * @param {Integer} tagNoHex hexadecimal string of ASN.1 tag\r\n                             * @param {ASN1Object} asn1Object ASN.1 to encapsulate\r\n                             */\n    this.setASN1Object = function (isExplicitFlag, tagNoHex, asn1Object) {\n      this.hT = tagNoHex;\n      this.isExplicit = isExplicitFlag;\n      this.asn1Object = asn1Object;\n      if (this.isExplicit) {\n        this.hV = this.asn1Object.getEncodedHex();\n        this.hTLV = null;\n        this.isModified = true;\n      } else {\n        this.hV = null;\n        this.hTLV = asn1Object.getEncodedHex();\n        this.hTLV = this.hTLV.replace(/^../, tagNoHex);\n        this.isModified = false;\n      }\n    };\n\n    this.getFreshValueHex = function () {\n      return this.hV;\n    };\n\n    if (typeof params != \"undefined\") {\n      if (typeof params['tag'] != \"undefined\") {\n        this.hT = params['tag'];\n      }\n      if (typeof params['explicit'] != \"undefined\") {\n        this.isExplicit = params['explicit'];\n      }\n      if (typeof params['obj'] != \"undefined\") {\n        this.asn1Object = params['obj'];\n        this.setASN1Object(this.isExplicit, this.hT, this.asn1Object);\n      }\n    }\n  };\n  YAHOO.lang.extend(KJUR.asn1.DERTaggedObject, KJUR.asn1.ASN1Object);\n\n  /**\r\n                                                                       * Create a new JSEncryptRSAKey that extends Tom Wu's RSA key object.\r\n                                                                       * This object is just a decorator for parsing the key parameter\r\n                                                                       * @param {string|Object} key - The key in string format, or an object containing\r\n                                                                       * the parameters needed to build a RSAKey object.\r\n                                                                       * @constructor\r\n                                                                       */\n  var JSEncryptRSAKey = /** @class */function (_super) {\n    __extends(JSEncryptRSAKey, _super);\n    function JSEncryptRSAKey(key) {\n      var _this = _super.call(this) || this;\n      // Call the super constructor.\n      //  RSAKey.call(this);\n      // If a key key was provided.\n      if (key) {\n        // If this is a string...\n        if (typeof key === \"string\") {\n          _this.parseKey(key);\n        } else\n        if (JSEncryptRSAKey.hasPrivateKeyProperty(key) ||\n        JSEncryptRSAKey.hasPublicKeyProperty(key)) {\n          // Set the values for the key.\n          _this.parsePropertiesFrom(key);\n        }\n      }\n      return _this;\n    }\n    /**\r\n       * Method to parse a pem encoded string containing both a public or private key.\r\n       * The method will translate the pem encoded string in a der encoded string and\r\n       * will parse private key and public key parameters. This method accepts public key\r\n       * in the rsaencryption pkcs #1 format (oid: 1.2.840.113549.1.1.1).\r\n       *\r\n       * @todo Check how many rsa formats use the same format of pkcs #1.\r\n       *\r\n       * The format is defined as:\r\n       * PublicKeyInfo ::= SEQUENCE {\r\n       *   algorithm       AlgorithmIdentifier,\r\n       *   PublicKey       BIT STRING\r\n       * }\r\n       * Where AlgorithmIdentifier is:\r\n       * AlgorithmIdentifier ::= SEQUENCE {\r\n       *   algorithm       OBJECT IDENTIFIER,     the OID of the enc algorithm\r\n       *   parameters      ANY DEFINED BY algorithm OPTIONAL (NULL for PKCS #1)\r\n       * }\r\n       * and PublicKey is a SEQUENCE encapsulated in a BIT STRING\r\n       * RSAPublicKey ::= SEQUENCE {\r\n       *   modulus           INTEGER,  -- n\r\n       *   publicExponent    INTEGER   -- e\r\n       * }\r\n       * it's possible to examine the structure of the keys obtained from openssl using\r\n       * an asn.1 dumper as the one used here to parse the components: http://lapo.it/asn1js/\r\n       * @argument {string} pem the pem encoded string, can include the BEGIN/END header/footer\r\n       * @private\r\n       */\n    JSEncryptRSAKey.prototype.parseKey = function (pem) {\n      try {\n        var modulus = 0;\n        var public_exponent = 0;\n        var reHex = /^\\s*(?:[0-9A-Fa-f][0-9A-Fa-f]\\s*)+$/;\n        var der = reHex.test(pem) ? Hex.decode(pem) : Base64.unarmor(pem);\n        var asn1 = ASN1.decode(der);\n        // Fixes a bug with OpenSSL 1.0+ private keys\n        if (asn1.sub.length === 3) {\n          asn1 = asn1.sub[2].sub[0];\n        }\n        if (asn1.sub.length === 9) {\n          // Parse the private key.\n          modulus = asn1.sub[1].getHexStringValue(); // bigint\n          this.n = parseBigInt(modulus, 16);\n          public_exponent = asn1.sub[2].getHexStringValue(); // int\n          this.e = parseInt(public_exponent, 16);\n          var private_exponent = asn1.sub[3].getHexStringValue(); // bigint\n          this.d = parseBigInt(private_exponent, 16);\n          var prime1 = asn1.sub[4].getHexStringValue(); // bigint\n          this.p = parseBigInt(prime1, 16);\n          var prime2 = asn1.sub[5].getHexStringValue(); // bigint\n          this.q = parseBigInt(prime2, 16);\n          var exponent1 = asn1.sub[6].getHexStringValue(); // bigint\n          this.dmp1 = parseBigInt(exponent1, 16);\n          var exponent2 = asn1.sub[7].getHexStringValue(); // bigint\n          this.dmq1 = parseBigInt(exponent2, 16);\n          var coefficient = asn1.sub[8].getHexStringValue(); // bigint\n          this.coeff = parseBigInt(coefficient, 16);\n        } else\n        if (asn1.sub.length === 2) {\n          // Parse the public key.\n          var bit_string = asn1.sub[1];\n          var sequence = bit_string.sub[0];\n          modulus = sequence.sub[0].getHexStringValue();\n          this.n = parseBigInt(modulus, 16);\n          public_exponent = sequence.sub[1].getHexStringValue();\n          this.e = parseInt(public_exponent, 16);\n        } else\n        {\n          return false;\n        }\n        return true;\n      }\n      catch (ex) {\n        return false;\n      }\n    };\n    /**\r\n        * Translate rsa parameters in a hex encoded string representing the rsa key.\r\n        *\r\n        * The translation follow the ASN.1 notation :\r\n        * RSAPrivateKey ::= SEQUENCE {\r\n        *   version           Version,\r\n        *   modulus           INTEGER,  -- n\r\n        *   publicExponent    INTEGER,  -- e\r\n        *   privateExponent   INTEGER,  -- d\r\n        *   prime1            INTEGER,  -- p\r\n        *   prime2            INTEGER,  -- q\r\n        *   exponent1         INTEGER,  -- d mod (p1)\r\n        *   exponent2         INTEGER,  -- d mod (q-1)\r\n        *   coefficient       INTEGER,  -- (inverse of q) mod p\r\n        * }\r\n        * @returns {string}  DER Encoded String representing the rsa private key\r\n        * @private\r\n        */\n    JSEncryptRSAKey.prototype.getPrivateBaseKey = function () {\n      var options = {\n        array: [\n        new KJUR.asn1.DERInteger({ int: 0 }),\n        new KJUR.asn1.DERInteger({ bigint: this.n }),\n        new KJUR.asn1.DERInteger({ int: this.e }),\n        new KJUR.asn1.DERInteger({ bigint: this.d }),\n        new KJUR.asn1.DERInteger({ bigint: this.p }),\n        new KJUR.asn1.DERInteger({ bigint: this.q }),\n        new KJUR.asn1.DERInteger({ bigint: this.dmp1 }),\n        new KJUR.asn1.DERInteger({ bigint: this.dmq1 }),\n        new KJUR.asn1.DERInteger({ bigint: this.coeff })] };\n\n\n      var seq = new KJUR.asn1.DERSequence(options);\n      return seq.getEncodedHex();\n    };\n    /**\r\n        * base64 (pem) encoded version of the DER encoded representation\r\n        * @returns {string} pem encoded representation without header and footer\r\n        * @public\r\n        */\n    JSEncryptRSAKey.prototype.getPrivateBaseKeyB64 = function () {\n      return hex2b64(this.getPrivateBaseKey());\n    };\n    /**\r\n        * Translate rsa parameters in a hex encoded string representing the rsa public key.\r\n        * The representation follow the ASN.1 notation :\r\n        * PublicKeyInfo ::= SEQUENCE {\r\n        *   algorithm       AlgorithmIdentifier,\r\n        *   PublicKey       BIT STRING\r\n        * }\r\n        * Where AlgorithmIdentifier is:\r\n        * AlgorithmIdentifier ::= SEQUENCE {\r\n        *   algorithm       OBJECT IDENTIFIER,     the OID of the enc algorithm\r\n        *   parameters      ANY DEFINED BY algorithm OPTIONAL (NULL for PKCS #1)\r\n        * }\r\n        * and PublicKey is a SEQUENCE encapsulated in a BIT STRING\r\n        * RSAPublicKey ::= SEQUENCE {\r\n        *   modulus           INTEGER,  -- n\r\n        *   publicExponent    INTEGER   -- e\r\n        * }\r\n        * @returns {string} DER Encoded String representing the rsa public key\r\n        * @private\r\n        */\n    JSEncryptRSAKey.prototype.getPublicBaseKey = function () {\n      var first_sequence = new KJUR.asn1.DERSequence({\n        array: [\n        new KJUR.asn1.DERObjectIdentifier({ oid: \"1.2.840.113549.1.1.1\" }),\n        new KJUR.asn1.DERNull()] });\n\n\n      var second_sequence = new KJUR.asn1.DERSequence({\n        array: [\n        new KJUR.asn1.DERInteger({ bigint: this.n }),\n        new KJUR.asn1.DERInteger({ int: this.e })] });\n\n\n      var bit_string = new KJUR.asn1.DERBitString({\n        hex: \"00\" + second_sequence.getEncodedHex() });\n\n      var seq = new KJUR.asn1.DERSequence({\n        array: [\n        first_sequence,\n        bit_string] });\n\n\n      return seq.getEncodedHex();\n    };\n    /**\r\n        * base64 (pem) encoded version of the DER encoded representation\r\n        * @returns {string} pem encoded representation without header and footer\r\n        * @public\r\n        */\n    JSEncryptRSAKey.prototype.getPublicBaseKeyB64 = function () {\n      return hex2b64(this.getPublicBaseKey());\n    };\n    /**\r\n        * wrap the string in block of width chars. The default value for rsa keys is 64\r\n        * characters.\r\n        * @param {string} str the pem encoded string without header and footer\r\n        * @param {Number} [width=64] - the length the string has to be wrapped at\r\n        * @returns {string}\r\n        * @private\r\n        */\n    JSEncryptRSAKey.wordwrap = function (str, width) {\n      width = width || 64;\n      if (!str) {\n        return str;\n      }\n      var regex = \"(.{1,\" + width + \"})( +|$\\n?)|(.{1,\" + width + \"})\";\n      return str.match(RegExp(regex, \"g\")).join(\"\\n\");\n    };\n    /**\r\n        * Retrieve the pem encoded private key\r\n        * @returns {string} the pem encoded private key with header/footer\r\n        * @public\r\n        */\n    JSEncryptRSAKey.prototype.getPrivateKey = function () {\n      var key = \"-----BEGIN RSA PRIVATE KEY-----\\n\";\n      key += JSEncryptRSAKey.wordwrap(this.getPrivateBaseKeyB64()) + \"\\n\";\n      key += \"-----END RSA PRIVATE KEY-----\";\n      return key;\n    };\n    /**\r\n        * Retrieve the pem encoded public key\r\n        * @returns {string} the pem encoded public key with header/footer\r\n        * @public\r\n        */\n    JSEncryptRSAKey.prototype.getPublicKey = function () {\n      var key = \"-----BEGIN PUBLIC KEY-----\\n\";\n      key += JSEncryptRSAKey.wordwrap(this.getPublicBaseKeyB64()) + \"\\n\";\n      key += \"-----END PUBLIC KEY-----\";\n      return key;\n    };\n    /**\r\n        * Check if the object contains the necessary parameters to populate the rsa modulus\r\n        * and public exponent parameters.\r\n        * @param {Object} [obj={}] - An object that may contain the two public key\r\n        * parameters\r\n        * @returns {boolean} true if the object contains both the modulus and the public exponent\r\n        * properties (n and e)\r\n        * @todo check for types of n and e. N should be a parseable bigInt object, E should\r\n        * be a parseable integer number\r\n        * @private\r\n        */\n    JSEncryptRSAKey.hasPublicKeyProperty = function (obj) {\n      obj = obj || {};\n      return obj.hasOwnProperty(\"n\") &&\n      obj.hasOwnProperty(\"e\");\n    };\n    /**\r\n        * Check if the object contains ALL the parameters of an RSA key.\r\n        * @param {Object} [obj={}] - An object that may contain nine rsa key\r\n        * parameters\r\n        * @returns {boolean} true if the object contains all the parameters needed\r\n        * @todo check for types of the parameters all the parameters but the public exponent\r\n        * should be parseable bigint objects, the public exponent should be a parseable integer number\r\n        * @private\r\n        */\n    JSEncryptRSAKey.hasPrivateKeyProperty = function (obj) {\n      obj = obj || {};\n      return obj.hasOwnProperty(\"n\") &&\n      obj.hasOwnProperty(\"e\") &&\n      obj.hasOwnProperty(\"d\") &&\n      obj.hasOwnProperty(\"p\") &&\n      obj.hasOwnProperty(\"q\") &&\n      obj.hasOwnProperty(\"dmp1\") &&\n      obj.hasOwnProperty(\"dmq1\") &&\n      obj.hasOwnProperty(\"coeff\");\n    };\n    /**\r\n        * Parse the properties of obj in the current rsa object. Obj should AT LEAST\r\n        * include the modulus and public exponent (n, e) parameters.\r\n        * @param {Object} obj - the object containing rsa parameters\r\n        * @private\r\n        */\n    JSEncryptRSAKey.prototype.parsePropertiesFrom = function (obj) {\n      this.n = obj.n;\n      this.e = obj.e;\n      if (obj.hasOwnProperty(\"d\")) {\n        this.d = obj.d;\n        this.p = obj.p;\n        this.q = obj.q;\n        this.dmp1 = obj.dmp1;\n        this.dmq1 = obj.dmq1;\n        this.coeff = obj.coeff;\n      }\n    };\n    return JSEncryptRSAKey;\n  }(RSAKey);\n\n  /**\r\n              *\r\n              * @param {Object} [options = {}] - An object to customize JSEncrypt behaviour\r\n              * possible parameters are:\r\n              * - default_key_size        {number}  default: 1024 the key size in bit\r\n              * - default_public_exponent {string}  default: '010001' the hexadecimal representation of the public exponent\r\n              * - log                     {boolean} default: false whether log warn/error or not\r\n              * @constructor\r\n              */\n  var JSEncrypt = /** @class */function () {\n    function JSEncrypt(options) {\n      options = options || {};\n      this.default_key_size = parseInt(options.default_key_size, 10) || 1024;\n      this.default_public_exponent = options.default_public_exponent || \"010001\"; // 65537 default openssl public exponent for rsa key type\n      this.log = options.log || false;\n      // The private and public key.\n      this.key = null;\n    }\n    /**\r\n       * Method to set the rsa key parameter (one method is enough to set both the public\r\n       * and the private key, since the private key contains the public key paramenters)\r\n       * Log a warning if logs are enabled\r\n       * @param {Object|string} key the pem encoded string or an object (with or without header/footer)\r\n       * @public\r\n       */\n    JSEncrypt.prototype.setKey = function (key) {\n      if (this.log && this.key) {\n        __f__(\"warn\", \"A key was already set, overriding existing.\", \" at node_modules\\\\jsencrypt\\\\bin\\\\jsencrypt.js:5207\");\n      }\n      this.key = new JSEncryptRSAKey(key);\n    };\n    /**\r\n        * Proxy method for setKey, for api compatibility\r\n        * @see setKey\r\n        * @public\r\n        */\n    JSEncrypt.prototype.setPrivateKey = function (privkey) {\n      // Create the key.\n      this.setKey(privkey);\n    };\n    /**\r\n        * Proxy method for setKey, for api compatibility\r\n        * @see setKey\r\n        * @public\r\n        */\n    JSEncrypt.prototype.setPublicKey = function (pubkey) {\n      // Sets the public key.\n      this.setKey(pubkey);\n    };\n    /**\r\n        * Proxy method for RSAKey object's decrypt, decrypt the string using the private\r\n        * components of the rsa key object. Note that if the object was not set will be created\r\n        * on the fly (by the getKey method) using the parameters passed in the JSEncrypt constructor\r\n        * @param {string} str base64 encoded crypted string to decrypt\r\n        * @return {string} the decrypted string\r\n        * @public\r\n        */\n    JSEncrypt.prototype.decrypt = function (str) {\n      // Return the decrypted string.\n      try {\n        return this.getKey().decrypt(b64tohex(str));\n      }\n      catch (ex) {\n        return false;\n      }\n    };\n    /**\r\n        * Proxy method for RSAKey object's encrypt, encrypt the string using the public\r\n        * components of the rsa key object. Note that if the object was not set will be created\r\n        * on the fly (by the getKey method) using the parameters passed in the JSEncrypt constructor\r\n        * @param {string} str the string to encrypt\r\n        * @return {string} the encrypted string encoded in base64\r\n        * @public\r\n        */\n    JSEncrypt.prototype.encrypt = function (str) {\n      // Return the encrypted string.\n      try {\n        return hex2b64(this.getKey().encrypt(str));\n      }\n      catch (ex) {\n        return false;\n      }\n    };\n    /**\r\n        * Proxy method for RSAKey object's sign.\r\n        * @param {string} str the string to sign\r\n        * @param {function} digestMethod hash method\r\n        * @param {string} digestName the name of the hash algorithm\r\n        * @return {string} the signature encoded in base64\r\n        * @public\r\n        */\n    JSEncrypt.prototype.sign = function (str, digestMethod, digestName) {\n      // return the RSA signature of 'str' in 'hex' format.\n      try {\n        return hex2b64(this.getKey().sign(str, digestMethod, digestName));\n      }\n      catch (ex) {\n        return false;\n      }\n    };\n    /**\r\n        * Proxy method for RSAKey object's verify.\r\n        * @param {string} str the string to verify\r\n        * @param {string} signature the signature encoded in base64 to compare the string to\r\n        * @param {function} digestMethod hash method\r\n        * @return {boolean} whether the data and signature match\r\n        * @public\r\n        */\n    JSEncrypt.prototype.verify = function (str, signature, digestMethod) {\n      // Return the decrypted 'digest' of the signature.\n      try {\n        return this.getKey().verify(str, b64tohex(signature), digestMethod);\n      }\n      catch (ex) {\n        return false;\n      }\n    };\n    /**\r\n        * Getter for the current JSEncryptRSAKey object. If it doesn't exists a new object\r\n        * will be created and returned\r\n        * @param {callback} [cb] the callback to be called if we want the key to be generated\r\n        * in an async fashion\r\n        * @returns {JSEncryptRSAKey} the JSEncryptRSAKey object\r\n        * @public\r\n        */\n    JSEncrypt.prototype.getKey = function (cb) {\n      // Only create new if it does not exist.\n      if (!this.key) {\n        // Get a new private key.\n        this.key = new JSEncryptRSAKey();\n        if (cb && {}.toString.call(cb) === \"[object Function]\") {\n          this.key.generateAsync(this.default_key_size, this.default_public_exponent, cb);\n          return;\n        }\n        // Generate the key.\n        this.key.generate(this.default_key_size, this.default_public_exponent);\n      }\n      return this.key;\n    };\n    /**\r\n        * Returns the pem encoded representation of the private key\r\n        * If the key doesn't exists a new key will be created\r\n        * @returns {string} pem encoded representation of the private key WITH header and footer\r\n        * @public\r\n        */\n    JSEncrypt.prototype.getPrivateKey = function () {\n      // Return the private representation of this key.\n      return this.getKey().getPrivateKey();\n    };\n    /**\r\n        * Returns the pem encoded representation of the private key\r\n        * If the key doesn't exists a new key will be created\r\n        * @returns {string} pem encoded representation of the private key WITHOUT header and footer\r\n        * @public\r\n        */\n    JSEncrypt.prototype.getPrivateKeyB64 = function () {\n      // Return the private representation of this key.\n      return this.getKey().getPrivateBaseKeyB64();\n    };\n    /**\r\n        * Returns the pem encoded representation of the public key\r\n        * If the key doesn't exists a new key will be created\r\n        * @returns {string} pem encoded representation of the public key WITH header and footer\r\n        * @public\r\n        */\n    JSEncrypt.prototype.getPublicKey = function () {\n      // Return the private representation of this key.\n      return this.getKey().getPublicKey();\n    };\n    /**\r\n        * Returns the pem encoded representation of the public key\r\n        * If the key doesn't exists a new key will be created\r\n        * @returns {string} pem encoded representation of the public key WITHOUT header and footer\r\n        * @public\r\n        */\n    JSEncrypt.prototype.getPublicKeyB64 = function () {\n      // Return the private representation of this key.\n      return this.getKey().getPublicBaseKeyB64();\n    };\n    JSEncrypt.version = \"3.0.0-rc.1\";\n    return JSEncrypt;\n  }();\n\n  window.JSEncrypt = JSEncrypt;\n\n  exports.JSEncrypt = JSEncrypt;\n  exports.default = JSEncrypt;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n});\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 12)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///28\n");

/***/ }),

/***/ 29:
/*!**********************************************************************!*\
  !*** E:/colorUI/ai_chat_front/ai_assist_front/utils/jsencryptKey.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("var _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _jsencrypt = _interopRequireDefault(__webpack_require__(/*! jsencrypt */ 28));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\n_vue.default.prototype.$encruption = function (obj) {\n  var encrypt = new JSEncrypt();\n  encrypt.setPublicKey(\n  'MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCzhuy0c70yLooCcg1oV8s/FdniStnpeHZfJr7LECTRBw9Str0W7RJ1cMBbbQtBfcsBQ/rQxGVulC3Quj53zqQSiHJvVISnWaRd3Ebv9hFYpeGRg4xgZbOB4M1zTq0i0rk7U65s+enTTHIY+QQRnbObYjlk1abRcGJnHgQG4T6vJQIDAQAB');\n\n  return encrypt.encrypt(obj);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vdXRpbHMvanNlbmNyeXB0S2V5LmpzIl0sIm5hbWVzIjpbIlZ1ZSIsInByb3RvdHlwZSIsIiRlbmNydXB0aW9uIiwib2JqIiwiZW5jcnlwdCIsIkpTRW5jcnlwdCIsInNldFB1YmxpY0tleSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxrRjs7QUFFQUEsYUFBSUMsU0FBSixDQUFjQyxXQUFkLEdBQTRCLFVBQVNDLEdBQVQsRUFBYTtBQUN4QyxNQUFJQyxPQUFPLEdBQUcsSUFBSUMsU0FBSixFQUFkO0FBQ0FELFNBQU8sQ0FBQ0UsWUFBUjtBQUNBLDROQURBOztBQUdBLFNBQU9GLE9BQU8sQ0FBQ0EsT0FBUixDQUFnQkQsR0FBaEIsQ0FBUDtBQUNBLENBTkQiLCJmaWxlIjoiMjkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVnVlIGZyb20gJ3Z1ZSdcclxuaW1wb3J0IEpzRW5jcnlwdCBmcm9tICdqc2VuY3J5cHQnXHJcblxyXG5WdWUucHJvdG90eXBlLiRlbmNydXB0aW9uID0gZnVuY3Rpb24ob2JqKXtcclxuXHRsZXQgZW5jcnlwdCA9IG5ldyBKU0VuY3J5cHQoKVxyXG5cdGVuY3J5cHQuc2V0UHVibGljS2V5KFxyXG5cdCdNSUdmTUEwR0NTcUdTSWIzRFFFQkFRVUFBNEdOQURDQmlRS0JnUUN6aHV5MGM3MHlMb29DY2cxb1Y4cy9GZG5pU3RucGVIWmZKcjdMRUNUUkJ3OVN0cjBXN1JKMWNNQmJiUXRCZmNzQlEvclF4R1Z1bEMzUXVqNTN6cVFTaUhKdlZJU25XYVJkM0VidjloRllwZUdSZzR4Z1piT0I0TTF6VHEwaTByazdVNjVzK2VuVFRISVkrUVFSbmJPYllqbGsxYWJSY0dKbkhnUUc0VDZ2SlFJREFRQUInXHJcblx0KVxyXG5cdHJldHVybiBlbmNyeXB0LmVuY3J5cHQob2JqKVxyXG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///29\n");

/***/ }),

/***/ 3:
/*!******************************************************************************************!*\
  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/packages/mp-vue/dist/mp.runtime.esm.js ***!
  \******************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(global) {/*!\n * Vue.js v2.6.11\n * (c) 2014-2019 Evan You\n * Released under the MIT License.\n */\n/*  */\n\nvar emptyObject = Object.freeze({});\n\n// These helpers produce better VM code in JS engines due to their\n// explicitness and function inlining.\nfunction isUndef (v) {\n  return v === undefined || v === null\n}\n\nfunction isDef (v) {\n  return v !== undefined && v !== null\n}\n\nfunction isTrue (v) {\n  return v === true\n}\n\nfunction isFalse (v) {\n  return v === false\n}\n\n/**\n * Check if value is primitive.\n */\nfunction isPrimitive (value) {\n  return (\n    typeof value === 'string' ||\n    typeof value === 'number' ||\n    // $flow-disable-line\n    typeof value === 'symbol' ||\n    typeof value === 'boolean'\n  )\n}\n\n/**\n * Quick object check - this is primarily used to tell\n * Objects from primitive values when we know the value\n * is a JSON-compliant type.\n */\nfunction isObject (obj) {\n  return obj !== null && typeof obj === 'object'\n}\n\n/**\n * Get the raw type string of a value, e.g., [object Object].\n */\nvar _toString = Object.prototype.toString;\n\nfunction toRawType (value) {\n  return _toString.call(value).slice(8, -1)\n}\n\n/**\n * Strict object type check. Only returns true\n * for plain JavaScript objects.\n */\nfunction isPlainObject (obj) {\n  return _toString.call(obj) === '[object Object]'\n}\n\nfunction isRegExp (v) {\n  return _toString.call(v) === '[object RegExp]'\n}\n\n/**\n * Check if val is a valid array index.\n */\nfunction isValidArrayIndex (val) {\n  var n = parseFloat(String(val));\n  return n >= 0 && Math.floor(n) === n && isFinite(val)\n}\n\nfunction isPromise (val) {\n  return (\n    isDef(val) &&\n    typeof val.then === 'function' &&\n    typeof val.catch === 'function'\n  )\n}\n\n/**\n * Convert a value to a string that is actually rendered.\n */\nfunction toString (val) {\n  return val == null\n    ? ''\n    : Array.isArray(val) || (isPlainObject(val) && val.toString === _toString)\n      ? JSON.stringify(val, null, 2)\n      : String(val)\n}\n\n/**\n * Convert an input value to a number for persistence.\n * If the conversion fails, return original string.\n */\nfunction toNumber (val) {\n  var n = parseFloat(val);\n  return isNaN(n) ? val : n\n}\n\n/**\n * Make a map and return a function for checking if a key\n * is in that map.\n */\nfunction makeMap (\n  str,\n  expectsLowerCase\n) {\n  var map = Object.create(null);\n  var list = str.split(',');\n  for (var i = 0; i < list.length; i++) {\n    map[list[i]] = true;\n  }\n  return expectsLowerCase\n    ? function (val) { return map[val.toLowerCase()]; }\n    : function (val) { return map[val]; }\n}\n\n/**\n * Check if a tag is a built-in tag.\n */\nvar isBuiltInTag = makeMap('slot,component', true);\n\n/**\n * Check if an attribute is a reserved attribute.\n */\nvar isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');\n\n/**\n * Remove an item from an array.\n */\nfunction remove (arr, item) {\n  if (arr.length) {\n    var index = arr.indexOf(item);\n    if (index > -1) {\n      return arr.splice(index, 1)\n    }\n  }\n}\n\n/**\n * Check whether an object has the property.\n */\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction hasOwn (obj, key) {\n  return hasOwnProperty.call(obj, key)\n}\n\n/**\n * Create a cached version of a pure function.\n */\nfunction cached (fn) {\n  var cache = Object.create(null);\n  return (function cachedFn (str) {\n    var hit = cache[str];\n    return hit || (cache[str] = fn(str))\n  })\n}\n\n/**\n * Camelize a hyphen-delimited string.\n */\nvar camelizeRE = /-(\\w)/g;\nvar camelize = cached(function (str) {\n  return str.replace(camelizeRE, function (_, c) { return c ? c.toUpperCase() : ''; })\n});\n\n/**\n * Capitalize a string.\n */\nvar capitalize = cached(function (str) {\n  return str.charAt(0).toUpperCase() + str.slice(1)\n});\n\n/**\n * Hyphenate a camelCase string.\n */\nvar hyphenateRE = /\\B([A-Z])/g;\nvar hyphenate = cached(function (str) {\n  return str.replace(hyphenateRE, '-$1').toLowerCase()\n});\n\n/**\n * Simple bind polyfill for environments that do not support it,\n * e.g., PhantomJS 1.x. Technically, we don't need this anymore\n * since native bind is now performant enough in most browsers.\n * But removing it would mean breaking code that was able to run in\n * PhantomJS 1.x, so this must be kept for backward compatibility.\n */\n\n/* istanbul ignore next */\nfunction polyfillBind (fn, ctx) {\n  function boundFn (a) {\n    var l = arguments.length;\n    return l\n      ? l > 1\n        ? fn.apply(ctx, arguments)\n        : fn.call(ctx, a)\n      : fn.call(ctx)\n  }\n\n  boundFn._length = fn.length;\n  return boundFn\n}\n\nfunction nativeBind (fn, ctx) {\n  return fn.bind(ctx)\n}\n\nvar bind = Function.prototype.bind\n  ? nativeBind\n  : polyfillBind;\n\n/**\n * Convert an Array-like object to a real Array.\n */\nfunction toArray (list, start) {\n  start = start || 0;\n  var i = list.length - start;\n  var ret = new Array(i);\n  while (i--) {\n    ret[i] = list[i + start];\n  }\n  return ret\n}\n\n/**\n * Mix properties into target object.\n */\nfunction extend (to, _from) {\n  for (var key in _from) {\n    to[key] = _from[key];\n  }\n  return to\n}\n\n/**\n * Merge an Array of Objects into a single Object.\n */\nfunction toObject (arr) {\n  var res = {};\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i]) {\n      extend(res, arr[i]);\n    }\n  }\n  return res\n}\n\n/* eslint-disable no-unused-vars */\n\n/**\n * Perform no operation.\n * Stubbing args to make Flow happy without leaving useless transpiled code\n * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/).\n */\nfunction noop (a, b, c) {}\n\n/**\n * Always return false.\n */\nvar no = function (a, b, c) { return false; };\n\n/* eslint-enable no-unused-vars */\n\n/**\n * Return the same value.\n */\nvar identity = function (_) { return _; };\n\n/**\n * Check if two values are loosely equal - that is,\n * if they are plain objects, do they have the same shape?\n */\nfunction looseEqual (a, b) {\n  if (a === b) { return true }\n  var isObjectA = isObject(a);\n  var isObjectB = isObject(b);\n  if (isObjectA && isObjectB) {\n    try {\n      var isArrayA = Array.isArray(a);\n      var isArrayB = Array.isArray(b);\n      if (isArrayA && isArrayB) {\n        return a.length === b.length && a.every(function (e, i) {\n          return looseEqual(e, b[i])\n        })\n      } else if (a instanceof Date && b instanceof Date) {\n        return a.getTime() === b.getTime()\n      } else if (!isArrayA && !isArrayB) {\n        var keysA = Object.keys(a);\n        var keysB = Object.keys(b);\n        return keysA.length === keysB.length && keysA.every(function (key) {\n          return looseEqual(a[key], b[key])\n        })\n      } else {\n        /* istanbul ignore next */\n        return false\n      }\n    } catch (e) {\n      /* istanbul ignore next */\n      return false\n    }\n  } else if (!isObjectA && !isObjectB) {\n    return String(a) === String(b)\n  } else {\n    return false\n  }\n}\n\n/**\n * Return the first index at which a loosely equal value can be\n * found in the array (if value is a plain object, the array must\n * contain an object of the same shape), or -1 if it is not present.\n */\nfunction looseIndexOf (arr, val) {\n  for (var i = 0; i < arr.length; i++) {\n    if (looseEqual(arr[i], val)) { return i }\n  }\n  return -1\n}\n\n/**\n * Ensure a function is called only once.\n */\nfunction once (fn) {\n  var called = false;\n  return function () {\n    if (!called) {\n      called = true;\n      fn.apply(this, arguments);\n    }\n  }\n}\n\nvar ASSET_TYPES = [\n  'component',\n  'directive',\n  'filter'\n];\n\nvar LIFECYCLE_HOOKS = [\n  'beforeCreate',\n  'created',\n  'beforeMount',\n  'mounted',\n  'beforeUpdate',\n  'updated',\n  'beforeDestroy',\n  'destroyed',\n  'activated',\n  'deactivated',\n  'errorCaptured',\n  'serverPrefetch'\n];\n\n/*  */\n\n\n\nvar config = ({\n  /**\n   * Option merge strategies (used in core/util/options)\n   */\n  // $flow-disable-line\n  optionMergeStrategies: Object.create(null),\n\n  /**\n   * Whether to suppress warnings.\n   */\n  silent: false,\n\n  /**\n   * Show production mode tip message on boot?\n   */\n  productionTip: \"development\" !== 'production',\n\n  /**\n   * Whether to enable devtools\n   */\n  devtools: \"development\" !== 'production',\n\n  /**\n   * Whether to record perf\n   */\n  performance: false,\n\n  /**\n   * Error handler for watcher errors\n   */\n  errorHandler: null,\n\n  /**\n   * Warn handler for watcher warns\n   */\n  warnHandler: null,\n\n  /**\n   * Ignore certain custom elements\n   */\n  ignoredElements: [],\n\n  /**\n   * Custom user key aliases for v-on\n   */\n  // $flow-disable-line\n  keyCodes: Object.create(null),\n\n  /**\n   * Check if a tag is reserved so that it cannot be registered as a\n   * component. This is platform-dependent and may be overwritten.\n   */\n  isReservedTag: no,\n\n  /**\n   * Check if an attribute is reserved so that it cannot be used as a component\n   * prop. This is platform-dependent and may be overwritten.\n   */\n  isReservedAttr: no,\n\n  /**\n   * Check if a tag is an unknown element.\n   * Platform-dependent.\n   */\n  isUnknownElement: no,\n\n  /**\n   * Get the namespace of an element\n   */\n  getTagNamespace: noop,\n\n  /**\n   * Parse the real tag name for the specific platform.\n   */\n  parsePlatformTagName: identity,\n\n  /**\n   * Check if an attribute must be bound using property, e.g. value\n   * Platform-dependent.\n   */\n  mustUseProp: no,\n\n  /**\n   * Perform updates asynchronously. Intended to be used by Vue Test Utils\n   * This will significantly reduce performance if set to false.\n   */\n  async: true,\n\n  /**\n   * Exposed for legacy reasons\n   */\n  _lifecycleHooks: LIFECYCLE_HOOKS\n});\n\n/*  */\n\n/**\n * unicode letters used for parsing html tags, component names and property paths.\n * using https://www.w3.org/TR/html53/semantics-scripting.html#potentialcustomelementname\n * skipping \\u10000-\\uEFFFF due to it freezing up PhantomJS\n */\nvar unicodeRegExp = /a-zA-Z\\u00B7\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u203F-\\u2040\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD/;\n\n/**\n * Check if a string starts with $ or _\n */\nfunction isReserved (str) {\n  var c = (str + '').charCodeAt(0);\n  return c === 0x24 || c === 0x5F\n}\n\n/**\n * Define a property.\n */\nfunction def (obj, key, val, enumerable) {\n  Object.defineProperty(obj, key, {\n    value: val,\n    enumerable: !!enumerable,\n    writable: true,\n    configurable: true\n  });\n}\n\n/**\n * Parse simple path.\n */\nvar bailRE = new RegExp((\"[^\" + (unicodeRegExp.source) + \".$_\\\\d]\"));\nfunction parsePath (path) {\n  if (bailRE.test(path)) {\n    return\n  }\n  var segments = path.split('.');\n  return function (obj) {\n    for (var i = 0; i < segments.length; i++) {\n      if (!obj) { return }\n      obj = obj[segments[i]];\n    }\n    return obj\n  }\n}\n\n/*  */\n\n// can we use __proto__?\nvar hasProto = '__proto__' in {};\n\n// Browser environment sniffing\nvar inBrowser = typeof window !== 'undefined';\nvar inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;\nvar weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();\nvar UA = inBrowser && window.navigator.userAgent.toLowerCase();\nvar isIE = UA && /msie|trident/.test(UA);\nvar isIE9 = UA && UA.indexOf('msie 9.0') > 0;\nvar isEdge = UA && UA.indexOf('edge/') > 0;\nvar isAndroid = (UA && UA.indexOf('android') > 0) || (weexPlatform === 'android');\nvar isIOS = (UA && /iphone|ipad|ipod|ios/.test(UA)) || (weexPlatform === 'ios');\nvar isChrome = UA && /chrome\\/\\d+/.test(UA) && !isEdge;\nvar isPhantomJS = UA && /phantomjs/.test(UA);\nvar isFF = UA && UA.match(/firefox\\/(\\d+)/);\n\n// Firefox has a \"watch\" function on Object.prototype...\nvar nativeWatch = ({}).watch;\nif (inBrowser) {\n  try {\n    var opts = {};\n    Object.defineProperty(opts, 'passive', ({\n      get: function get () {\n      }\n    })); // https://github.com/facebook/flow/issues/285\n    window.addEventListener('test-passive', null, opts);\n  } catch (e) {}\n}\n\n// this needs to be lazy-evaled because vue may be required before\n// vue-server-renderer can set VUE_ENV\nvar _isServer;\nvar isServerRendering = function () {\n  if (_isServer === undefined) {\n    /* istanbul ignore if */\n    if (!inBrowser && !inWeex && typeof global !== 'undefined') {\n      // detect presence of vue-server-renderer and avoid\n      // Webpack shimming the process\n      _isServer = global['process'] && global['process'].env.VUE_ENV === 'server';\n    } else {\n      _isServer = false;\n    }\n  }\n  return _isServer\n};\n\n// detect devtools\nvar devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;\n\n/* istanbul ignore next */\nfunction isNative (Ctor) {\n  return typeof Ctor === 'function' && /native code/.test(Ctor.toString())\n}\n\nvar hasSymbol =\n  typeof Symbol !== 'undefined' && isNative(Symbol) &&\n  typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);\n\nvar _Set;\n/* istanbul ignore if */ // $flow-disable-line\nif (typeof Set !== 'undefined' && isNative(Set)) {\n  // use native Set when available.\n  _Set = Set;\n} else {\n  // a non-standard Set polyfill that only works with primitive keys.\n  _Set = /*@__PURE__*/(function () {\n    function Set () {\n      this.set = Object.create(null);\n    }\n    Set.prototype.has = function has (key) {\n      return this.set[key] === true\n    };\n    Set.prototype.add = function add (key) {\n      this.set[key] = true;\n    };\n    Set.prototype.clear = function clear () {\n      this.set = Object.create(null);\n    };\n\n    return Set;\n  }());\n}\n\n/*  */\n\nvar warn = noop;\nvar tip = noop;\nvar generateComponentTrace = (noop); // work around flow check\nvar formatComponentName = (noop);\n\nif (true) {\n  var hasConsole = typeof console !== 'undefined';\n  var classifyRE = /(?:^|[-_])(\\w)/g;\n  var classify = function (str) { return str\n    .replace(classifyRE, function (c) { return c.toUpperCase(); })\n    .replace(/[-_]/g, ''); };\n\n  warn = function (msg, vm) {\n    var trace = vm ? generateComponentTrace(vm) : '';\n\n    if (config.warnHandler) {\n      config.warnHandler.call(null, msg, vm, trace);\n    } else if (hasConsole && (!config.silent)) {\n      console.error((\"[Vue warn]: \" + msg + trace));\n    }\n  };\n\n  tip = function (msg, vm) {\n    if (hasConsole && (!config.silent)) {\n      console.warn(\"[Vue tip]: \" + msg + (\n        vm ? generateComponentTrace(vm) : ''\n      ));\n    }\n  };\n\n  formatComponentName = function (vm, includeFile) {\n    {\n      if(vm.$scope && vm.$scope.is){\n        return vm.$scope.is\n      }\n    }\n    if (vm.$root === vm) {\n      return '<Root>'\n    }\n    var options = typeof vm === 'function' && vm.cid != null\n      ? vm.options\n      : vm._isVue\n        ? vm.$options || vm.constructor.options\n        : vm;\n    var name = options.name || options._componentTag;\n    var file = options.__file;\n    if (!name && file) {\n      var match = file.match(/([^/\\\\]+)\\.vue$/);\n      name = match && match[1];\n    }\n\n    return (\n      (name ? (\"<\" + (classify(name)) + \">\") : \"<Anonymous>\") +\n      (file && includeFile !== false ? (\" at \" + file) : '')\n    )\n  };\n\n  var repeat = function (str, n) {\n    var res = '';\n    while (n) {\n      if (n % 2 === 1) { res += str; }\n      if (n > 1) { str += str; }\n      n >>= 1;\n    }\n    return res\n  };\n\n  generateComponentTrace = function (vm) {\n    if (vm._isVue && vm.$parent) {\n      var tree = [];\n      var currentRecursiveSequence = 0;\n      while (vm) {\n        if (tree.length > 0) {\n          var last = tree[tree.length - 1];\n          if (last.constructor === vm.constructor) {\n            currentRecursiveSequence++;\n            vm = vm.$parent;\n            continue\n          } else if (currentRecursiveSequence > 0) {\n            tree[tree.length - 1] = [last, currentRecursiveSequence];\n            currentRecursiveSequence = 0;\n          }\n        }\n        tree.push(vm);\n        vm = vm.$parent;\n      }\n      return '\\n\\nfound in\\n\\n' + tree\n        .map(function (vm, i) { return (\"\" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm)\n            ? ((formatComponentName(vm[0])) + \"... (\" + (vm[1]) + \" recursive calls)\")\n            : formatComponentName(vm))); })\n        .join('\\n')\n    } else {\n      return (\"\\n\\n(found in \" + (formatComponentName(vm)) + \")\")\n    }\n  };\n}\n\n/*  */\n\nvar uid = 0;\n\n/**\n * A dep is an observable that can have multiple\n * directives subscribing to it.\n */\nvar Dep = function Dep () {\n  // fixed by xxxxxx (nvue vuex)\n  /* eslint-disable no-undef */\n  if(typeof SharedObject !== 'undefined'){\n    this.id = SharedObject.uid++;\n  } else {\n    this.id = uid++;\n  }\n  this.subs = [];\n};\n\nDep.prototype.addSub = function addSub (sub) {\n  this.subs.push(sub);\n};\n\nDep.prototype.removeSub = function removeSub (sub) {\n  remove(this.subs, sub);\n};\n\nDep.prototype.depend = function depend () {\n  if (Dep.SharedObject.target) {\n    Dep.SharedObject.target.addDep(this);\n  }\n};\n\nDep.prototype.notify = function notify () {\n  // stabilize the subscriber list first\n  var subs = this.subs.slice();\n  if ( true && !config.async) {\n    // subs aren't sorted in scheduler if not running async\n    // we need to sort them now to make sure they fire in correct\n    // order\n    subs.sort(function (a, b) { return a.id - b.id; });\n  }\n  for (var i = 0, l = subs.length; i < l; i++) {\n    subs[i].update();\n  }\n};\n\n// The current target watcher being evaluated.\n// This is globally unique because only one watcher\n// can be evaluated at a time.\n// fixed by xxxxxx (nvue shared vuex)\n/* eslint-disable no-undef */\nDep.SharedObject = typeof SharedObject !== 'undefined' ? SharedObject : {};\nDep.SharedObject.target = null;\nDep.SharedObject.targetStack = [];\n\nfunction pushTarget (target) {\n  Dep.SharedObject.targetStack.push(target);\n  Dep.SharedObject.target = target;\n}\n\nfunction popTarget () {\n  Dep.SharedObject.targetStack.pop();\n  Dep.SharedObject.target = Dep.SharedObject.targetStack[Dep.SharedObject.targetStack.length - 1];\n}\n\n/*  */\n\nvar VNode = function VNode (\n  tag,\n  data,\n  children,\n  text,\n  elm,\n  context,\n  componentOptions,\n  asyncFactory\n) {\n  this.tag = tag;\n  this.data = data;\n  this.children = children;\n  this.text = text;\n  this.elm = elm;\n  this.ns = undefined;\n  this.context = context;\n  this.fnContext = undefined;\n  this.fnOptions = undefined;\n  this.fnScopeId = undefined;\n  this.key = data && data.key;\n  this.componentOptions = componentOptions;\n  this.componentInstance = undefined;\n  this.parent = undefined;\n  this.raw = false;\n  this.isStatic = false;\n  this.isRootInsert = true;\n  this.isComment = false;\n  this.isCloned = false;\n  this.isOnce = false;\n  this.asyncFactory = asyncFactory;\n  this.asyncMeta = undefined;\n  this.isAsyncPlaceholder = false;\n};\n\nvar prototypeAccessors = { child: { configurable: true } };\n\n// DEPRECATED: alias for componentInstance for backwards compat.\n/* istanbul ignore next */\nprototypeAccessors.child.get = function () {\n  return this.componentInstance\n};\n\nObject.defineProperties( VNode.prototype, prototypeAccessors );\n\nvar createEmptyVNode = function (text) {\n  if ( text === void 0 ) text = '';\n\n  var node = new VNode();\n  node.text = text;\n  node.isComment = true;\n  return node\n};\n\nfunction createTextVNode (val) {\n  return new VNode(undefined, undefined, undefined, String(val))\n}\n\n// optimized shallow clone\n// used for static nodes and slot nodes because they may be reused across\n// multiple renders, cloning them avoids errors when DOM manipulations rely\n// on their elm reference.\nfunction cloneVNode (vnode) {\n  var cloned = new VNode(\n    vnode.tag,\n    vnode.data,\n    // #7975\n    // clone children array to avoid mutating original in case of cloning\n    // a child.\n    vnode.children && vnode.children.slice(),\n    vnode.text,\n    vnode.elm,\n    vnode.context,\n    vnode.componentOptions,\n    vnode.asyncFactory\n  );\n  cloned.ns = vnode.ns;\n  cloned.isStatic = vnode.isStatic;\n  cloned.key = vnode.key;\n  cloned.isComment = vnode.isComment;\n  cloned.fnContext = vnode.fnContext;\n  cloned.fnOptions = vnode.fnOptions;\n  cloned.fnScopeId = vnode.fnScopeId;\n  cloned.asyncMeta = vnode.asyncMeta;\n  cloned.isCloned = true;\n  return cloned\n}\n\n/*\n * not type checking this file because flow doesn't play well with\n * dynamically accessing methods on Array prototype\n */\n\nvar arrayProto = Array.prototype;\nvar arrayMethods = Object.create(arrayProto);\n\nvar methodsToPatch = [\n  'push',\n  'pop',\n  'shift',\n  'unshift',\n  'splice',\n  'sort',\n  'reverse'\n];\n\n/**\n * Intercept mutating methods and emit events\n */\nmethodsToPatch.forEach(function (method) {\n  // cache original method\n  var original = arrayProto[method];\n  def(arrayMethods, method, function mutator () {\n    var args = [], len = arguments.length;\n    while ( len-- ) args[ len ] = arguments[ len ];\n\n    var result = original.apply(this, args);\n    var ob = this.__ob__;\n    var inserted;\n    switch (method) {\n      case 'push':\n      case 'unshift':\n        inserted = args;\n        break\n      case 'splice':\n        inserted = args.slice(2);\n        break\n    }\n    if (inserted) { ob.observeArray(inserted); }\n    // notify change\n    ob.dep.notify();\n    return result\n  });\n});\n\n/*  */\n\nvar arrayKeys = Object.getOwnPropertyNames(arrayMethods);\n\n/**\n * In some cases we may want to disable observation inside a component's\n * update computation.\n */\nvar shouldObserve = true;\n\nfunction toggleObserving (value) {\n  shouldObserve = value;\n}\n\n/**\n * Observer class that is attached to each observed\n * object. Once attached, the observer converts the target\n * object's property keys into getter/setters that\n * collect dependencies and dispatch updates.\n */\nvar Observer = function Observer (value) {\n  this.value = value;\n  this.dep = new Dep();\n  this.vmCount = 0;\n  def(value, '__ob__', this);\n  if (Array.isArray(value)) {\n    if (hasProto) {\n      {// fixed by xxxxxx 微信小程序使用 plugins 之后，数组方法被直接挂载到了数组对象上，需要执行 copyAugment 逻辑\n        if(value.push !== value.__proto__.push){\n          copyAugment(value, arrayMethods, arrayKeys);\n        } else {\n          protoAugment(value, arrayMethods);\n        }\n      }\n    } else {\n      copyAugment(value, arrayMethods, arrayKeys);\n    }\n    this.observeArray(value);\n  } else {\n    this.walk(value);\n  }\n};\n\n/**\n * Walk through all properties and convert them into\n * getter/setters. This method should only be called when\n * value type is Object.\n */\nObserver.prototype.walk = function walk (obj) {\n  var keys = Object.keys(obj);\n  for (var i = 0; i < keys.length; i++) {\n    defineReactive$$1(obj, keys[i]);\n  }\n};\n\n/**\n * Observe a list of Array items.\n */\nObserver.prototype.observeArray = function observeArray (items) {\n  for (var i = 0, l = items.length; i < l; i++) {\n    observe(items[i]);\n  }\n};\n\n// helpers\n\n/**\n * Augment a target Object or Array by intercepting\n * the prototype chain using __proto__\n */\nfunction protoAugment (target, src) {\n  /* eslint-disable no-proto */\n  target.__proto__ = src;\n  /* eslint-enable no-proto */\n}\n\n/**\n * Augment a target Object or Array by defining\n * hidden properties.\n */\n/* istanbul ignore next */\nfunction copyAugment (target, src, keys) {\n  for (var i = 0, l = keys.length; i < l; i++) {\n    var key = keys[i];\n    def(target, key, src[key]);\n  }\n}\n\n/**\n * Attempt to create an observer instance for a value,\n * returns the new observer if successfully observed,\n * or the existing observer if the value already has one.\n */\nfunction observe (value, asRootData) {\n  if (!isObject(value) || value instanceof VNode) {\n    return\n  }\n  var ob;\n  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {\n    ob = value.__ob__;\n  } else if (\n    shouldObserve &&\n    !isServerRendering() &&\n    (Array.isArray(value) || isPlainObject(value)) &&\n    Object.isExtensible(value) &&\n    !value._isVue\n  ) {\n    ob = new Observer(value);\n  }\n  if (asRootData && ob) {\n    ob.vmCount++;\n  }\n  return ob\n}\n\n/**\n * Define a reactive property on an Object.\n */\nfunction defineReactive$$1 (\n  obj,\n  key,\n  val,\n  customSetter,\n  shallow\n) {\n  var dep = new Dep();\n\n  var property = Object.getOwnPropertyDescriptor(obj, key);\n  if (property && property.configurable === false) {\n    return\n  }\n\n  // cater for pre-defined getter/setters\n  var getter = property && property.get;\n  var setter = property && property.set;\n  if ((!getter || setter) && arguments.length === 2) {\n    val = obj[key];\n  }\n\n  var childOb = !shallow && observe(val);\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get: function reactiveGetter () {\n      var value = getter ? getter.call(obj) : val;\n      if (Dep.SharedObject.target) { // fixed by xxxxxx\n        dep.depend();\n        if (childOb) {\n          childOb.dep.depend();\n          if (Array.isArray(value)) {\n            dependArray(value);\n          }\n        }\n      }\n      return value\n    },\n    set: function reactiveSetter (newVal) {\n      var value = getter ? getter.call(obj) : val;\n      /* eslint-disable no-self-compare */\n      if (newVal === value || (newVal !== newVal && value !== value)) {\n        return\n      }\n      /* eslint-enable no-self-compare */\n      if ( true && customSetter) {\n        customSetter();\n      }\n      // #7981: for accessor properties without setter\n      if (getter && !setter) { return }\n      if (setter) {\n        setter.call(obj, newVal);\n      } else {\n        val = newVal;\n      }\n      childOb = !shallow && observe(newVal);\n      dep.notify();\n    }\n  });\n}\n\n/**\n * Set a property on an object. Adds the new property and\n * triggers change notification if the property doesn't\n * already exist.\n */\nfunction set (target, key, val) {\n  if ( true &&\n    (isUndef(target) || isPrimitive(target))\n  ) {\n    warn((\"Cannot set reactive property on undefined, null, or primitive value: \" + ((target))));\n  }\n  if (Array.isArray(target) && isValidArrayIndex(key)) {\n    target.length = Math.max(target.length, key);\n    target.splice(key, 1, val);\n    return val\n  }\n  if (key in target && !(key in Object.prototype)) {\n    target[key] = val;\n    return val\n  }\n  var ob = (target).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n     true && warn(\n      'Avoid adding reactive properties to a Vue instance or its root $data ' +\n      'at runtime - declare it upfront in the data option.'\n    );\n    return val\n  }\n  if (!ob) {\n    target[key] = val;\n    return val\n  }\n  defineReactive$$1(ob.value, key, val);\n  ob.dep.notify();\n  return val\n}\n\n/**\n * Delete a property and trigger change if necessary.\n */\nfunction del (target, key) {\n  if ( true &&\n    (isUndef(target) || isPrimitive(target))\n  ) {\n    warn((\"Cannot delete reactive property on undefined, null, or primitive value: \" + ((target))));\n  }\n  if (Array.isArray(target) && isValidArrayIndex(key)) {\n    target.splice(key, 1);\n    return\n  }\n  var ob = (target).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n     true && warn(\n      'Avoid deleting properties on a Vue instance or its root $data ' +\n      '- just set it to null.'\n    );\n    return\n  }\n  if (!hasOwn(target, key)) {\n    return\n  }\n  delete target[key];\n  if (!ob) {\n    return\n  }\n  ob.dep.notify();\n}\n\n/**\n * Collect dependencies on array elements when the array is touched, since\n * we cannot intercept array element access like property getters.\n */\nfunction dependArray (value) {\n  for (var e = (void 0), i = 0, l = value.length; i < l; i++) {\n    e = value[i];\n    e && e.__ob__ && e.__ob__.dep.depend();\n    if (Array.isArray(e)) {\n      dependArray(e);\n    }\n  }\n}\n\n/*  */\n\n/**\n * Option overwriting strategies are functions that handle\n * how to merge a parent option value and a child option\n * value into the final value.\n */\nvar strats = config.optionMergeStrategies;\n\n/**\n * Options with restrictions\n */\nif (true) {\n  strats.el = strats.propsData = function (parent, child, vm, key) {\n    if (!vm) {\n      warn(\n        \"option \\\"\" + key + \"\\\" can only be used during instance \" +\n        'creation with the `new` keyword.'\n      );\n    }\n    return defaultStrat(parent, child)\n  };\n}\n\n/**\n * Helper that recursively merges two data objects together.\n */\nfunction mergeData (to, from) {\n  if (!from) { return to }\n  var key, toVal, fromVal;\n\n  var keys = hasSymbol\n    ? Reflect.ownKeys(from)\n    : Object.keys(from);\n\n  for (var i = 0; i < keys.length; i++) {\n    key = keys[i];\n    // in case the object is already observed...\n    if (key === '__ob__') { continue }\n    toVal = to[key];\n    fromVal = from[key];\n    if (!hasOwn(to, key)) {\n      set(to, key, fromVal);\n    } else if (\n      toVal !== fromVal &&\n      isPlainObject(toVal) &&\n      isPlainObject(fromVal)\n    ) {\n      mergeData(toVal, fromVal);\n    }\n  }\n  return to\n}\n\n/**\n * Data\n */\nfunction mergeDataOrFn (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    // in a Vue.extend merge, both should be functions\n    if (!childVal) {\n      return parentVal\n    }\n    if (!parentVal) {\n      return childVal\n    }\n    // when parentVal & childVal are both present,\n    // we need to return a function that returns the\n    // merged result of both functions... no need to\n    // check if parentVal is a function here because\n    // it has to be a function to pass previous merges.\n    return function mergedDataFn () {\n      return mergeData(\n        typeof childVal === 'function' ? childVal.call(this, this) : childVal,\n        typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal\n      )\n    }\n  } else {\n    return function mergedInstanceDataFn () {\n      // instance merge\n      var instanceData = typeof childVal === 'function'\n        ? childVal.call(vm, vm)\n        : childVal;\n      var defaultData = typeof parentVal === 'function'\n        ? parentVal.call(vm, vm)\n        : parentVal;\n      if (instanceData) {\n        return mergeData(instanceData, defaultData)\n      } else {\n        return defaultData\n      }\n    }\n  }\n}\n\nstrats.data = function (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    if (childVal && typeof childVal !== 'function') {\n       true && warn(\n        'The \"data\" option should be a function ' +\n        'that returns a per-instance value in component ' +\n        'definitions.',\n        vm\n      );\n\n      return parentVal\n    }\n    return mergeDataOrFn(parentVal, childVal)\n  }\n\n  return mergeDataOrFn(parentVal, childVal, vm)\n};\n\n/**\n * Hooks and props are merged as arrays.\n */\nfunction mergeHook (\n  parentVal,\n  childVal\n) {\n  var res = childVal\n    ? parentVal\n      ? parentVal.concat(childVal)\n      : Array.isArray(childVal)\n        ? childVal\n        : [childVal]\n    : parentVal;\n  return res\n    ? dedupeHooks(res)\n    : res\n}\n\nfunction dedupeHooks (hooks) {\n  var res = [];\n  for (var i = 0; i < hooks.length; i++) {\n    if (res.indexOf(hooks[i]) === -1) {\n      res.push(hooks[i]);\n    }\n  }\n  return res\n}\n\nLIFECYCLE_HOOKS.forEach(function (hook) {\n  strats[hook] = mergeHook;\n});\n\n/**\n * Assets\n *\n * When a vm is present (instance creation), we need to do\n * a three-way merge between constructor options, instance\n * options and parent options.\n */\nfunction mergeAssets (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  var res = Object.create(parentVal || null);\n  if (childVal) {\n     true && assertObjectType(key, childVal, vm);\n    return extend(res, childVal)\n  } else {\n    return res\n  }\n}\n\nASSET_TYPES.forEach(function (type) {\n  strats[type + 's'] = mergeAssets;\n});\n\n/**\n * Watchers.\n *\n * Watchers hashes should not overwrite one\n * another, so we merge them as arrays.\n */\nstrats.watch = function (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  // work around Firefox's Object.prototype.watch...\n  if (parentVal === nativeWatch) { parentVal = undefined; }\n  if (childVal === nativeWatch) { childVal = undefined; }\n  /* istanbul ignore if */\n  if (!childVal) { return Object.create(parentVal || null) }\n  if (true) {\n    assertObjectType(key, childVal, vm);\n  }\n  if (!parentVal) { return childVal }\n  var ret = {};\n  extend(ret, parentVal);\n  for (var key$1 in childVal) {\n    var parent = ret[key$1];\n    var child = childVal[key$1];\n    if (parent && !Array.isArray(parent)) {\n      parent = [parent];\n    }\n    ret[key$1] = parent\n      ? parent.concat(child)\n      : Array.isArray(child) ? child : [child];\n  }\n  return ret\n};\n\n/**\n * Other object hashes.\n */\nstrats.props =\nstrats.methods =\nstrats.inject =\nstrats.computed = function (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  if (childVal && \"development\" !== 'production') {\n    assertObjectType(key, childVal, vm);\n  }\n  if (!parentVal) { return childVal }\n  var ret = Object.create(null);\n  extend(ret, parentVal);\n  if (childVal) { extend(ret, childVal); }\n  return ret\n};\nstrats.provide = mergeDataOrFn;\n\n/**\n * Default strategy.\n */\nvar defaultStrat = function (parentVal, childVal) {\n  return childVal === undefined\n    ? parentVal\n    : childVal\n};\n\n/**\n * Validate component names\n */\nfunction checkComponents (options) {\n  for (var key in options.components) {\n    validateComponentName(key);\n  }\n}\n\nfunction validateComponentName (name) {\n  if (!new RegExp((\"^[a-zA-Z][\\\\-\\\\.0-9_\" + (unicodeRegExp.source) + \"]*$\")).test(name)) {\n    warn(\n      'Invalid component name: \"' + name + '\". Component names ' +\n      'should conform to valid custom element name in html5 specification.'\n    );\n  }\n  if (isBuiltInTag(name) || config.isReservedTag(name)) {\n    warn(\n      'Do not use built-in or reserved HTML elements as component ' +\n      'id: ' + name\n    );\n  }\n}\n\n/**\n * Ensure all props option syntax are normalized into the\n * Object-based format.\n */\nfunction normalizeProps (options, vm) {\n  var props = options.props;\n  if (!props) { return }\n  var res = {};\n  var i, val, name;\n  if (Array.isArray(props)) {\n    i = props.length;\n    while (i--) {\n      val = props[i];\n      if (typeof val === 'string') {\n        name = camelize(val);\n        res[name] = { type: null };\n      } else if (true) {\n        warn('props must be strings when using array syntax.');\n      }\n    }\n  } else if (isPlainObject(props)) {\n    for (var key in props) {\n      val = props[key];\n      name = camelize(key);\n      res[name] = isPlainObject(val)\n        ? val\n        : { type: val };\n    }\n  } else if (true) {\n    warn(\n      \"Invalid value for option \\\"props\\\": expected an Array or an Object, \" +\n      \"but got \" + (toRawType(props)) + \".\",\n      vm\n    );\n  }\n  options.props = res;\n}\n\n/**\n * Normalize all injections into Object-based format\n */\nfunction normalizeInject (options, vm) {\n  var inject = options.inject;\n  if (!inject) { return }\n  var normalized = options.inject = {};\n  if (Array.isArray(inject)) {\n    for (var i = 0; i < inject.length; i++) {\n      normalized[inject[i]] = { from: inject[i] };\n    }\n  } else if (isPlainObject(inject)) {\n    for (var key in inject) {\n      var val = inject[key];\n      normalized[key] = isPlainObject(val)\n        ? extend({ from: key }, val)\n        : { from: val };\n    }\n  } else if (true) {\n    warn(\n      \"Invalid value for option \\\"inject\\\": expected an Array or an Object, \" +\n      \"but got \" + (toRawType(inject)) + \".\",\n      vm\n    );\n  }\n}\n\n/**\n * Normalize raw function directives into object format.\n */\nfunction normalizeDirectives (options) {\n  var dirs = options.directives;\n  if (dirs) {\n    for (var key in dirs) {\n      var def$$1 = dirs[key];\n      if (typeof def$$1 === 'function') {\n        dirs[key] = { bind: def$$1, update: def$$1 };\n      }\n    }\n  }\n}\n\nfunction assertObjectType (name, value, vm) {\n  if (!isPlainObject(value)) {\n    warn(\n      \"Invalid value for option \\\"\" + name + \"\\\": expected an Object, \" +\n      \"but got \" + (toRawType(value)) + \".\",\n      vm\n    );\n  }\n}\n\n/**\n * Merge two option objects into a new one.\n * Core utility used in both instantiation and inheritance.\n */\nfunction mergeOptions (\n  parent,\n  child,\n  vm\n) {\n  if (true) {\n    checkComponents(child);\n  }\n\n  if (typeof child === 'function') {\n    child = child.options;\n  }\n\n  normalizeProps(child, vm);\n  normalizeInject(child, vm);\n  normalizeDirectives(child);\n\n  // Apply extends and mixins on the child options,\n  // but only if it is a raw options object that isn't\n  // the result of another mergeOptions call.\n  // Only merged options has the _base property.\n  if (!child._base) {\n    if (child.extends) {\n      parent = mergeOptions(parent, child.extends, vm);\n    }\n    if (child.mixins) {\n      for (var i = 0, l = child.mixins.length; i < l; i++) {\n        parent = mergeOptions(parent, child.mixins[i], vm);\n      }\n    }\n  }\n\n  var options = {};\n  var key;\n  for (key in parent) {\n    mergeField(key);\n  }\n  for (key in child) {\n    if (!hasOwn(parent, key)) {\n      mergeField(key);\n    }\n  }\n  function mergeField (key) {\n    var strat = strats[key] || defaultStrat;\n    options[key] = strat(parent[key], child[key], vm, key);\n  }\n  return options\n}\n\n/**\n * Resolve an asset.\n * This function is used because child instances need access\n * to assets defined in its ancestor chain.\n */\nfunction resolveAsset (\n  options,\n  type,\n  id,\n  warnMissing\n) {\n  /* istanbul ignore if */\n  if (typeof id !== 'string') {\n    return\n  }\n  var assets = options[type];\n  // check local registration variations first\n  if (hasOwn(assets, id)) { return assets[id] }\n  var camelizedId = camelize(id);\n  if (hasOwn(assets, camelizedId)) { return assets[camelizedId] }\n  var PascalCaseId = capitalize(camelizedId);\n  if (hasOwn(assets, PascalCaseId)) { return assets[PascalCaseId] }\n  // fallback to prototype chain\n  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];\n  if ( true && warnMissing && !res) {\n    warn(\n      'Failed to resolve ' + type.slice(0, -1) + ': ' + id,\n      options\n    );\n  }\n  return res\n}\n\n/*  */\n\n\n\nfunction validateProp (\n  key,\n  propOptions,\n  propsData,\n  vm\n) {\n  var prop = propOptions[key];\n  var absent = !hasOwn(propsData, key);\n  var value = propsData[key];\n  // boolean casting\n  var booleanIndex = getTypeIndex(Boolean, prop.type);\n  if (booleanIndex > -1) {\n    if (absent && !hasOwn(prop, 'default')) {\n      value = false;\n    } else if (value === '' || value === hyphenate(key)) {\n      // only cast empty string / same name to boolean if\n      // boolean has higher priority\n      var stringIndex = getTypeIndex(String, prop.type);\n      if (stringIndex < 0 || booleanIndex < stringIndex) {\n        value = true;\n      }\n    }\n  }\n  // check default value\n  if (value === undefined) {\n    value = getPropDefaultValue(vm, prop, key);\n    // since the default value is a fresh copy,\n    // make sure to observe it.\n    var prevShouldObserve = shouldObserve;\n    toggleObserving(true);\n    observe(value);\n    toggleObserving(prevShouldObserve);\n  }\n  if (\n    true\n  ) {\n    assertProp(prop, key, value, vm, absent);\n  }\n  return value\n}\n\n/**\n * Get the default value of a prop.\n */\nfunction getPropDefaultValue (vm, prop, key) {\n  // no default, return undefined\n  if (!hasOwn(prop, 'default')) {\n    return undefined\n  }\n  var def = prop.default;\n  // warn against non-factory defaults for Object & Array\n  if ( true && isObject(def)) {\n    warn(\n      'Invalid default value for prop \"' + key + '\": ' +\n      'Props with type Object/Array must use a factory function ' +\n      'to return the default value.',\n      vm\n    );\n  }\n  // the raw prop value was also undefined from previous render,\n  // return previous default value to avoid unnecessary watcher trigger\n  if (vm && vm.$options.propsData &&\n    vm.$options.propsData[key] === undefined &&\n    vm._props[key] !== undefined\n  ) {\n    return vm._props[key]\n  }\n  // call factory function for non-Function types\n  // a value is Function if its prototype is function even across different execution context\n  return typeof def === 'function' && getType(prop.type) !== 'Function'\n    ? def.call(vm)\n    : def\n}\n\n/**\n * Assert whether a prop is valid.\n */\nfunction assertProp (\n  prop,\n  name,\n  value,\n  vm,\n  absent\n) {\n  if (prop.required && absent) {\n    warn(\n      'Missing required prop: \"' + name + '\"',\n      vm\n    );\n    return\n  }\n  if (value == null && !prop.required) {\n    return\n  }\n  var type = prop.type;\n  var valid = !type || type === true;\n  var expectedTypes = [];\n  if (type) {\n    if (!Array.isArray(type)) {\n      type = [type];\n    }\n    for (var i = 0; i < type.length && !valid; i++) {\n      var assertedType = assertType(value, type[i]);\n      expectedTypes.push(assertedType.expectedType || '');\n      valid = assertedType.valid;\n    }\n  }\n\n  if (!valid) {\n    warn(\n      getInvalidTypeMessage(name, value, expectedTypes),\n      vm\n    );\n    return\n  }\n  var validator = prop.validator;\n  if (validator) {\n    if (!validator(value)) {\n      warn(\n        'Invalid prop: custom validator check failed for prop \"' + name + '\".',\n        vm\n      );\n    }\n  }\n}\n\nvar simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;\n\nfunction assertType (value, type) {\n  var valid;\n  var expectedType = getType(type);\n  if (simpleCheckRE.test(expectedType)) {\n    var t = typeof value;\n    valid = t === expectedType.toLowerCase();\n    // for primitive wrapper objects\n    if (!valid && t === 'object') {\n      valid = value instanceof type;\n    }\n  } else if (expectedType === 'Object') {\n    valid = isPlainObject(value);\n  } else if (expectedType === 'Array') {\n    valid = Array.isArray(value);\n  } else {\n    valid = value instanceof type;\n  }\n  return {\n    valid: valid,\n    expectedType: expectedType\n  }\n}\n\n/**\n * Use function string name to check built-in types,\n * because a simple equality check will fail when running\n * across different vms / iframes.\n */\nfunction getType (fn) {\n  var match = fn && fn.toString().match(/^\\s*function (\\w+)/);\n  return match ? match[1] : ''\n}\n\nfunction isSameType (a, b) {\n  return getType(a) === getType(b)\n}\n\nfunction getTypeIndex (type, expectedTypes) {\n  if (!Array.isArray(expectedTypes)) {\n    return isSameType(expectedTypes, type) ? 0 : -1\n  }\n  for (var i = 0, len = expectedTypes.length; i < len; i++) {\n    if (isSameType(expectedTypes[i], type)) {\n      return i\n    }\n  }\n  return -1\n}\n\nfunction getInvalidTypeMessage (name, value, expectedTypes) {\n  var message = \"Invalid prop: type check failed for prop \\\"\" + name + \"\\\".\" +\n    \" Expected \" + (expectedTypes.map(capitalize).join(', '));\n  var expectedType = expectedTypes[0];\n  var receivedType = toRawType(value);\n  var expectedValue = styleValue(value, expectedType);\n  var receivedValue = styleValue(value, receivedType);\n  // check if we need to specify expected value\n  if (expectedTypes.length === 1 &&\n      isExplicable(expectedType) &&\n      !isBoolean(expectedType, receivedType)) {\n    message += \" with value \" + expectedValue;\n  }\n  message += \", got \" + receivedType + \" \";\n  // check if we need to specify received value\n  if (isExplicable(receivedType)) {\n    message += \"with value \" + receivedValue + \".\";\n  }\n  return message\n}\n\nfunction styleValue (value, type) {\n  if (type === 'String') {\n    return (\"\\\"\" + value + \"\\\"\")\n  } else if (type === 'Number') {\n    return (\"\" + (Number(value)))\n  } else {\n    return (\"\" + value)\n  }\n}\n\nfunction isExplicable (value) {\n  var explicitTypes = ['string', 'number', 'boolean'];\n  return explicitTypes.some(function (elem) { return value.toLowerCase() === elem; })\n}\n\nfunction isBoolean () {\n  var args = [], len = arguments.length;\n  while ( len-- ) args[ len ] = arguments[ len ];\n\n  return args.some(function (elem) { return elem.toLowerCase() === 'boolean'; })\n}\n\n/*  */\n\nfunction handleError (err, vm, info) {\n  // Deactivate deps tracking while processing error handler to avoid possible infinite rendering.\n  // See: https://github.com/vuejs/vuex/issues/1505\n  pushTarget();\n  try {\n    if (vm) {\n      var cur = vm;\n      while ((cur = cur.$parent)) {\n        var hooks = cur.$options.errorCaptured;\n        if (hooks) {\n          for (var i = 0; i < hooks.length; i++) {\n            try {\n              var capture = hooks[i].call(cur, err, vm, info) === false;\n              if (capture) { return }\n            } catch (e) {\n              globalHandleError(e, cur, 'errorCaptured hook');\n            }\n          }\n        }\n      }\n    }\n    globalHandleError(err, vm, info);\n  } finally {\n    popTarget();\n  }\n}\n\nfunction invokeWithErrorHandling (\n  handler,\n  context,\n  args,\n  vm,\n  info\n) {\n  var res;\n  try {\n    res = args ? handler.apply(context, args) : handler.call(context);\n    if (res && !res._isVue && isPromise(res) && !res._handled) {\n      res.catch(function (e) { return handleError(e, vm, info + \" (Promise/async)\"); });\n      // issue #9511\n      // avoid catch triggering multiple times when nested calls\n      res._handled = true;\n    }\n  } catch (e) {\n    handleError(e, vm, info);\n  }\n  return res\n}\n\nfunction globalHandleError (err, vm, info) {\n  if (config.errorHandler) {\n    try {\n      return config.errorHandler.call(null, err, vm, info)\n    } catch (e) {\n      // if the user intentionally throws the original error in the handler,\n      // do not log it twice\n      if (e !== err) {\n        logError(e, null, 'config.errorHandler');\n      }\n    }\n  }\n  logError(err, vm, info);\n}\n\nfunction logError (err, vm, info) {\n  if (true) {\n    warn((\"Error in \" + info + \": \\\"\" + (err.toString()) + \"\\\"\"), vm);\n  }\n  /* istanbul ignore else */\n  if ((inBrowser || inWeex) && typeof console !== 'undefined') {\n    console.error(err);\n  } else {\n    throw err\n  }\n}\n\n/*  */\n\nvar callbacks = [];\nvar pending = false;\n\nfunction flushCallbacks () {\n  pending = false;\n  var copies = callbacks.slice(0);\n  callbacks.length = 0;\n  for (var i = 0; i < copies.length; i++) {\n    copies[i]();\n  }\n}\n\n// Here we have async deferring wrappers using microtasks.\n// In 2.5 we used (macro) tasks (in combination with microtasks).\n// However, it has subtle problems when state is changed right before repaint\n// (e.g. #6813, out-in transitions).\n// Also, using (macro) tasks in event handler would cause some weird behaviors\n// that cannot be circumvented (e.g. #7109, #7153, #7546, #7834, #8109).\n// So we now use microtasks everywhere, again.\n// A major drawback of this tradeoff is that there are some scenarios\n// where microtasks have too high a priority and fire in between supposedly\n// sequential events (e.g. #4521, #6690, which have workarounds)\n// or even between bubbling of the same event (#6566).\nvar timerFunc;\n\n// The nextTick behavior leverages the microtask queue, which can be accessed\n// via either native Promise.then or MutationObserver.\n// MutationObserver has wider support, however it is seriously bugged in\n// UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It\n// completely stops working after triggering a few times... so, if native\n// Promise is available, we will use it:\n/* istanbul ignore next, $flow-disable-line */\nif (typeof Promise !== 'undefined' && isNative(Promise)) {\n  var p = Promise.resolve();\n  timerFunc = function () {\n    p.then(flushCallbacks);\n    // In problematic UIWebViews, Promise.then doesn't completely break, but\n    // it can get stuck in a weird state where callbacks are pushed into the\n    // microtask queue but the queue isn't being flushed, until the browser\n    // needs to do some other work, e.g. handle a timer. Therefore we can\n    // \"force\" the microtask queue to be flushed by adding an empty timer.\n    if (isIOS) { setTimeout(noop); }\n  };\n} else if (!isIE && typeof MutationObserver !== 'undefined' && (\n  isNative(MutationObserver) ||\n  // PhantomJS and iOS 7.x\n  MutationObserver.toString() === '[object MutationObserverConstructor]'\n)) {\n  // Use MutationObserver where native Promise is not available,\n  // e.g. PhantomJS, iOS7, Android 4.4\n  // (#6466 MutationObserver is unreliable in IE11)\n  var counter = 1;\n  var observer = new MutationObserver(flushCallbacks);\n  var textNode = document.createTextNode(String(counter));\n  observer.observe(textNode, {\n    characterData: true\n  });\n  timerFunc = function () {\n    counter = (counter + 1) % 2;\n    textNode.data = String(counter);\n  };\n} else if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {\n  // Fallback to setImmediate.\n  // Technically it leverages the (macro) task queue,\n  // but it is still a better choice than setTimeout.\n  timerFunc = function () {\n    setImmediate(flushCallbacks);\n  };\n} else {\n  // Fallback to setTimeout.\n  timerFunc = function () {\n    setTimeout(flushCallbacks, 0);\n  };\n}\n\nfunction nextTick (cb, ctx) {\n  var _resolve;\n  callbacks.push(function () {\n    if (cb) {\n      try {\n        cb.call(ctx);\n      } catch (e) {\n        handleError(e, ctx, 'nextTick');\n      }\n    } else if (_resolve) {\n      _resolve(ctx);\n    }\n  });\n  if (!pending) {\n    pending = true;\n    timerFunc();\n  }\n  // $flow-disable-line\n  if (!cb && typeof Promise !== 'undefined') {\n    return new Promise(function (resolve) {\n      _resolve = resolve;\n    })\n  }\n}\n\n/*  */\n\n/* not type checking this file because flow doesn't play well with Proxy */\n\nvar initProxy;\n\nif (true) {\n  var allowedGlobals = makeMap(\n    'Infinity,undefined,NaN,isFinite,isNaN,' +\n    'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +\n    'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' +\n    'require' // for Webpack/Browserify\n  );\n\n  var warnNonPresent = function (target, key) {\n    warn(\n      \"Property or method \\\"\" + key + \"\\\" is not defined on the instance but \" +\n      'referenced during render. Make sure that this property is reactive, ' +\n      'either in the data option, or for class-based components, by ' +\n      'initializing the property. ' +\n      'See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.',\n      target\n    );\n  };\n\n  var warnReservedPrefix = function (target, key) {\n    warn(\n      \"Property \\\"\" + key + \"\\\" must be accessed with \\\"$data.\" + key + \"\\\" because \" +\n      'properties starting with \"$\" or \"_\" are not proxied in the Vue instance to ' +\n      'prevent conflicts with Vue internals. ' +\n      'See: https://vuejs.org/v2/api/#data',\n      target\n    );\n  };\n\n  var hasProxy =\n    typeof Proxy !== 'undefined' && isNative(Proxy);\n\n  if (hasProxy) {\n    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact');\n    config.keyCodes = new Proxy(config.keyCodes, {\n      set: function set (target, key, value) {\n        if (isBuiltInModifier(key)) {\n          warn((\"Avoid overwriting built-in modifier in config.keyCodes: .\" + key));\n          return false\n        } else {\n          target[key] = value;\n          return true\n        }\n      }\n    });\n  }\n\n  var hasHandler = {\n    has: function has (target, key) {\n      var has = key in target;\n      var isAllowed = allowedGlobals(key) ||\n        (typeof key === 'string' && key.charAt(0) === '_' && !(key in target.$data));\n      if (!has && !isAllowed) {\n        if (key in target.$data) { warnReservedPrefix(target, key); }\n        else { warnNonPresent(target, key); }\n      }\n      return has || !isAllowed\n    }\n  };\n\n  var getHandler = {\n    get: function get (target, key) {\n      if (typeof key === 'string' && !(key in target)) {\n        if (key in target.$data) { warnReservedPrefix(target, key); }\n        else { warnNonPresent(target, key); }\n      }\n      return target[key]\n    }\n  };\n\n  initProxy = function initProxy (vm) {\n    if (hasProxy) {\n      // determine which proxy handler to use\n      var options = vm.$options;\n      var handlers = options.render && options.render._withStripped\n        ? getHandler\n        : hasHandler;\n      vm._renderProxy = new Proxy(vm, handlers);\n    } else {\n      vm._renderProxy = vm;\n    }\n  };\n}\n\n/*  */\n\nvar seenObjects = new _Set();\n\n/**\n * Recursively traverse an object to evoke all converted\n * getters, so that every nested property inside the object\n * is collected as a \"deep\" dependency.\n */\nfunction traverse (val) {\n  _traverse(val, seenObjects);\n  seenObjects.clear();\n}\n\nfunction _traverse (val, seen) {\n  var i, keys;\n  var isA = Array.isArray(val);\n  if ((!isA && !isObject(val)) || Object.isFrozen(val) || val instanceof VNode) {\n    return\n  }\n  if (val.__ob__) {\n    var depId = val.__ob__.dep.id;\n    if (seen.has(depId)) {\n      return\n    }\n    seen.add(depId);\n  }\n  if (isA) {\n    i = val.length;\n    while (i--) { _traverse(val[i], seen); }\n  } else {\n    keys = Object.keys(val);\n    i = keys.length;\n    while (i--) { _traverse(val[keys[i]], seen); }\n  }\n}\n\nvar mark;\nvar measure;\n\nif (true) {\n  var perf = inBrowser && window.performance;\n  /* istanbul ignore if */\n  if (\n    perf &&\n    perf.mark &&\n    perf.measure &&\n    perf.clearMarks &&\n    perf.clearMeasures\n  ) {\n    mark = function (tag) { return perf.mark(tag); };\n    measure = function (name, startTag, endTag) {\n      perf.measure(name, startTag, endTag);\n      perf.clearMarks(startTag);\n      perf.clearMarks(endTag);\n      // perf.clearMeasures(name)\n    };\n  }\n}\n\n/*  */\n\nvar normalizeEvent = cached(function (name) {\n  var passive = name.charAt(0) === '&';\n  name = passive ? name.slice(1) : name;\n  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first\n  name = once$$1 ? name.slice(1) : name;\n  var capture = name.charAt(0) === '!';\n  name = capture ? name.slice(1) : name;\n  return {\n    name: name,\n    once: once$$1,\n    capture: capture,\n    passive: passive\n  }\n});\n\nfunction createFnInvoker (fns, vm) {\n  function invoker () {\n    var arguments$1 = arguments;\n\n    var fns = invoker.fns;\n    if (Array.isArray(fns)) {\n      var cloned = fns.slice();\n      for (var i = 0; i < cloned.length; i++) {\n        invokeWithErrorHandling(cloned[i], null, arguments$1, vm, \"v-on handler\");\n      }\n    } else {\n      // return handler return value for single handlers\n      return invokeWithErrorHandling(fns, null, arguments, vm, \"v-on handler\")\n    }\n  }\n  invoker.fns = fns;\n  return invoker\n}\n\nfunction updateListeners (\n  on,\n  oldOn,\n  add,\n  remove$$1,\n  createOnceHandler,\n  vm\n) {\n  var name, def$$1, cur, old, event;\n  for (name in on) {\n    def$$1 = cur = on[name];\n    old = oldOn[name];\n    event = normalizeEvent(name);\n    if (isUndef(cur)) {\n       true && warn(\n        \"Invalid handler for event \\\"\" + (event.name) + \"\\\": got \" + String(cur),\n        vm\n      );\n    } else if (isUndef(old)) {\n      if (isUndef(cur.fns)) {\n        cur = on[name] = createFnInvoker(cur, vm);\n      }\n      if (isTrue(event.once)) {\n        cur = on[name] = createOnceHandler(event.name, cur, event.capture);\n      }\n      add(event.name, cur, event.capture, event.passive, event.params);\n    } else if (cur !== old) {\n      old.fns = cur;\n      on[name] = old;\n    }\n  }\n  for (name in oldOn) {\n    if (isUndef(on[name])) {\n      event = normalizeEvent(name);\n      remove$$1(event.name, oldOn[name], event.capture);\n    }\n  }\n}\n\n/*  */\n\n/*  */\n\n// fixed by xxxxxx (mp properties)\r\nfunction extractPropertiesFromVNodeData(data, Ctor, res, context) {\r\n  var propOptions = Ctor.options.mpOptions && Ctor.options.mpOptions.properties;\r\n  if (isUndef(propOptions)) {\r\n    return res\r\n  }\n  var externalClasses = Ctor.options.mpOptions.externalClasses || [];\r\n  var attrs = data.attrs;\n  var props = data.props;\r\n  if (isDef(attrs) || isDef(props)) {\r\n    for (var key in propOptions) {\r\n      var altKey = hyphenate(key);\n      var result = checkProp(res, props, key, altKey, true) ||\n          checkProp(res, attrs, key, altKey, false);\n      // externalClass\n      if (\n        result &&\n        res[key] &&\n        externalClasses.indexOf(altKey) !== -1 &&\n        context[camelize(res[key])]\n      ) {\n        // 赋值 externalClass 真正的值(模板里 externalClass 的值可能是字符串)\n        res[key] = context[camelize(res[key])];\n      }\r\n    }\r\n  }\r\n  return res\r\n}\n\nfunction extractPropsFromVNodeData (\n  data,\n  Ctor,\n  tag,\n  context// fixed by xxxxxx\n) {\n  // we are only extracting raw values here.\n  // validation and default values are handled in the child\n  // component itself.\n  var propOptions = Ctor.options.props;\n  if (isUndef(propOptions)) {\n    // fixed by xxxxxx\n    return extractPropertiesFromVNodeData(data, Ctor, {}, context)\n  }\n  var res = {};\n  var attrs = data.attrs;\n  var props = data.props;\n  if (isDef(attrs) || isDef(props)) {\n    for (var key in propOptions) {\n      var altKey = hyphenate(key);\n      if (true) {\n        var keyInLowerCase = key.toLowerCase();\n        if (\n          key !== keyInLowerCase &&\n          attrs && hasOwn(attrs, keyInLowerCase)\n        ) {\n          tip(\n            \"Prop \\\"\" + keyInLowerCase + \"\\\" is passed to component \" +\n            (formatComponentName(tag || Ctor)) + \", but the declared prop name is\" +\n            \" \\\"\" + key + \"\\\". \" +\n            \"Note that HTML attributes are case-insensitive and camelCased \" +\n            \"props need to use their kebab-case equivalents when using in-DOM \" +\n            \"templates. You should probably use \\\"\" + altKey + \"\\\" instead of \\\"\" + key + \"\\\".\"\n          );\n        }\n      }\n      checkProp(res, props, key, altKey, true) ||\n      checkProp(res, attrs, key, altKey, false);\n    }\n  }\n  // fixed by xxxxxx\n  return extractPropertiesFromVNodeData(data, Ctor, res, context)\n}\n\nfunction checkProp (\n  res,\n  hash,\n  key,\n  altKey,\n  preserve\n) {\n  if (isDef(hash)) {\n    if (hasOwn(hash, key)) {\n      res[key] = hash[key];\n      if (!preserve) {\n        delete hash[key];\n      }\n      return true\n    } else if (hasOwn(hash, altKey)) {\n      res[key] = hash[altKey];\n      if (!preserve) {\n        delete hash[altKey];\n      }\n      return true\n    }\n  }\n  return false\n}\n\n/*  */\n\n// The template compiler attempts to minimize the need for normalization by\n// statically analyzing the template at compile time.\n//\n// For plain HTML markup, normalization can be completely skipped because the\n// generated render function is guaranteed to return Array<VNode>. There are\n// two cases where extra normalization is needed:\n\n// 1. When the children contains components - because a functional component\n// may return an Array instead of a single root. In this case, just a simple\n// normalization is needed - if any child is an Array, we flatten the whole\n// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep\n// because functional components already normalize their own children.\nfunction simpleNormalizeChildren (children) {\n  for (var i = 0; i < children.length; i++) {\n    if (Array.isArray(children[i])) {\n      return Array.prototype.concat.apply([], children)\n    }\n  }\n  return children\n}\n\n// 2. When the children contains constructs that always generated nested Arrays,\n// e.g. <template>, <slot>, v-for, or when the children is provided by user\n// with hand-written render functions / JSX. In such cases a full normalization\n// is needed to cater to all possible types of children values.\nfunction normalizeChildren (children) {\n  return isPrimitive(children)\n    ? [createTextVNode(children)]\n    : Array.isArray(children)\n      ? normalizeArrayChildren(children)\n      : undefined\n}\n\nfunction isTextNode (node) {\n  return isDef(node) && isDef(node.text) && isFalse(node.isComment)\n}\n\nfunction normalizeArrayChildren (children, nestedIndex) {\n  var res = [];\n  var i, c, lastIndex, last;\n  for (i = 0; i < children.length; i++) {\n    c = children[i];\n    if (isUndef(c) || typeof c === 'boolean') { continue }\n    lastIndex = res.length - 1;\n    last = res[lastIndex];\n    //  nested\n    if (Array.isArray(c)) {\n      if (c.length > 0) {\n        c = normalizeArrayChildren(c, ((nestedIndex || '') + \"_\" + i));\n        // merge adjacent text nodes\n        if (isTextNode(c[0]) && isTextNode(last)) {\n          res[lastIndex] = createTextVNode(last.text + (c[0]).text);\n          c.shift();\n        }\n        res.push.apply(res, c);\n      }\n    } else if (isPrimitive(c)) {\n      if (isTextNode(last)) {\n        // merge adjacent text nodes\n        // this is necessary for SSR hydration because text nodes are\n        // essentially merged when rendered to HTML strings\n        res[lastIndex] = createTextVNode(last.text + c);\n      } else if (c !== '') {\n        // convert primitive to vnode\n        res.push(createTextVNode(c));\n      }\n    } else {\n      if (isTextNode(c) && isTextNode(last)) {\n        // merge adjacent text nodes\n        res[lastIndex] = createTextVNode(last.text + c.text);\n      } else {\n        // default key for nested array children (likely generated by v-for)\n        if (isTrue(children._isVList) &&\n          isDef(c.tag) &&\n          isUndef(c.key) &&\n          isDef(nestedIndex)) {\n          c.key = \"__vlist\" + nestedIndex + \"_\" + i + \"__\";\n        }\n        res.push(c);\n      }\n    }\n  }\n  return res\n}\n\n/*  */\n\nfunction initProvide (vm) {\n  var provide = vm.$options.provide;\n  if (provide) {\n    vm._provided = typeof provide === 'function'\n      ? provide.call(vm)\n      : provide;\n  }\n}\n\nfunction initInjections (vm) {\n  var result = resolveInject(vm.$options.inject, vm);\n  if (result) {\n    toggleObserving(false);\n    Object.keys(result).forEach(function (key) {\n      /* istanbul ignore else */\n      if (true) {\n        defineReactive$$1(vm, key, result[key], function () {\n          warn(\n            \"Avoid mutating an injected value directly since the changes will be \" +\n            \"overwritten whenever the provided component re-renders. \" +\n            \"injection being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        });\n      } else {}\n    });\n    toggleObserving(true);\n  }\n}\n\nfunction resolveInject (inject, vm) {\n  if (inject) {\n    // inject is :any because flow is not smart enough to figure out cached\n    var result = Object.create(null);\n    var keys = hasSymbol\n      ? Reflect.ownKeys(inject)\n      : Object.keys(inject);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      // #6574 in case the inject object is observed...\n      if (key === '__ob__') { continue }\n      var provideKey = inject[key].from;\n      var source = vm;\n      while (source) {\n        if (source._provided && hasOwn(source._provided, provideKey)) {\n          result[key] = source._provided[provideKey];\n          break\n        }\n        source = source.$parent;\n      }\n      if (!source) {\n        if ('default' in inject[key]) {\n          var provideDefault = inject[key].default;\n          result[key] = typeof provideDefault === 'function'\n            ? provideDefault.call(vm)\n            : provideDefault;\n        } else if (true) {\n          warn((\"Injection \\\"\" + key + \"\\\" not found\"), vm);\n        }\n      }\n    }\n    return result\n  }\n}\n\n/*  */\n\n\n\n/**\n * Runtime helper for resolving raw children VNodes into a slot object.\n */\nfunction resolveSlots (\n  children,\n  context\n) {\n  if (!children || !children.length) {\n    return {}\n  }\n  var slots = {};\n  for (var i = 0, l = children.length; i < l; i++) {\n    var child = children[i];\n    var data = child.data;\n    // remove slot attribute if the node is resolved as a Vue slot node\n    if (data && data.attrs && data.attrs.slot) {\n      delete data.attrs.slot;\n    }\n    // named slots should only be respected if the vnode was rendered in the\n    // same context.\n    if ((child.context === context || child.fnContext === context) &&\n      data && data.slot != null\n    ) {\n      var name = data.slot;\n      var slot = (slots[name] || (slots[name] = []));\n      if (child.tag === 'template') {\n        slot.push.apply(slot, child.children || []);\n      } else {\n        slot.push(child);\n      }\n    } else {\n      // fixed by xxxxxx 临时 hack 掉 uni-app 中的异步 name slot page\n      if(child.asyncMeta && child.asyncMeta.data && child.asyncMeta.data.slot === 'page'){\n        (slots['page'] || (slots['page'] = [])).push(child);\n      }else{\n        (slots.default || (slots.default = [])).push(child);\n      }\n    }\n  }\n  // ignore slots that contains only whitespace\n  for (var name$1 in slots) {\n    if (slots[name$1].every(isWhitespace)) {\n      delete slots[name$1];\n    }\n  }\n  return slots\n}\n\nfunction isWhitespace (node) {\n  return (node.isComment && !node.asyncFactory) || node.text === ' '\n}\n\n/*  */\n\nfunction normalizeScopedSlots (\n  slots,\n  normalSlots,\n  prevSlots\n) {\n  var res;\n  var hasNormalSlots = Object.keys(normalSlots).length > 0;\n  var isStable = slots ? !!slots.$stable : !hasNormalSlots;\n  var key = slots && slots.$key;\n  if (!slots) {\n    res = {};\n  } else if (slots._normalized) {\n    // fast path 1: child component re-render only, parent did not change\n    return slots._normalized\n  } else if (\n    isStable &&\n    prevSlots &&\n    prevSlots !== emptyObject &&\n    key === prevSlots.$key &&\n    !hasNormalSlots &&\n    !prevSlots.$hasNormal\n  ) {\n    // fast path 2: stable scoped slots w/ no normal slots to proxy,\n    // only need to normalize once\n    return prevSlots\n  } else {\n    res = {};\n    for (var key$1 in slots) {\n      if (slots[key$1] && key$1[0] !== '$') {\n        res[key$1] = normalizeScopedSlot(normalSlots, key$1, slots[key$1]);\n      }\n    }\n  }\n  // expose normal slots on scopedSlots\n  for (var key$2 in normalSlots) {\n    if (!(key$2 in res)) {\n      res[key$2] = proxyNormalSlot(normalSlots, key$2);\n    }\n  }\n  // avoriaz seems to mock a non-extensible $scopedSlots object\n  // and when that is passed down this would cause an error\n  if (slots && Object.isExtensible(slots)) {\n    (slots)._normalized = res;\n  }\n  def(res, '$stable', isStable);\n  def(res, '$key', key);\n  def(res, '$hasNormal', hasNormalSlots);\n  return res\n}\n\nfunction normalizeScopedSlot(normalSlots, key, fn) {\n  var normalized = function () {\n    var res = arguments.length ? fn.apply(null, arguments) : fn({});\n    res = res && typeof res === 'object' && !Array.isArray(res)\n      ? [res] // single vnode\n      : normalizeChildren(res);\n    return res && (\n      res.length === 0 ||\n      (res.length === 1 && res[0].isComment) // #9658\n    ) ? undefined\n      : res\n  };\n  // this is a slot using the new v-slot syntax without scope. although it is\n  // compiled as a scoped slot, render fn users would expect it to be present\n  // on this.$slots because the usage is semantically a normal slot.\n  if (fn.proxy) {\n    Object.defineProperty(normalSlots, key, {\n      get: normalized,\n      enumerable: true,\n      configurable: true\n    });\n  }\n  return normalized\n}\n\nfunction proxyNormalSlot(slots, key) {\n  return function () { return slots[key]; }\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering v-for lists.\n */\nfunction renderList (\n  val,\n  render\n) {\n  var ret, i, l, keys, key;\n  if (Array.isArray(val) || typeof val === 'string') {\n    ret = new Array(val.length);\n    for (i = 0, l = val.length; i < l; i++) {\n      ret[i] = render(val[i], i, i, i); // fixed by xxxxxx\n    }\n  } else if (typeof val === 'number') {\n    ret = new Array(val);\n    for (i = 0; i < val; i++) {\n      ret[i] = render(i + 1, i, i, i); // fixed by xxxxxx\n    }\n  } else if (isObject(val)) {\n    if (hasSymbol && val[Symbol.iterator]) {\n      ret = [];\n      var iterator = val[Symbol.iterator]();\n      var result = iterator.next();\n      while (!result.done) {\n        ret.push(render(result.value, ret.length, i++, i)); // fixed by xxxxxx\n        result = iterator.next();\n      }\n    } else {\n      keys = Object.keys(val);\n      ret = new Array(keys.length);\n      for (i = 0, l = keys.length; i < l; i++) {\n        key = keys[i];\n        ret[i] = render(val[key], key, i, i); // fixed by xxxxxx\n      }\n    }\n  }\n  if (!isDef(ret)) {\n    ret = [];\n  }\n  (ret)._isVList = true;\n  return ret\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering <slot>\n */\nfunction renderSlot (\n  name,\n  fallback,\n  props,\n  bindObject\n) {\n  var scopedSlotFn = this.$scopedSlots[name];\n  var nodes;\n  if (scopedSlotFn) { // scoped slot\n    props = props || {};\n    if (bindObject) {\n      if ( true && !isObject(bindObject)) {\n        warn(\n          'slot v-bind without argument expects an Object',\n          this\n        );\n      }\n      props = extend(extend({}, bindObject), props);\n    }\n    // fixed by xxxxxx app-plus scopedSlot\n    nodes = scopedSlotFn(props, this, props._i) || fallback;\n  } else {\n    nodes = this.$slots[name] || fallback;\n  }\n\n  var target = props && props.slot;\n  if (target) {\n    return this.$createElement('template', { slot: target }, nodes)\n  } else {\n    return nodes\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for resolving filters\n */\nfunction resolveFilter (id) {\n  return resolveAsset(this.$options, 'filters', id, true) || identity\n}\n\n/*  */\n\nfunction isKeyNotMatch (expect, actual) {\n  if (Array.isArray(expect)) {\n    return expect.indexOf(actual) === -1\n  } else {\n    return expect !== actual\n  }\n}\n\n/**\n * Runtime helper for checking keyCodes from config.\n * exposed as Vue.prototype._k\n * passing in eventKeyName as last argument separately for backwards compat\n */\nfunction checkKeyCodes (\n  eventKeyCode,\n  key,\n  builtInKeyCode,\n  eventKeyName,\n  builtInKeyName\n) {\n  var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;\n  if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {\n    return isKeyNotMatch(builtInKeyName, eventKeyName)\n  } else if (mappedKeyCode) {\n    return isKeyNotMatch(mappedKeyCode, eventKeyCode)\n  } else if (eventKeyName) {\n    return hyphenate(eventKeyName) !== key\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for merging v-bind=\"object\" into a VNode's data.\n */\nfunction bindObjectProps (\n  data,\n  tag,\n  value,\n  asProp,\n  isSync\n) {\n  if (value) {\n    if (!isObject(value)) {\n       true && warn(\n        'v-bind without argument expects an Object or Array value',\n        this\n      );\n    } else {\n      if (Array.isArray(value)) {\n        value = toObject(value);\n      }\n      var hash;\n      var loop = function ( key ) {\n        if (\n          key === 'class' ||\n          key === 'style' ||\n          isReservedAttribute(key)\n        ) {\n          hash = data;\n        } else {\n          var type = data.attrs && data.attrs.type;\n          hash = asProp || config.mustUseProp(tag, type, key)\n            ? data.domProps || (data.domProps = {})\n            : data.attrs || (data.attrs = {});\n        }\n        var camelizedKey = camelize(key);\n        var hyphenatedKey = hyphenate(key);\n        if (!(camelizedKey in hash) && !(hyphenatedKey in hash)) {\n          hash[key] = value[key];\n\n          if (isSync) {\n            var on = data.on || (data.on = {});\n            on[(\"update:\" + key)] = function ($event) {\n              value[key] = $event;\n            };\n          }\n        }\n      };\n\n      for (var key in value) loop( key );\n    }\n  }\n  return data\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering static trees.\n */\nfunction renderStatic (\n  index,\n  isInFor\n) {\n  var cached = this._staticTrees || (this._staticTrees = []);\n  var tree = cached[index];\n  // if has already-rendered static tree and not inside v-for,\n  // we can reuse the same tree.\n  if (tree && !isInFor) {\n    return tree\n  }\n  // otherwise, render a fresh tree.\n  tree = cached[index] = this.$options.staticRenderFns[index].call(\n    this._renderProxy,\n    null,\n    this // for render fns generated for functional component templates\n  );\n  markStatic(tree, (\"__static__\" + index), false);\n  return tree\n}\n\n/**\n * Runtime helper for v-once.\n * Effectively it means marking the node as static with a unique key.\n */\nfunction markOnce (\n  tree,\n  index,\n  key\n) {\n  markStatic(tree, (\"__once__\" + index + (key ? (\"_\" + key) : \"\")), true);\n  return tree\n}\n\nfunction markStatic (\n  tree,\n  key,\n  isOnce\n) {\n  if (Array.isArray(tree)) {\n    for (var i = 0; i < tree.length; i++) {\n      if (tree[i] && typeof tree[i] !== 'string') {\n        markStaticNode(tree[i], (key + \"_\" + i), isOnce);\n      }\n    }\n  } else {\n    markStaticNode(tree, key, isOnce);\n  }\n}\n\nfunction markStaticNode (node, key, isOnce) {\n  node.isStatic = true;\n  node.key = key;\n  node.isOnce = isOnce;\n}\n\n/*  */\n\nfunction bindObjectListeners (data, value) {\n  if (value) {\n    if (!isPlainObject(value)) {\n       true && warn(\n        'v-on without argument expects an Object value',\n        this\n      );\n    } else {\n      var on = data.on = data.on ? extend({}, data.on) : {};\n      for (var key in value) {\n        var existing = on[key];\n        var ours = value[key];\n        on[key] = existing ? [].concat(existing, ours) : ours;\n      }\n    }\n  }\n  return data\n}\n\n/*  */\n\nfunction resolveScopedSlots (\n  fns, // see flow/vnode\n  res,\n  // the following are added in 2.6\n  hasDynamicKeys,\n  contentHashKey\n) {\n  res = res || { $stable: !hasDynamicKeys };\n  for (var i = 0; i < fns.length; i++) {\n    var slot = fns[i];\n    if (Array.isArray(slot)) {\n      resolveScopedSlots(slot, res, hasDynamicKeys);\n    } else if (slot) {\n      // marker for reverse proxying v-slot without scope on this.$slots\n      if (slot.proxy) {\n        slot.fn.proxy = true;\n      }\n      res[slot.key] = slot.fn;\n    }\n  }\n  if (contentHashKey) {\n    (res).$key = contentHashKey;\n  }\n  return res\n}\n\n/*  */\n\nfunction bindDynamicKeys (baseObj, values) {\n  for (var i = 0; i < values.length; i += 2) {\n    var key = values[i];\n    if (typeof key === 'string' && key) {\n      baseObj[values[i]] = values[i + 1];\n    } else if ( true && key !== '' && key !== null) {\n      // null is a special value for explicitly removing a binding\n      warn(\n        (\"Invalid value for dynamic directive argument (expected string or null): \" + key),\n        this\n      );\n    }\n  }\n  return baseObj\n}\n\n// helper to dynamically append modifier runtime markers to event names.\n// ensure only append when value is already string, otherwise it will be cast\n// to string and cause the type check to miss.\nfunction prependModifier (value, symbol) {\n  return typeof value === 'string' ? symbol + value : value\n}\n\n/*  */\n\nfunction installRenderHelpers (target) {\n  target._o = markOnce;\n  target._n = toNumber;\n  target._s = toString;\n  target._l = renderList;\n  target._t = renderSlot;\n  target._q = looseEqual;\n  target._i = looseIndexOf;\n  target._m = renderStatic;\n  target._f = resolveFilter;\n  target._k = checkKeyCodes;\n  target._b = bindObjectProps;\n  target._v = createTextVNode;\n  target._e = createEmptyVNode;\n  target._u = resolveScopedSlots;\n  target._g = bindObjectListeners;\n  target._d = bindDynamicKeys;\n  target._p = prependModifier;\n}\n\n/*  */\n\nfunction FunctionalRenderContext (\n  data,\n  props,\n  children,\n  parent,\n  Ctor\n) {\n  var this$1 = this;\n\n  var options = Ctor.options;\n  // ensure the createElement function in functional components\n  // gets a unique context - this is necessary for correct named slot check\n  var contextVm;\n  if (hasOwn(parent, '_uid')) {\n    contextVm = Object.create(parent);\n    // $flow-disable-line\n    contextVm._original = parent;\n  } else {\n    // the context vm passed in is a functional context as well.\n    // in this case we want to make sure we are able to get a hold to the\n    // real context instance.\n    contextVm = parent;\n    // $flow-disable-line\n    parent = parent._original;\n  }\n  var isCompiled = isTrue(options._compiled);\n  var needNormalization = !isCompiled;\n\n  this.data = data;\n  this.props = props;\n  this.children = children;\n  this.parent = parent;\n  this.listeners = data.on || emptyObject;\n  this.injections = resolveInject(options.inject, parent);\n  this.slots = function () {\n    if (!this$1.$slots) {\n      normalizeScopedSlots(\n        data.scopedSlots,\n        this$1.$slots = resolveSlots(children, parent)\n      );\n    }\n    return this$1.$slots\n  };\n\n  Object.defineProperty(this, 'scopedSlots', ({\n    enumerable: true,\n    get: function get () {\n      return normalizeScopedSlots(data.scopedSlots, this.slots())\n    }\n  }));\n\n  // support for compiled functional template\n  if (isCompiled) {\n    // exposing $options for renderStatic()\n    this.$options = options;\n    // pre-resolve slots for renderSlot()\n    this.$slots = this.slots();\n    this.$scopedSlots = normalizeScopedSlots(data.scopedSlots, this.$slots);\n  }\n\n  if (options._scopeId) {\n    this._c = function (a, b, c, d) {\n      var vnode = createElement(contextVm, a, b, c, d, needNormalization);\n      if (vnode && !Array.isArray(vnode)) {\n        vnode.fnScopeId = options._scopeId;\n        vnode.fnContext = parent;\n      }\n      return vnode\n    };\n  } else {\n    this._c = function (a, b, c, d) { return createElement(contextVm, a, b, c, d, needNormalization); };\n  }\n}\n\ninstallRenderHelpers(FunctionalRenderContext.prototype);\n\nfunction createFunctionalComponent (\n  Ctor,\n  propsData,\n  data,\n  contextVm,\n  children\n) {\n  var options = Ctor.options;\n  var props = {};\n  var propOptions = options.props;\n  if (isDef(propOptions)) {\n    for (var key in propOptions) {\n      props[key] = validateProp(key, propOptions, propsData || emptyObject);\n    }\n  } else {\n    if (isDef(data.attrs)) { mergeProps(props, data.attrs); }\n    if (isDef(data.props)) { mergeProps(props, data.props); }\n  }\n\n  var renderContext = new FunctionalRenderContext(\n    data,\n    props,\n    children,\n    contextVm,\n    Ctor\n  );\n\n  var vnode = options.render.call(null, renderContext._c, renderContext);\n\n  if (vnode instanceof VNode) {\n    return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options, renderContext)\n  } else if (Array.isArray(vnode)) {\n    var vnodes = normalizeChildren(vnode) || [];\n    var res = new Array(vnodes.length);\n    for (var i = 0; i < vnodes.length; i++) {\n      res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options, renderContext);\n    }\n    return res\n  }\n}\n\nfunction cloneAndMarkFunctionalResult (vnode, data, contextVm, options, renderContext) {\n  // #7817 clone node before setting fnContext, otherwise if the node is reused\n  // (e.g. it was from a cached normal slot) the fnContext causes named slots\n  // that should not be matched to match.\n  var clone = cloneVNode(vnode);\n  clone.fnContext = contextVm;\n  clone.fnOptions = options;\n  if (true) {\n    (clone.devtoolsMeta = clone.devtoolsMeta || {}).renderContext = renderContext;\n  }\n  if (data.slot) {\n    (clone.data || (clone.data = {})).slot = data.slot;\n  }\n  return clone\n}\n\nfunction mergeProps (to, from) {\n  for (var key in from) {\n    to[camelize(key)] = from[key];\n  }\n}\n\n/*  */\n\n/*  */\n\n/*  */\n\n/*  */\n\n// inline hooks to be invoked on component VNodes during patch\nvar componentVNodeHooks = {\n  init: function init (vnode, hydrating) {\n    if (\n      vnode.componentInstance &&\n      !vnode.componentInstance._isDestroyed &&\n      vnode.data.keepAlive\n    ) {\n      // kept-alive components, treat as a patch\n      var mountedNode = vnode; // work around flow\n      componentVNodeHooks.prepatch(mountedNode, mountedNode);\n    } else {\n      var child = vnode.componentInstance = createComponentInstanceForVnode(\n        vnode,\n        activeInstance\n      );\n      child.$mount(hydrating ? vnode.elm : undefined, hydrating);\n    }\n  },\n\n  prepatch: function prepatch (oldVnode, vnode) {\n    var options = vnode.componentOptions;\n    var child = vnode.componentInstance = oldVnode.componentInstance;\n    updateChildComponent(\n      child,\n      options.propsData, // updated props\n      options.listeners, // updated listeners\n      vnode, // new parent vnode\n      options.children // new children\n    );\n  },\n\n  insert: function insert (vnode) {\n    var context = vnode.context;\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isMounted) {\n      callHook(componentInstance, 'onServiceCreated');\n      callHook(componentInstance, 'onServiceAttached');\n      componentInstance._isMounted = true;\n      callHook(componentInstance, 'mounted');\n    }\n    if (vnode.data.keepAlive) {\n      if (context._isMounted) {\n        // vue-router#1212\n        // During updates, a kept-alive component's child components may\n        // change, so directly walking the tree here may call activated hooks\n        // on incorrect children. Instead we push them into a queue which will\n        // be processed after the whole patch process ended.\n        queueActivatedComponent(componentInstance);\n      } else {\n        activateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  },\n\n  destroy: function destroy (vnode) {\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isDestroyed) {\n      if (!vnode.data.keepAlive) {\n        componentInstance.$destroy();\n      } else {\n        deactivateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  }\n};\n\nvar hooksToMerge = Object.keys(componentVNodeHooks);\n\nfunction createComponent (\n  Ctor,\n  data,\n  context,\n  children,\n  tag\n) {\n  if (isUndef(Ctor)) {\n    return\n  }\n\n  var baseCtor = context.$options._base;\n\n  // plain options object: turn it into a constructor\n  if (isObject(Ctor)) {\n    Ctor = baseCtor.extend(Ctor);\n  }\n\n  // if at this stage it's not a constructor or an async component factory,\n  // reject.\n  if (typeof Ctor !== 'function') {\n    if (true) {\n      warn((\"Invalid Component definition: \" + (String(Ctor))), context);\n    }\n    return\n  }\n\n  // async component\n  var asyncFactory;\n  if (isUndef(Ctor.cid)) {\n    asyncFactory = Ctor;\n    Ctor = resolveAsyncComponent(asyncFactory, baseCtor);\n    if (Ctor === undefined) {\n      // return a placeholder node for async component, which is rendered\n      // as a comment node but preserves all the raw information for the node.\n      // the information will be used for async server-rendering and hydration.\n      return createAsyncPlaceholder(\n        asyncFactory,\n        data,\n        context,\n        children,\n        tag\n      )\n    }\n  }\n\n  data = data || {};\n\n  // resolve constructor options in case global mixins are applied after\n  // component constructor creation\n  resolveConstructorOptions(Ctor);\n\n  // transform component v-model data into props & events\n  if (isDef(data.model)) {\n    transformModel(Ctor.options, data);\n  }\n\n  // extract props\n  var propsData = extractPropsFromVNodeData(data, Ctor, tag, context); // fixed by xxxxxx\n\n  // functional component\n  if (isTrue(Ctor.options.functional)) {\n    return createFunctionalComponent(Ctor, propsData, data, context, children)\n  }\n\n  // extract listeners, since these needs to be treated as\n  // child component listeners instead of DOM listeners\n  var listeners = data.on;\n  // replace with listeners with .native modifier\n  // so it gets processed during parent component patch.\n  data.on = data.nativeOn;\n\n  if (isTrue(Ctor.options.abstract)) {\n    // abstract components do not keep anything\n    // other than props & listeners & slot\n\n    // work around flow\n    var slot = data.slot;\n    data = {};\n    if (slot) {\n      data.slot = slot;\n    }\n  }\n\n  // install component management hooks onto the placeholder node\n  installComponentHooks(data);\n\n  // return a placeholder vnode\n  var name = Ctor.options.name || tag;\n  var vnode = new VNode(\n    (\"vue-component-\" + (Ctor.cid) + (name ? (\"-\" + name) : '')),\n    data, undefined, undefined, undefined, context,\n    { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children },\n    asyncFactory\n  );\n\n  return vnode\n}\n\nfunction createComponentInstanceForVnode (\n  vnode, // we know it's MountedComponentVNode but flow doesn't\n  parent // activeInstance in lifecycle state\n) {\n  var options = {\n    _isComponent: true,\n    _parentVnode: vnode,\n    parent: parent\n  };\n  // check inline-template render functions\n  var inlineTemplate = vnode.data.inlineTemplate;\n  if (isDef(inlineTemplate)) {\n    options.render = inlineTemplate.render;\n    options.staticRenderFns = inlineTemplate.staticRenderFns;\n  }\n  return new vnode.componentOptions.Ctor(options)\n}\n\nfunction installComponentHooks (data) {\n  var hooks = data.hook || (data.hook = {});\n  for (var i = 0; i < hooksToMerge.length; i++) {\n    var key = hooksToMerge[i];\n    var existing = hooks[key];\n    var toMerge = componentVNodeHooks[key];\n    if (existing !== toMerge && !(existing && existing._merged)) {\n      hooks[key] = existing ? mergeHook$1(toMerge, existing) : toMerge;\n    }\n  }\n}\n\nfunction mergeHook$1 (f1, f2) {\n  var merged = function (a, b) {\n    // flow complains about extra args which is why we use any\n    f1(a, b);\n    f2(a, b);\n  };\n  merged._merged = true;\n  return merged\n}\n\n// transform component v-model info (value and callback) into\n// prop and event handler respectively.\nfunction transformModel (options, data) {\n  var prop = (options.model && options.model.prop) || 'value';\n  var event = (options.model && options.model.event) || 'input'\n  ;(data.attrs || (data.attrs = {}))[prop] = data.model.value;\n  var on = data.on || (data.on = {});\n  var existing = on[event];\n  var callback = data.model.callback;\n  if (isDef(existing)) {\n    if (\n      Array.isArray(existing)\n        ? existing.indexOf(callback) === -1\n        : existing !== callback\n    ) {\n      on[event] = [callback].concat(existing);\n    }\n  } else {\n    on[event] = callback;\n  }\n}\n\n/*  */\n\nvar SIMPLE_NORMALIZE = 1;\nvar ALWAYS_NORMALIZE = 2;\n\n// wrapper function for providing a more flexible interface\n// without getting yelled at by flow\nfunction createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType,\n  alwaysNormalize\n) {\n  if (Array.isArray(data) || isPrimitive(data)) {\n    normalizationType = children;\n    children = data;\n    data = undefined;\n  }\n  if (isTrue(alwaysNormalize)) {\n    normalizationType = ALWAYS_NORMALIZE;\n  }\n  return _createElement(context, tag, data, children, normalizationType)\n}\n\nfunction _createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType\n) {\n  if (isDef(data) && isDef((data).__ob__)) {\n     true && warn(\n      \"Avoid using observed data object as vnode data: \" + (JSON.stringify(data)) + \"\\n\" +\n      'Always create fresh vnode data objects in each render!',\n      context\n    );\n    return createEmptyVNode()\n  }\n  // object syntax in v-bind\n  if (isDef(data) && isDef(data.is)) {\n    tag = data.is;\n  }\n  if (!tag) {\n    // in case of component :is set to falsy value\n    return createEmptyVNode()\n  }\n  // warn against non-primitive key\n  if ( true &&\n    isDef(data) && isDef(data.key) && !isPrimitive(data.key)\n  ) {\n    {\n      warn(\n        'Avoid using non-primitive value as key, ' +\n        'use string/number value instead.',\n        context\n      );\n    }\n  }\n  // support single function children as default scoped slot\n  if (Array.isArray(children) &&\n    typeof children[0] === 'function'\n  ) {\n    data = data || {};\n    data.scopedSlots = { default: children[0] };\n    children.length = 0;\n  }\n  if (normalizationType === ALWAYS_NORMALIZE) {\n    children = normalizeChildren(children);\n  } else if (normalizationType === SIMPLE_NORMALIZE) {\n    children = simpleNormalizeChildren(children);\n  }\n  var vnode, ns;\n  if (typeof tag === 'string') {\n    var Ctor;\n    ns = (context.$vnode && context.$vnode.ns) || config.getTagNamespace(tag);\n    if (config.isReservedTag(tag)) {\n      // platform built-in elements\n      if ( true && isDef(data) && isDef(data.nativeOn)) {\n        warn(\n          (\"The .native modifier for v-on is only valid on components but it was used on <\" + tag + \">.\"),\n          context\n        );\n      }\n      vnode = new VNode(\n        config.parsePlatformTagName(tag), data, children,\n        undefined, undefined, context\n      );\n    } else if ((!data || !data.pre) && isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {\n      // component\n      vnode = createComponent(Ctor, data, context, children, tag);\n    } else {\n      // unknown or unlisted namespaced elements\n      // check at runtime because it may get assigned a namespace when its\n      // parent normalizes children\n      vnode = new VNode(\n        tag, data, children,\n        undefined, undefined, context\n      );\n    }\n  } else {\n    // direct component options / constructor\n    vnode = createComponent(tag, data, context, children);\n  }\n  if (Array.isArray(vnode)) {\n    return vnode\n  } else if (isDef(vnode)) {\n    if (isDef(ns)) { applyNS(vnode, ns); }\n    if (isDef(data)) { registerDeepBindings(data); }\n    return vnode\n  } else {\n    return createEmptyVNode()\n  }\n}\n\nfunction applyNS (vnode, ns, force) {\n  vnode.ns = ns;\n  if (vnode.tag === 'foreignObject') {\n    // use default namespace inside foreignObject\n    ns = undefined;\n    force = true;\n  }\n  if (isDef(vnode.children)) {\n    for (var i = 0, l = vnode.children.length; i < l; i++) {\n      var child = vnode.children[i];\n      if (isDef(child.tag) && (\n        isUndef(child.ns) || (isTrue(force) && child.tag !== 'svg'))) {\n        applyNS(child, ns, force);\n      }\n    }\n  }\n}\n\n// ref #5318\n// necessary to ensure parent re-render when deep bindings like :style and\n// :class are used on slot nodes\nfunction registerDeepBindings (data) {\n  if (isObject(data.style)) {\n    traverse(data.style);\n  }\n  if (isObject(data.class)) {\n    traverse(data.class);\n  }\n}\n\n/*  */\n\nfunction initRender (vm) {\n  vm._vnode = null; // the root of the child tree\n  vm._staticTrees = null; // v-once cached trees\n  var options = vm.$options;\n  var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree\n  var renderContext = parentVnode && parentVnode.context;\n  vm.$slots = resolveSlots(options._renderChildren, renderContext);\n  vm.$scopedSlots = emptyObject;\n  // bind the createElement fn to this instance\n  // so that we get proper render context inside it.\n  // args order: tag, data, children, normalizationType, alwaysNormalize\n  // internal version is used by render functions compiled from templates\n  vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };\n  // normalization is always applied for the public version, used in\n  // user-written render functions.\n  vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };\n\n  // $attrs & $listeners are exposed for easier HOC creation.\n  // they need to be reactive so that HOCs using them are always updated\n  var parentData = parentVnode && parentVnode.data;\n\n  /* istanbul ignore else */\n  if (true) {\n    defineReactive$$1(vm, '$attrs', parentData && parentData.attrs || emptyObject, function () {\n      !isUpdatingChildComponent && warn(\"$attrs is readonly.\", vm);\n    }, true);\n    defineReactive$$1(vm, '$listeners', options._parentListeners || emptyObject, function () {\n      !isUpdatingChildComponent && warn(\"$listeners is readonly.\", vm);\n    }, true);\n  } else {}\n}\n\nvar currentRenderingInstance = null;\n\nfunction renderMixin (Vue) {\n  // install runtime convenience helpers\n  installRenderHelpers(Vue.prototype);\n\n  Vue.prototype.$nextTick = function (fn) {\n    return nextTick(fn, this)\n  };\n\n  Vue.prototype._render = function () {\n    var vm = this;\n    var ref = vm.$options;\n    var render = ref.render;\n    var _parentVnode = ref._parentVnode;\n\n    if (_parentVnode) {\n      vm.$scopedSlots = normalizeScopedSlots(\n        _parentVnode.data.scopedSlots,\n        vm.$slots,\n        vm.$scopedSlots\n      );\n    }\n\n    // set parent vnode. this allows render functions to have access\n    // to the data on the placeholder node.\n    vm.$vnode = _parentVnode;\n    // render self\n    var vnode;\n    try {\n      // There's no need to maintain a stack because all render fns are called\n      // separately from one another. Nested component's render fns are called\n      // when parent component is patched.\n      currentRenderingInstance = vm;\n      vnode = render.call(vm._renderProxy, vm.$createElement);\n    } catch (e) {\n      handleError(e, vm, \"render\");\n      // return error render result,\n      // or previous vnode to prevent render error causing blank component\n      /* istanbul ignore else */\n      if ( true && vm.$options.renderError) {\n        try {\n          vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);\n        } catch (e) {\n          handleError(e, vm, \"renderError\");\n          vnode = vm._vnode;\n        }\n      } else {\n        vnode = vm._vnode;\n      }\n    } finally {\n      currentRenderingInstance = null;\n    }\n    // if the returned array contains only a single node, allow it\n    if (Array.isArray(vnode) && vnode.length === 1) {\n      vnode = vnode[0];\n    }\n    // return empty vnode in case the render function errored out\n    if (!(vnode instanceof VNode)) {\n      if ( true && Array.isArray(vnode)) {\n        warn(\n          'Multiple root nodes returned from render function. Render function ' +\n          'should return a single root node.',\n          vm\n        );\n      }\n      vnode = createEmptyVNode();\n    }\n    // set parent\n    vnode.parent = _parentVnode;\n    return vnode\n  };\n}\n\n/*  */\n\nfunction ensureCtor (comp, base) {\n  if (\n    comp.__esModule ||\n    (hasSymbol && comp[Symbol.toStringTag] === 'Module')\n  ) {\n    comp = comp.default;\n  }\n  return isObject(comp)\n    ? base.extend(comp)\n    : comp\n}\n\nfunction createAsyncPlaceholder (\n  factory,\n  data,\n  context,\n  children,\n  tag\n) {\n  var node = createEmptyVNode();\n  node.asyncFactory = factory;\n  node.asyncMeta = { data: data, context: context, children: children, tag: tag };\n  return node\n}\n\nfunction resolveAsyncComponent (\n  factory,\n  baseCtor\n) {\n  if (isTrue(factory.error) && isDef(factory.errorComp)) {\n    return factory.errorComp\n  }\n\n  if (isDef(factory.resolved)) {\n    return factory.resolved\n  }\n\n  var owner = currentRenderingInstance;\n  if (owner && isDef(factory.owners) && factory.owners.indexOf(owner) === -1) {\n    // already pending\n    factory.owners.push(owner);\n  }\n\n  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {\n    return factory.loadingComp\n  }\n\n  if (owner && !isDef(factory.owners)) {\n    var owners = factory.owners = [owner];\n    var sync = true;\n    var timerLoading = null;\n    var timerTimeout = null\n\n    ;(owner).$on('hook:destroyed', function () { return remove(owners, owner); });\n\n    var forceRender = function (renderCompleted) {\n      for (var i = 0, l = owners.length; i < l; i++) {\n        (owners[i]).$forceUpdate();\n      }\n\n      if (renderCompleted) {\n        owners.length = 0;\n        if (timerLoading !== null) {\n          clearTimeout(timerLoading);\n          timerLoading = null;\n        }\n        if (timerTimeout !== null) {\n          clearTimeout(timerTimeout);\n          timerTimeout = null;\n        }\n      }\n    };\n\n    var resolve = once(function (res) {\n      // cache resolved\n      factory.resolved = ensureCtor(res, baseCtor);\n      // invoke callbacks only if this is not a synchronous resolve\n      // (async resolves are shimmed as synchronous during SSR)\n      if (!sync) {\n        forceRender(true);\n      } else {\n        owners.length = 0;\n      }\n    });\n\n    var reject = once(function (reason) {\n       true && warn(\n        \"Failed to resolve async component: \" + (String(factory)) +\n        (reason ? (\"\\nReason: \" + reason) : '')\n      );\n      if (isDef(factory.errorComp)) {\n        factory.error = true;\n        forceRender(true);\n      }\n    });\n\n    var res = factory(resolve, reject);\n\n    if (isObject(res)) {\n      if (isPromise(res)) {\n        // () => Promise\n        if (isUndef(factory.resolved)) {\n          res.then(resolve, reject);\n        }\n      } else if (isPromise(res.component)) {\n        res.component.then(resolve, reject);\n\n        if (isDef(res.error)) {\n          factory.errorComp = ensureCtor(res.error, baseCtor);\n        }\n\n        if (isDef(res.loading)) {\n          factory.loadingComp = ensureCtor(res.loading, baseCtor);\n          if (res.delay === 0) {\n            factory.loading = true;\n          } else {\n            timerLoading = setTimeout(function () {\n              timerLoading = null;\n              if (isUndef(factory.resolved) && isUndef(factory.error)) {\n                factory.loading = true;\n                forceRender(false);\n              }\n            }, res.delay || 200);\n          }\n        }\n\n        if (isDef(res.timeout)) {\n          timerTimeout = setTimeout(function () {\n            timerTimeout = null;\n            if (isUndef(factory.resolved)) {\n              reject(\n                 true\n                  ? (\"timeout (\" + (res.timeout) + \"ms)\")\n                  : undefined\n              );\n            }\n          }, res.timeout);\n        }\n      }\n    }\n\n    sync = false;\n    // return in case resolved synchronously\n    return factory.loading\n      ? factory.loadingComp\n      : factory.resolved\n  }\n}\n\n/*  */\n\nfunction isAsyncPlaceholder (node) {\n  return node.isComment && node.asyncFactory\n}\n\n/*  */\n\nfunction getFirstComponentChild (children) {\n  if (Array.isArray(children)) {\n    for (var i = 0; i < children.length; i++) {\n      var c = children[i];\n      if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {\n        return c\n      }\n    }\n  }\n}\n\n/*  */\n\n/*  */\n\nfunction initEvents (vm) {\n  vm._events = Object.create(null);\n  vm._hasHookEvent = false;\n  // init parent attached events\n  var listeners = vm.$options._parentListeners;\n  if (listeners) {\n    updateComponentListeners(vm, listeners);\n  }\n}\n\nvar target;\n\nfunction add (event, fn) {\n  target.$on(event, fn);\n}\n\nfunction remove$1 (event, fn) {\n  target.$off(event, fn);\n}\n\nfunction createOnceHandler (event, fn) {\n  var _target = target;\n  return function onceHandler () {\n    var res = fn.apply(null, arguments);\n    if (res !== null) {\n      _target.$off(event, onceHandler);\n    }\n  }\n}\n\nfunction updateComponentListeners (\n  vm,\n  listeners,\n  oldListeners\n) {\n  target = vm;\n  updateListeners(listeners, oldListeners || {}, add, remove$1, createOnceHandler, vm);\n  target = undefined;\n}\n\nfunction eventsMixin (Vue) {\n  var hookRE = /^hook:/;\n  Vue.prototype.$on = function (event, fn) {\n    var vm = this;\n    if (Array.isArray(event)) {\n      for (var i = 0, l = event.length; i < l; i++) {\n        vm.$on(event[i], fn);\n      }\n    } else {\n      (vm._events[event] || (vm._events[event] = [])).push(fn);\n      // optimize hook:event cost by using a boolean flag marked at registration\n      // instead of a hash lookup\n      if (hookRE.test(event)) {\n        vm._hasHookEvent = true;\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$once = function (event, fn) {\n    var vm = this;\n    function on () {\n      vm.$off(event, on);\n      fn.apply(vm, arguments);\n    }\n    on.fn = fn;\n    vm.$on(event, on);\n    return vm\n  };\n\n  Vue.prototype.$off = function (event, fn) {\n    var vm = this;\n    // all\n    if (!arguments.length) {\n      vm._events = Object.create(null);\n      return vm\n    }\n    // array of events\n    if (Array.isArray(event)) {\n      for (var i$1 = 0, l = event.length; i$1 < l; i$1++) {\n        vm.$off(event[i$1], fn);\n      }\n      return vm\n    }\n    // specific event\n    var cbs = vm._events[event];\n    if (!cbs) {\n      return vm\n    }\n    if (!fn) {\n      vm._events[event] = null;\n      return vm\n    }\n    // specific handler\n    var cb;\n    var i = cbs.length;\n    while (i--) {\n      cb = cbs[i];\n      if (cb === fn || cb.fn === fn) {\n        cbs.splice(i, 1);\n        break\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$emit = function (event) {\n    var vm = this;\n    if (true) {\n      var lowerCaseEvent = event.toLowerCase();\n      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {\n        tip(\n          \"Event \\\"\" + lowerCaseEvent + \"\\\" is emitted in component \" +\n          (formatComponentName(vm)) + \" but the handler is registered for \\\"\" + event + \"\\\". \" +\n          \"Note that HTML attributes are case-insensitive and you cannot use \" +\n          \"v-on to listen to camelCase events when using in-DOM templates. \" +\n          \"You should probably use \\\"\" + (hyphenate(event)) + \"\\\" instead of \\\"\" + event + \"\\\".\"\n        );\n      }\n    }\n    var cbs = vm._events[event];\n    if (cbs) {\n      cbs = cbs.length > 1 ? toArray(cbs) : cbs;\n      var args = toArray(arguments, 1);\n      var info = \"event handler for \\\"\" + event + \"\\\"\";\n      for (var i = 0, l = cbs.length; i < l; i++) {\n        invokeWithErrorHandling(cbs[i], vm, args, vm, info);\n      }\n    }\n    return vm\n  };\n}\n\n/*  */\n\nvar activeInstance = null;\nvar isUpdatingChildComponent = false;\n\nfunction setActiveInstance(vm) {\n  var prevActiveInstance = activeInstance;\n  activeInstance = vm;\n  return function () {\n    activeInstance = prevActiveInstance;\n  }\n}\n\nfunction initLifecycle (vm) {\n  var options = vm.$options;\n\n  // locate first non-abstract parent\n  var parent = options.parent;\n  if (parent && !options.abstract) {\n    while (parent.$options.abstract && parent.$parent) {\n      parent = parent.$parent;\n    }\n    parent.$children.push(vm);\n  }\n\n  vm.$parent = parent;\n  vm.$root = parent ? parent.$root : vm;\n\n  vm.$children = [];\n  vm.$refs = {};\n\n  vm._watcher = null;\n  vm._inactive = null;\n  vm._directInactive = false;\n  vm._isMounted = false;\n  vm._isDestroyed = false;\n  vm._isBeingDestroyed = false;\n}\n\nfunction lifecycleMixin (Vue) {\n  Vue.prototype._update = function (vnode, hydrating) {\n    var vm = this;\n    var prevEl = vm.$el;\n    var prevVnode = vm._vnode;\n    var restoreActiveInstance = setActiveInstance(vm);\n    vm._vnode = vnode;\n    // Vue.prototype.__patch__ is injected in entry points\n    // based on the rendering backend used.\n    if (!prevVnode) {\n      // initial render\n      vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false /* removeOnly */);\n    } else {\n      // updates\n      vm.$el = vm.__patch__(prevVnode, vnode);\n    }\n    restoreActiveInstance();\n    // update __vue__ reference\n    if (prevEl) {\n      prevEl.__vue__ = null;\n    }\n    if (vm.$el) {\n      vm.$el.__vue__ = vm;\n    }\n    // if parent is an HOC, update its $el as well\n    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {\n      vm.$parent.$el = vm.$el;\n    }\n    // updated hook is called by the scheduler to ensure that children are\n    // updated in a parent's updated hook.\n  };\n\n  Vue.prototype.$forceUpdate = function () {\n    var vm = this;\n    if (vm._watcher) {\n      vm._watcher.update();\n    }\n  };\n\n  Vue.prototype.$destroy = function () {\n    var vm = this;\n    if (vm._isBeingDestroyed) {\n      return\n    }\n    callHook(vm, 'beforeDestroy');\n    vm._isBeingDestroyed = true;\n    // remove self from parent\n    var parent = vm.$parent;\n    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {\n      remove(parent.$children, vm);\n    }\n    // teardown watchers\n    if (vm._watcher) {\n      vm._watcher.teardown();\n    }\n    var i = vm._watchers.length;\n    while (i--) {\n      vm._watchers[i].teardown();\n    }\n    // remove reference from data ob\n    // frozen object may not have observer.\n    if (vm._data.__ob__) {\n      vm._data.__ob__.vmCount--;\n    }\n    // call the last hook...\n    vm._isDestroyed = true;\n    // invoke destroy hooks on current rendered tree\n    vm.__patch__(vm._vnode, null);\n    // fire destroyed hook\n    callHook(vm, 'destroyed');\n    // turn off all instance listeners.\n    vm.$off();\n    // remove __vue__ reference\n    if (vm.$el) {\n      vm.$el.__vue__ = null;\n    }\n    // release circular reference (#6759)\n    if (vm.$vnode) {\n      vm.$vnode.parent = null;\n    }\n  };\n}\n\nfunction updateChildComponent (\n  vm,\n  propsData,\n  listeners,\n  parentVnode,\n  renderChildren\n) {\n  if (true) {\n    isUpdatingChildComponent = true;\n  }\n\n  // determine whether component has slot children\n  // we need to do this before overwriting $options._renderChildren.\n\n  // check if there are dynamic scopedSlots (hand-written or compiled but with\n  // dynamic slot names). Static scoped slots compiled from template has the\n  // \"$stable\" marker.\n  var newScopedSlots = parentVnode.data.scopedSlots;\n  var oldScopedSlots = vm.$scopedSlots;\n  var hasDynamicScopedSlot = !!(\n    (newScopedSlots && !newScopedSlots.$stable) ||\n    (oldScopedSlots !== emptyObject && !oldScopedSlots.$stable) ||\n    (newScopedSlots && vm.$scopedSlots.$key !== newScopedSlots.$key)\n  );\n\n  // Any static slot children from the parent may have changed during parent's\n  // update. Dynamic scoped slots may also have changed. In such cases, a forced\n  // update is necessary to ensure correctness.\n  var needsForceUpdate = !!(\n    renderChildren ||               // has new static slots\n    vm.$options._renderChildren ||  // has old static slots\n    hasDynamicScopedSlot\n  );\n\n  vm.$options._parentVnode = parentVnode;\n  vm.$vnode = parentVnode; // update vm's placeholder node without re-render\n\n  if (vm._vnode) { // update child tree's parent\n    vm._vnode.parent = parentVnode;\n  }\n  vm.$options._renderChildren = renderChildren;\n\n  // update $attrs and $listeners hash\n  // these are also reactive so they may trigger child update if the child\n  // used them during render\n  vm.$attrs = parentVnode.data.attrs || emptyObject;\n  vm.$listeners = listeners || emptyObject;\n\n  // update props\n  if (propsData && vm.$options.props) {\n    toggleObserving(false);\n    var props = vm._props;\n    var propKeys = vm.$options._propKeys || [];\n    for (var i = 0; i < propKeys.length; i++) {\n      var key = propKeys[i];\n      var propOptions = vm.$options.props; // wtf flow?\n      props[key] = validateProp(key, propOptions, propsData, vm);\n    }\n    toggleObserving(true);\n    // keep a copy of raw propsData\n    vm.$options.propsData = propsData;\n  }\n  \n  // fixed by xxxxxx update properties(mp runtime)\n  vm._$updateProperties && vm._$updateProperties(vm);\n  \n  // update listeners\n  listeners = listeners || emptyObject;\n  var oldListeners = vm.$options._parentListeners;\n  vm.$options._parentListeners = listeners;\n  updateComponentListeners(vm, listeners, oldListeners);\n\n  // resolve slots + force update if has children\n  if (needsForceUpdate) {\n    vm.$slots = resolveSlots(renderChildren, parentVnode.context);\n    vm.$forceUpdate();\n  }\n\n  if (true) {\n    isUpdatingChildComponent = false;\n  }\n}\n\nfunction isInInactiveTree (vm) {\n  while (vm && (vm = vm.$parent)) {\n    if (vm._inactive) { return true }\n  }\n  return false\n}\n\nfunction activateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = false;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  } else if (vm._directInactive) {\n    return\n  }\n  if (vm._inactive || vm._inactive === null) {\n    vm._inactive = false;\n    for (var i = 0; i < vm.$children.length; i++) {\n      activateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'activated');\n  }\n}\n\nfunction deactivateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = true;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  }\n  if (!vm._inactive) {\n    vm._inactive = true;\n    for (var i = 0; i < vm.$children.length; i++) {\n      deactivateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'deactivated');\n  }\n}\n\nfunction callHook (vm, hook) {\n  // #7573 disable dep collection when invoking lifecycle hooks\n  pushTarget();\n  var handlers = vm.$options[hook];\n  var info = hook + \" hook\";\n  if (handlers) {\n    for (var i = 0, j = handlers.length; i < j; i++) {\n      invokeWithErrorHandling(handlers[i], vm, null, vm, info);\n    }\n  }\n  if (vm._hasHookEvent) {\n    vm.$emit('hook:' + hook);\n  }\n  popTarget();\n}\n\n/*  */\n\nvar MAX_UPDATE_COUNT = 100;\n\nvar queue = [];\nvar activatedChildren = [];\nvar has = {};\nvar circular = {};\nvar waiting = false;\nvar flushing = false;\nvar index = 0;\n\n/**\n * Reset the scheduler's state.\n */\nfunction resetSchedulerState () {\n  index = queue.length = activatedChildren.length = 0;\n  has = {};\n  if (true) {\n    circular = {};\n  }\n  waiting = flushing = false;\n}\n\n// Async edge case #6566 requires saving the timestamp when event listeners are\n// attached. However, calling performance.now() has a perf overhead especially\n// if the page has thousands of event listeners. Instead, we take a timestamp\n// every time the scheduler flushes and use that for all event listeners\n// attached during that flush.\nvar currentFlushTimestamp = 0;\n\n// Async edge case fix requires storing an event listener's attach timestamp.\nvar getNow = Date.now;\n\n// Determine what event timestamp the browser is using. Annoyingly, the\n// timestamp can either be hi-res (relative to page load) or low-res\n// (relative to UNIX epoch), so in order to compare time we have to use the\n// same timestamp type when saving the flush timestamp.\n// All IE versions use low-res event timestamps, and have problematic clock\n// implementations (#9632)\nif (inBrowser && !isIE) {\n  var performance = window.performance;\n  if (\n    performance &&\n    typeof performance.now === 'function' &&\n    getNow() > document.createEvent('Event').timeStamp\n  ) {\n    // if the event timestamp, although evaluated AFTER the Date.now(), is\n    // smaller than it, it means the event is using a hi-res timestamp,\n    // and we need to use the hi-res version for event listener timestamps as\n    // well.\n    getNow = function () { return performance.now(); };\n  }\n}\n\n/**\n * Flush both queues and run the watchers.\n */\nfunction flushSchedulerQueue () {\n  currentFlushTimestamp = getNow();\n  flushing = true;\n  var watcher, id;\n\n  // Sort queue before flush.\n  // This ensures that:\n  // 1. Components are updated from parent to child. (because parent is always\n  //    created before the child)\n  // 2. A component's user watchers are run before its render watcher (because\n  //    user watchers are created before the render watcher)\n  // 3. If a component is destroyed during a parent component's watcher run,\n  //    its watchers can be skipped.\n  queue.sort(function (a, b) { return a.id - b.id; });\n\n  // do not cache length because more watchers might be pushed\n  // as we run existing watchers\n  for (index = 0; index < queue.length; index++) {\n    watcher = queue[index];\n    if (watcher.before) {\n      watcher.before();\n    }\n    id = watcher.id;\n    has[id] = null;\n    watcher.run();\n    // in dev build, check and stop circular updates.\n    if ( true && has[id] != null) {\n      circular[id] = (circular[id] || 0) + 1;\n      if (circular[id] > MAX_UPDATE_COUNT) {\n        warn(\n          'You may have an infinite update loop ' + (\n            watcher.user\n              ? (\"in watcher with expression \\\"\" + (watcher.expression) + \"\\\"\")\n              : \"in a component render function.\"\n          ),\n          watcher.vm\n        );\n        break\n      }\n    }\n  }\n\n  // keep copies of post queues before resetting state\n  var activatedQueue = activatedChildren.slice();\n  var updatedQueue = queue.slice();\n\n  resetSchedulerState();\n\n  // call component updated and activated hooks\n  callActivatedHooks(activatedQueue);\n  callUpdatedHooks(updatedQueue);\n\n  // devtool hook\n  /* istanbul ignore if */\n  if (devtools && config.devtools) {\n    devtools.emit('flush');\n  }\n}\n\nfunction callUpdatedHooks (queue) {\n  var i = queue.length;\n  while (i--) {\n    var watcher = queue[i];\n    var vm = watcher.vm;\n    if (vm._watcher === watcher && vm._isMounted && !vm._isDestroyed) {\n      callHook(vm, 'updated');\n    }\n  }\n}\n\n/**\n * Queue a kept-alive component that was activated during patch.\n * The queue will be processed after the entire tree has been patched.\n */\nfunction queueActivatedComponent (vm) {\n  // setting _inactive to false here so that a render function can\n  // rely on checking whether it's in an inactive tree (e.g. router-view)\n  vm._inactive = false;\n  activatedChildren.push(vm);\n}\n\nfunction callActivatedHooks (queue) {\n  for (var i = 0; i < queue.length; i++) {\n    queue[i]._inactive = true;\n    activateChildComponent(queue[i], true /* true */);\n  }\n}\n\n/**\n * Push a watcher into the watcher queue.\n * Jobs with duplicate IDs will be skipped unless it's\n * pushed when the queue is being flushed.\n */\nfunction queueWatcher (watcher) {\n  var id = watcher.id;\n  if (has[id] == null) {\n    has[id] = true;\n    if (!flushing) {\n      queue.push(watcher);\n    } else {\n      // if already flushing, splice the watcher based on its id\n      // if already past its id, it will be run next immediately.\n      var i = queue.length - 1;\n      while (i > index && queue[i].id > watcher.id) {\n        i--;\n      }\n      queue.splice(i + 1, 0, watcher);\n    }\n    // queue the flush\n    if (!waiting) {\n      waiting = true;\n\n      if ( true && !config.async) {\n        flushSchedulerQueue();\n        return\n      }\n      nextTick(flushSchedulerQueue);\n    }\n  }\n}\n\n/*  */\n\n\n\nvar uid$2 = 0;\n\n/**\n * A watcher parses an expression, collects dependencies,\n * and fires callback when the expression value changes.\n * This is used for both the $watch() api and directives.\n */\nvar Watcher = function Watcher (\n  vm,\n  expOrFn,\n  cb,\n  options,\n  isRenderWatcher\n) {\n  this.vm = vm;\n  if (isRenderWatcher) {\n    vm._watcher = this;\n  }\n  vm._watchers.push(this);\n  // options\n  if (options) {\n    this.deep = !!options.deep;\n    this.user = !!options.user;\n    this.lazy = !!options.lazy;\n    this.sync = !!options.sync;\n    this.before = options.before;\n  } else {\n    this.deep = this.user = this.lazy = this.sync = false;\n  }\n  this.cb = cb;\n  this.id = ++uid$2; // uid for batching\n  this.active = true;\n  this.dirty = this.lazy; // for lazy watchers\n  this.deps = [];\n  this.newDeps = [];\n  this.depIds = new _Set();\n  this.newDepIds = new _Set();\n  this.expression =  true\n    ? expOrFn.toString()\n    : undefined;\n  // parse expression for getter\n  if (typeof expOrFn === 'function') {\n    this.getter = expOrFn;\n  } else {\n    this.getter = parsePath(expOrFn);\n    if (!this.getter) {\n      this.getter = noop;\n       true && warn(\n        \"Failed watching path: \\\"\" + expOrFn + \"\\\" \" +\n        'Watcher only accepts simple dot-delimited paths. ' +\n        'For full control, use a function instead.',\n        vm\n      );\n    }\n  }\n  this.value = this.lazy\n    ? undefined\n    : this.get();\n};\n\n/**\n * Evaluate the getter, and re-collect dependencies.\n */\nWatcher.prototype.get = function get () {\n  pushTarget(this);\n  var value;\n  var vm = this.vm;\n  try {\n    value = this.getter.call(vm, vm);\n  } catch (e) {\n    if (this.user) {\n      handleError(e, vm, (\"getter for watcher \\\"\" + (this.expression) + \"\\\"\"));\n    } else {\n      throw e\n    }\n  } finally {\n    // \"touch\" every property so they are all tracked as\n    // dependencies for deep watching\n    if (this.deep) {\n      traverse(value);\n    }\n    popTarget();\n    this.cleanupDeps();\n  }\n  return value\n};\n\n/**\n * Add a dependency to this directive.\n */\nWatcher.prototype.addDep = function addDep (dep) {\n  var id = dep.id;\n  if (!this.newDepIds.has(id)) {\n    this.newDepIds.add(id);\n    this.newDeps.push(dep);\n    if (!this.depIds.has(id)) {\n      dep.addSub(this);\n    }\n  }\n};\n\n/**\n * Clean up for dependency collection.\n */\nWatcher.prototype.cleanupDeps = function cleanupDeps () {\n  var i = this.deps.length;\n  while (i--) {\n    var dep = this.deps[i];\n    if (!this.newDepIds.has(dep.id)) {\n      dep.removeSub(this);\n    }\n  }\n  var tmp = this.depIds;\n  this.depIds = this.newDepIds;\n  this.newDepIds = tmp;\n  this.newDepIds.clear();\n  tmp = this.deps;\n  this.deps = this.newDeps;\n  this.newDeps = tmp;\n  this.newDeps.length = 0;\n};\n\n/**\n * Subscriber interface.\n * Will be called when a dependency changes.\n */\nWatcher.prototype.update = function update () {\n  /* istanbul ignore else */\n  if (this.lazy) {\n    this.dirty = true;\n  } else if (this.sync) {\n    this.run();\n  } else {\n    queueWatcher(this);\n  }\n};\n\n/**\n * Scheduler job interface.\n * Will be called by the scheduler.\n */\nWatcher.prototype.run = function run () {\n  if (this.active) {\n    var value = this.get();\n    if (\n      value !== this.value ||\n      // Deep watchers and watchers on Object/Arrays should fire even\n      // when the value is the same, because the value may\n      // have mutated.\n      isObject(value) ||\n      this.deep\n    ) {\n      // set new value\n      var oldValue = this.value;\n      this.value = value;\n      if (this.user) {\n        try {\n          this.cb.call(this.vm, value, oldValue);\n        } catch (e) {\n          handleError(e, this.vm, (\"callback for watcher \\\"\" + (this.expression) + \"\\\"\"));\n        }\n      } else {\n        this.cb.call(this.vm, value, oldValue);\n      }\n    }\n  }\n};\n\n/**\n * Evaluate the value of the watcher.\n * This only gets called for lazy watchers.\n */\nWatcher.prototype.evaluate = function evaluate () {\n  this.value = this.get();\n  this.dirty = false;\n};\n\n/**\n * Depend on all deps collected by this watcher.\n */\nWatcher.prototype.depend = function depend () {\n  var i = this.deps.length;\n  while (i--) {\n    this.deps[i].depend();\n  }\n};\n\n/**\n * Remove self from all dependencies' subscriber list.\n */\nWatcher.prototype.teardown = function teardown () {\n  if (this.active) {\n    // remove self from vm's watcher list\n    // this is a somewhat expensive operation so we skip it\n    // if the vm is being destroyed.\n    if (!this.vm._isBeingDestroyed) {\n      remove(this.vm._watchers, this);\n    }\n    var i = this.deps.length;\n    while (i--) {\n      this.deps[i].removeSub(this);\n    }\n    this.active = false;\n  }\n};\n\n/*  */\n\nvar sharedPropertyDefinition = {\n  enumerable: true,\n  configurable: true,\n  get: noop,\n  set: noop\n};\n\nfunction proxy (target, sourceKey, key) {\n  sharedPropertyDefinition.get = function proxyGetter () {\n    return this[sourceKey][key]\n  };\n  sharedPropertyDefinition.set = function proxySetter (val) {\n    this[sourceKey][key] = val;\n  };\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction initState (vm) {\n  vm._watchers = [];\n  var opts = vm.$options;\n  if (opts.props) { initProps(vm, opts.props); }\n  if (opts.methods) { initMethods(vm, opts.methods); }\n  if (opts.data) {\n    initData(vm);\n  } else {\n    observe(vm._data = {}, true /* asRootData */);\n  }\n  if (opts.computed) { initComputed(vm, opts.computed); }\n  if (opts.watch && opts.watch !== nativeWatch) {\n    initWatch(vm, opts.watch);\n  }\n}\n\nfunction initProps (vm, propsOptions) {\n  var propsData = vm.$options.propsData || {};\n  var props = vm._props = {};\n  // cache prop keys so that future props updates can iterate using Array\n  // instead of dynamic object key enumeration.\n  var keys = vm.$options._propKeys = [];\n  var isRoot = !vm.$parent;\n  // root instance props should be converted\n  if (!isRoot) {\n    toggleObserving(false);\n  }\n  var loop = function ( key ) {\n    keys.push(key);\n    var value = validateProp(key, propsOptions, propsData, vm);\n    /* istanbul ignore else */\n    if (true) {\n      var hyphenatedKey = hyphenate(key);\n      if (isReservedAttribute(hyphenatedKey) ||\n          config.isReservedAttr(hyphenatedKey)) {\n        warn(\n          (\"\\\"\" + hyphenatedKey + \"\\\" is a reserved attribute and cannot be used as component prop.\"),\n          vm\n        );\n      }\n      defineReactive$$1(props, key, value, function () {\n        if (!isRoot && !isUpdatingChildComponent) {\n          {\n            if(vm.mpHost === 'mp-baidu'){//百度 observer 在 setData callback 之后触发，直接忽略该 warn\n                return\n            }\n            //fixed by xxxxxx __next_tick_pending,uni://form-field 时不告警\n            if(\n                key === 'value' && \n                Array.isArray(vm.$options.behaviors) &&\n                vm.$options.behaviors.indexOf('uni://form-field') !== -1\n              ){\n              return\n            }\n            if(vm._getFormData){\n              return\n            }\n            var $parent = vm.$parent;\n            while($parent){\n              if($parent.__next_tick_pending){\n                return  \n              }\n              $parent = $parent.$parent;\n            }\n          }\n          warn(\n            \"Avoid mutating a prop directly since the value will be \" +\n            \"overwritten whenever the parent component re-renders. \" +\n            \"Instead, use a data or computed property based on the prop's \" +\n            \"value. Prop being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        }\n      });\n    } else {}\n    // static props are already proxied on the component's prototype\n    // during Vue.extend(). We only need to proxy props defined at\n    // instantiation here.\n    if (!(key in vm)) {\n      proxy(vm, \"_props\", key);\n    }\n  };\n\n  for (var key in propsOptions) loop( key );\n  toggleObserving(true);\n}\n\nfunction initData (vm) {\n  var data = vm.$options.data;\n  data = vm._data = typeof data === 'function'\n    ? getData(data, vm)\n    : data || {};\n  if (!isPlainObject(data)) {\n    data = {};\n     true && warn(\n      'data functions should return an object:\\n' +\n      'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',\n      vm\n    );\n  }\n  // proxy data on instance\n  var keys = Object.keys(data);\n  var props = vm.$options.props;\n  var methods = vm.$options.methods;\n  var i = keys.length;\n  while (i--) {\n    var key = keys[i];\n    if (true) {\n      if (methods && hasOwn(methods, key)) {\n        warn(\n          (\"Method \\\"\" + key + \"\\\" has already been defined as a data property.\"),\n          vm\n        );\n      }\n    }\n    if (props && hasOwn(props, key)) {\n       true && warn(\n        \"The data property \\\"\" + key + \"\\\" is already declared as a prop. \" +\n        \"Use prop default value instead.\",\n        vm\n      );\n    } else if (!isReserved(key)) {\n      proxy(vm, \"_data\", key);\n    }\n  }\n  // observe data\n  observe(data, true /* asRootData */);\n}\n\nfunction getData (data, vm) {\n  // #7573 disable dep collection when invoking data getters\n  pushTarget();\n  try {\n    return data.call(vm, vm)\n  } catch (e) {\n    handleError(e, vm, \"data()\");\n    return {}\n  } finally {\n    popTarget();\n  }\n}\n\nvar computedWatcherOptions = { lazy: true };\n\nfunction initComputed (vm, computed) {\n  // $flow-disable-line\n  var watchers = vm._computedWatchers = Object.create(null);\n  // computed properties are just getters during SSR\n  var isSSR = isServerRendering();\n\n  for (var key in computed) {\n    var userDef = computed[key];\n    var getter = typeof userDef === 'function' ? userDef : userDef.get;\n    if ( true && getter == null) {\n      warn(\n        (\"Getter is missing for computed property \\\"\" + key + \"\\\".\"),\n        vm\n      );\n    }\n\n    if (!isSSR) {\n      // create internal watcher for the computed property.\n      watchers[key] = new Watcher(\n        vm,\n        getter || noop,\n        noop,\n        computedWatcherOptions\n      );\n    }\n\n    // component-defined computed properties are already defined on the\n    // component prototype. We only need to define computed properties defined\n    // at instantiation here.\n    if (!(key in vm)) {\n      defineComputed(vm, key, userDef);\n    } else if (true) {\n      if (key in vm.$data) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined in data.\"), vm);\n      } else if (vm.$options.props && key in vm.$options.props) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined as a prop.\"), vm);\n      }\n    }\n  }\n}\n\nfunction defineComputed (\n  target,\n  key,\n  userDef\n) {\n  var shouldCache = !isServerRendering();\n  if (typeof userDef === 'function') {\n    sharedPropertyDefinition.get = shouldCache\n      ? createComputedGetter(key)\n      : createGetterInvoker(userDef);\n    sharedPropertyDefinition.set = noop;\n  } else {\n    sharedPropertyDefinition.get = userDef.get\n      ? shouldCache && userDef.cache !== false\n        ? createComputedGetter(key)\n        : createGetterInvoker(userDef.get)\n      : noop;\n    sharedPropertyDefinition.set = userDef.set || noop;\n  }\n  if ( true &&\n      sharedPropertyDefinition.set === noop) {\n    sharedPropertyDefinition.set = function () {\n      warn(\n        (\"Computed property \\\"\" + key + \"\\\" was assigned to but it has no setter.\"),\n        this\n      );\n    };\n  }\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction createComputedGetter (key) {\n  return function computedGetter () {\n    var watcher = this._computedWatchers && this._computedWatchers[key];\n    if (watcher) {\n      if (watcher.dirty) {\n        watcher.evaluate();\n      }\n      if (Dep.SharedObject.target) {// fixed by xxxxxx\n        watcher.depend();\n      }\n      return watcher.value\n    }\n  }\n}\n\nfunction createGetterInvoker(fn) {\n  return function computedGetter () {\n    return fn.call(this, this)\n  }\n}\n\nfunction initMethods (vm, methods) {\n  var props = vm.$options.props;\n  for (var key in methods) {\n    if (true) {\n      if (typeof methods[key] !== 'function') {\n        warn(\n          \"Method \\\"\" + key + \"\\\" has type \\\"\" + (typeof methods[key]) + \"\\\" in the component definition. \" +\n          \"Did you reference the function correctly?\",\n          vm\n        );\n      }\n      if (props && hasOwn(props, key)) {\n        warn(\n          (\"Method \\\"\" + key + \"\\\" has already been defined as a prop.\"),\n          vm\n        );\n      }\n      if ((key in vm) && isReserved(key)) {\n        warn(\n          \"Method \\\"\" + key + \"\\\" conflicts with an existing Vue instance method. \" +\n          \"Avoid defining component methods that start with _ or $.\"\n        );\n      }\n    }\n    vm[key] = typeof methods[key] !== 'function' ? noop : bind(methods[key], vm);\n  }\n}\n\nfunction initWatch (vm, watch) {\n  for (var key in watch) {\n    var handler = watch[key];\n    if (Array.isArray(handler)) {\n      for (var i = 0; i < handler.length; i++) {\n        createWatcher(vm, key, handler[i]);\n      }\n    } else {\n      createWatcher(vm, key, handler);\n    }\n  }\n}\n\nfunction createWatcher (\n  vm,\n  expOrFn,\n  handler,\n  options\n) {\n  if (isPlainObject(handler)) {\n    options = handler;\n    handler = handler.handler;\n  }\n  if (typeof handler === 'string') {\n    handler = vm[handler];\n  }\n  return vm.$watch(expOrFn, handler, options)\n}\n\nfunction stateMixin (Vue) {\n  // flow somehow has problems with directly declared definition object\n  // when using Object.defineProperty, so we have to procedurally build up\n  // the object here.\n  var dataDef = {};\n  dataDef.get = function () { return this._data };\n  var propsDef = {};\n  propsDef.get = function () { return this._props };\n  if (true) {\n    dataDef.set = function () {\n      warn(\n        'Avoid replacing instance root $data. ' +\n        'Use nested data properties instead.',\n        this\n      );\n    };\n    propsDef.set = function () {\n      warn(\"$props is readonly.\", this);\n    };\n  }\n  Object.defineProperty(Vue.prototype, '$data', dataDef);\n  Object.defineProperty(Vue.prototype, '$props', propsDef);\n\n  Vue.prototype.$set = set;\n  Vue.prototype.$delete = del;\n\n  Vue.prototype.$watch = function (\n    expOrFn,\n    cb,\n    options\n  ) {\n    var vm = this;\n    if (isPlainObject(cb)) {\n      return createWatcher(vm, expOrFn, cb, options)\n    }\n    options = options || {};\n    options.user = true;\n    var watcher = new Watcher(vm, expOrFn, cb, options);\n    if (options.immediate) {\n      try {\n        cb.call(vm, watcher.value);\n      } catch (error) {\n        handleError(error, vm, (\"callback for immediate watcher \\\"\" + (watcher.expression) + \"\\\"\"));\n      }\n    }\n    return function unwatchFn () {\n      watcher.teardown();\n    }\n  };\n}\n\n/*  */\n\nvar uid$3 = 0;\n\nfunction initMixin (Vue) {\n  Vue.prototype._init = function (options) {\n    var vm = this;\n    // a uid\n    vm._uid = uid$3++;\n\n    var startTag, endTag;\n    /* istanbul ignore if */\n    if ( true && config.performance && mark) {\n      startTag = \"vue-perf-start:\" + (vm._uid);\n      endTag = \"vue-perf-end:\" + (vm._uid);\n      mark(startTag);\n    }\n\n    // a flag to avoid this being observed\n    vm._isVue = true;\n    // merge options\n    if (options && options._isComponent) {\n      // optimize internal component instantiation\n      // since dynamic options merging is pretty slow, and none of the\n      // internal component options needs special treatment.\n      initInternalComponent(vm, options);\n    } else {\n      vm.$options = mergeOptions(\n        resolveConstructorOptions(vm.constructor),\n        options || {},\n        vm\n      );\n    }\n    /* istanbul ignore else */\n    if (true) {\n      initProxy(vm);\n    } else {}\n    // expose real self\n    vm._self = vm;\n    initLifecycle(vm);\n    initEvents(vm);\n    initRender(vm);\n    callHook(vm, 'beforeCreate');\n    vm.mpHost !== 'mp-toutiao' && initInjections(vm); // resolve injections before data/props  \n    initState(vm);\n    vm.mpHost !== 'mp-toutiao' && initProvide(vm); // resolve provide after data/props\n    vm.mpHost !== 'mp-toutiao' && callHook(vm, 'created');      \n\n    /* istanbul ignore if */\n    if ( true && config.performance && mark) {\n      vm._name = formatComponentName(vm, false);\n      mark(endTag);\n      measure((\"vue \" + (vm._name) + \" init\"), startTag, endTag);\n    }\n\n    if (vm.$options.el) {\n      vm.$mount(vm.$options.el);\n    }\n  };\n}\n\nfunction initInternalComponent (vm, options) {\n  var opts = vm.$options = Object.create(vm.constructor.options);\n  // doing this because it's faster than dynamic enumeration.\n  var parentVnode = options._parentVnode;\n  opts.parent = options.parent;\n  opts._parentVnode = parentVnode;\n\n  var vnodeComponentOptions = parentVnode.componentOptions;\n  opts.propsData = vnodeComponentOptions.propsData;\n  opts._parentListeners = vnodeComponentOptions.listeners;\n  opts._renderChildren = vnodeComponentOptions.children;\n  opts._componentTag = vnodeComponentOptions.tag;\n\n  if (options.render) {\n    opts.render = options.render;\n    opts.staticRenderFns = options.staticRenderFns;\n  }\n}\n\nfunction resolveConstructorOptions (Ctor) {\n  var options = Ctor.options;\n  if (Ctor.super) {\n    var superOptions = resolveConstructorOptions(Ctor.super);\n    var cachedSuperOptions = Ctor.superOptions;\n    if (superOptions !== cachedSuperOptions) {\n      // super option changed,\n      // need to resolve new options.\n      Ctor.superOptions = superOptions;\n      // check if there are any late-modified/attached options (#4976)\n      var modifiedOptions = resolveModifiedOptions(Ctor);\n      // update base extend options\n      if (modifiedOptions) {\n        extend(Ctor.extendOptions, modifiedOptions);\n      }\n      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);\n      if (options.name) {\n        options.components[options.name] = Ctor;\n      }\n    }\n  }\n  return options\n}\n\nfunction resolveModifiedOptions (Ctor) {\n  var modified;\n  var latest = Ctor.options;\n  var sealed = Ctor.sealedOptions;\n  for (var key in latest) {\n    if (latest[key] !== sealed[key]) {\n      if (!modified) { modified = {}; }\n      modified[key] = latest[key];\n    }\n  }\n  return modified\n}\n\nfunction Vue (options) {\n  if ( true &&\n    !(this instanceof Vue)\n  ) {\n    warn('Vue is a constructor and should be called with the `new` keyword');\n  }\n  this._init(options);\n}\n\ninitMixin(Vue);\nstateMixin(Vue);\neventsMixin(Vue);\nlifecycleMixin(Vue);\nrenderMixin(Vue);\n\n/*  */\n\nfunction initUse (Vue) {\n  Vue.use = function (plugin) {\n    var installedPlugins = (this._installedPlugins || (this._installedPlugins = []));\n    if (installedPlugins.indexOf(plugin) > -1) {\n      return this\n    }\n\n    // additional parameters\n    var args = toArray(arguments, 1);\n    args.unshift(this);\n    if (typeof plugin.install === 'function') {\n      plugin.install.apply(plugin, args);\n    } else if (typeof plugin === 'function') {\n      plugin.apply(null, args);\n    }\n    installedPlugins.push(plugin);\n    return this\n  };\n}\n\n/*  */\n\nfunction initMixin$1 (Vue) {\n  Vue.mixin = function (mixin) {\n    this.options = mergeOptions(this.options, mixin);\n    return this\n  };\n}\n\n/*  */\n\nfunction initExtend (Vue) {\n  /**\n   * Each instance constructor, including Vue, has a unique\n   * cid. This enables us to create wrapped \"child\n   * constructors\" for prototypal inheritance and cache them.\n   */\n  Vue.cid = 0;\n  var cid = 1;\n\n  /**\n   * Class inheritance\n   */\n  Vue.extend = function (extendOptions) {\n    extendOptions = extendOptions || {};\n    var Super = this;\n    var SuperId = Super.cid;\n    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});\n    if (cachedCtors[SuperId]) {\n      return cachedCtors[SuperId]\n    }\n\n    var name = extendOptions.name || Super.options.name;\n    if ( true && name) {\n      validateComponentName(name);\n    }\n\n    var Sub = function VueComponent (options) {\n      this._init(options);\n    };\n    Sub.prototype = Object.create(Super.prototype);\n    Sub.prototype.constructor = Sub;\n    Sub.cid = cid++;\n    Sub.options = mergeOptions(\n      Super.options,\n      extendOptions\n    );\n    Sub['super'] = Super;\n\n    // For props and computed properties, we define the proxy getters on\n    // the Vue instances at extension time, on the extended prototype. This\n    // avoids Object.defineProperty calls for each instance created.\n    if (Sub.options.props) {\n      initProps$1(Sub);\n    }\n    if (Sub.options.computed) {\n      initComputed$1(Sub);\n    }\n\n    // allow further extension/mixin/plugin usage\n    Sub.extend = Super.extend;\n    Sub.mixin = Super.mixin;\n    Sub.use = Super.use;\n\n    // create asset registers, so extended classes\n    // can have their private assets too.\n    ASSET_TYPES.forEach(function (type) {\n      Sub[type] = Super[type];\n    });\n    // enable recursive self-lookup\n    if (name) {\n      Sub.options.components[name] = Sub;\n    }\n\n    // keep a reference to the super options at extension time.\n    // later at instantiation we can check if Super's options have\n    // been updated.\n    Sub.superOptions = Super.options;\n    Sub.extendOptions = extendOptions;\n    Sub.sealedOptions = extend({}, Sub.options);\n\n    // cache constructor\n    cachedCtors[SuperId] = Sub;\n    return Sub\n  };\n}\n\nfunction initProps$1 (Comp) {\n  var props = Comp.options.props;\n  for (var key in props) {\n    proxy(Comp.prototype, \"_props\", key);\n  }\n}\n\nfunction initComputed$1 (Comp) {\n  var computed = Comp.options.computed;\n  for (var key in computed) {\n    defineComputed(Comp.prototype, key, computed[key]);\n  }\n}\n\n/*  */\n\nfunction initAssetRegisters (Vue) {\n  /**\n   * Create asset registration methods.\n   */\n  ASSET_TYPES.forEach(function (type) {\n    Vue[type] = function (\n      id,\n      definition\n    ) {\n      if (!definition) {\n        return this.options[type + 's'][id]\n      } else {\n        /* istanbul ignore if */\n        if ( true && type === 'component') {\n          validateComponentName(id);\n        }\n        if (type === 'component' && isPlainObject(definition)) {\n          definition.name = definition.name || id;\n          definition = this.options._base.extend(definition);\n        }\n        if (type === 'directive' && typeof definition === 'function') {\n          definition = { bind: definition, update: definition };\n        }\n        this.options[type + 's'][id] = definition;\n        return definition\n      }\n    };\n  });\n}\n\n/*  */\n\n\n\nfunction getComponentName (opts) {\n  return opts && (opts.Ctor.options.name || opts.tag)\n}\n\nfunction matches (pattern, name) {\n  if (Array.isArray(pattern)) {\n    return pattern.indexOf(name) > -1\n  } else if (typeof pattern === 'string') {\n    return pattern.split(',').indexOf(name) > -1\n  } else if (isRegExp(pattern)) {\n    return pattern.test(name)\n  }\n  /* istanbul ignore next */\n  return false\n}\n\nfunction pruneCache (keepAliveInstance, filter) {\n  var cache = keepAliveInstance.cache;\n  var keys = keepAliveInstance.keys;\n  var _vnode = keepAliveInstance._vnode;\n  for (var key in cache) {\n    var cachedNode = cache[key];\n    if (cachedNode) {\n      var name = getComponentName(cachedNode.componentOptions);\n      if (name && !filter(name)) {\n        pruneCacheEntry(cache, key, keys, _vnode);\n      }\n    }\n  }\n}\n\nfunction pruneCacheEntry (\n  cache,\n  key,\n  keys,\n  current\n) {\n  var cached$$1 = cache[key];\n  if (cached$$1 && (!current || cached$$1.tag !== current.tag)) {\n    cached$$1.componentInstance.$destroy();\n  }\n  cache[key] = null;\n  remove(keys, key);\n}\n\nvar patternTypes = [String, RegExp, Array];\n\nvar KeepAlive = {\n  name: 'keep-alive',\n  abstract: true,\n\n  props: {\n    include: patternTypes,\n    exclude: patternTypes,\n    max: [String, Number]\n  },\n\n  created: function created () {\n    this.cache = Object.create(null);\n    this.keys = [];\n  },\n\n  destroyed: function destroyed () {\n    for (var key in this.cache) {\n      pruneCacheEntry(this.cache, key, this.keys);\n    }\n  },\n\n  mounted: function mounted () {\n    var this$1 = this;\n\n    this.$watch('include', function (val) {\n      pruneCache(this$1, function (name) { return matches(val, name); });\n    });\n    this.$watch('exclude', function (val) {\n      pruneCache(this$1, function (name) { return !matches(val, name); });\n    });\n  },\n\n  render: function render () {\n    var slot = this.$slots.default;\n    var vnode = getFirstComponentChild(slot);\n    var componentOptions = vnode && vnode.componentOptions;\n    if (componentOptions) {\n      // check pattern\n      var name = getComponentName(componentOptions);\n      var ref = this;\n      var include = ref.include;\n      var exclude = ref.exclude;\n      if (\n        // not included\n        (include && (!name || !matches(include, name))) ||\n        // excluded\n        (exclude && name && matches(exclude, name))\n      ) {\n        return vnode\n      }\n\n      var ref$1 = this;\n      var cache = ref$1.cache;\n      var keys = ref$1.keys;\n      var key = vnode.key == null\n        // same constructor may get registered as different local components\n        // so cid alone is not enough (#3269)\n        ? componentOptions.Ctor.cid + (componentOptions.tag ? (\"::\" + (componentOptions.tag)) : '')\n        : vnode.key;\n      if (cache[key]) {\n        vnode.componentInstance = cache[key].componentInstance;\n        // make current key freshest\n        remove(keys, key);\n        keys.push(key);\n      } else {\n        cache[key] = vnode;\n        keys.push(key);\n        // prune oldest entry\n        if (this.max && keys.length > parseInt(this.max)) {\n          pruneCacheEntry(cache, keys[0], keys, this._vnode);\n        }\n      }\n\n      vnode.data.keepAlive = true;\n    }\n    return vnode || (slot && slot[0])\n  }\n};\n\nvar builtInComponents = {\n  KeepAlive: KeepAlive\n};\n\n/*  */\n\nfunction initGlobalAPI (Vue) {\n  // config\n  var configDef = {};\n  configDef.get = function () { return config; };\n  if (true) {\n    configDef.set = function () {\n      warn(\n        'Do not replace the Vue.config object, set individual fields instead.'\n      );\n    };\n  }\n  Object.defineProperty(Vue, 'config', configDef);\n\n  // exposed util methods.\n  // NOTE: these are not considered part of the public API - avoid relying on\n  // them unless you are aware of the risk.\n  Vue.util = {\n    warn: warn,\n    extend: extend,\n    mergeOptions: mergeOptions,\n    defineReactive: defineReactive$$1\n  };\n\n  Vue.set = set;\n  Vue.delete = del;\n  Vue.nextTick = nextTick;\n\n  // 2.6 explicit observable API\n  Vue.observable = function (obj) {\n    observe(obj);\n    return obj\n  };\n\n  Vue.options = Object.create(null);\n  ASSET_TYPES.forEach(function (type) {\n    Vue.options[type + 's'] = Object.create(null);\n  });\n\n  // this is used to identify the \"base\" constructor to extend all plain-object\n  // components with in Weex's multi-instance scenarios.\n  Vue.options._base = Vue;\n\n  extend(Vue.options.components, builtInComponents);\n\n  initUse(Vue);\n  initMixin$1(Vue);\n  initExtend(Vue);\n  initAssetRegisters(Vue);\n}\n\ninitGlobalAPI(Vue);\n\nObject.defineProperty(Vue.prototype, '$isServer', {\n  get: isServerRendering\n});\n\nObject.defineProperty(Vue.prototype, '$ssrContext', {\n  get: function get () {\n    /* istanbul ignore next */\n    return this.$vnode && this.$vnode.ssrContext\n  }\n});\n\n// expose FunctionalRenderContext for ssr runtime helper installation\nObject.defineProperty(Vue, 'FunctionalRenderContext', {\n  value: FunctionalRenderContext\n});\n\nVue.version = '2.6.11';\n\n/**\n * https://raw.githubusercontent.com/Tencent/westore/master/packages/westore/utils/diff.js\n */\nvar ARRAYTYPE = '[object Array]';\nvar OBJECTTYPE = '[object Object]';\n// const FUNCTIONTYPE = '[object Function]'\n\nfunction diff(current, pre) {\n    var result = {};\n    syncKeys(current, pre);\n    _diff(current, pre, '', result);\n    return result\n}\n\nfunction syncKeys(current, pre) {\n    if (current === pre) { return }\n    var rootCurrentType = type(current);\n    var rootPreType = type(pre);\n    if (rootCurrentType == OBJECTTYPE && rootPreType == OBJECTTYPE) {\n        if(Object.keys(current).length >= Object.keys(pre).length){\n            for (var key in pre) {\n                var currentValue = current[key];\n                if (currentValue === undefined) {\n                    current[key] = null;\n                } else {\n                    syncKeys(currentValue, pre[key]);\n                }\n            }\n        }\n    } else if (rootCurrentType == ARRAYTYPE && rootPreType == ARRAYTYPE) {\n        if (current.length >= pre.length) {\n            pre.forEach(function (item, index) {\n                syncKeys(current[index], item);\n            });\n        }\n    }\n}\n\nfunction _diff(current, pre, path, result) {\n    if (current === pre) { return }\n    var rootCurrentType = type(current);\n    var rootPreType = type(pre);\n    if (rootCurrentType == OBJECTTYPE) {\n        if (rootPreType != OBJECTTYPE || Object.keys(current).length < Object.keys(pre).length) {\n            setResult(result, path, current);\n        } else {\n            var loop = function ( key ) {\n                var currentValue = current[key];\n                var preValue = pre[key];\n                var currentType = type(currentValue);\n                var preType = type(preValue);\n                if (currentType != ARRAYTYPE && currentType != OBJECTTYPE) {\n                    if (currentValue != pre[key]) {\n                        setResult(result, (path == '' ? '' : path + \".\") + key, currentValue);\n                    }\n                } else if (currentType == ARRAYTYPE) {\n                    if (preType != ARRAYTYPE) {\n                        setResult(result, (path == '' ? '' : path + \".\") + key, currentValue);\n                    } else {\n                        if (currentValue.length < preValue.length) {\n                            setResult(result, (path == '' ? '' : path + \".\") + key, currentValue);\n                        } else {\n                            currentValue.forEach(function (item, index) {\n                                _diff(item, preValue[index], (path == '' ? '' : path + \".\") + key + '[' + index + ']', result);\n                            });\n                        }\n                    }\n                } else if (currentType == OBJECTTYPE) {\n                    if (preType != OBJECTTYPE || Object.keys(currentValue).length < Object.keys(preValue).length) {\n                        setResult(result, (path == '' ? '' : path + \".\") + key, currentValue);\n                    } else {\n                        for (var subKey in currentValue) {\n                            _diff(currentValue[subKey], preValue[subKey], (path == '' ? '' : path + \".\") + key + '.' + subKey, result);\n                        }\n                    }\n                }\n            };\n\n            for (var key in current) loop( key );\n        }\n    } else if (rootCurrentType == ARRAYTYPE) {\n        if (rootPreType != ARRAYTYPE) {\n            setResult(result, path, current);\n        } else {\n            if (current.length < pre.length) {\n                setResult(result, path, current);\n            } else {\n                current.forEach(function (item, index) {\n                    _diff(item, pre[index], path + '[' + index + ']', result);\n                });\n            }\n        }\n    } else {\n        setResult(result, path, current);\n    }\n}\n\nfunction setResult(result, k, v) {\n    // if (type(v) != FUNCTIONTYPE) {\n        result[k] = v;\n    // }\n}\n\nfunction type(obj) {\n    return Object.prototype.toString.call(obj)\n}\n\n/*  */\r\n\r\nfunction flushCallbacks$1(vm) {\r\n    if (vm.__next_tick_callbacks && vm.__next_tick_callbacks.length) {\r\n        if (Object({\"VUE_APP_PLATFORM\":\"app-plus\",\"NODE_ENV\":\"development\",\"BASE_URL\":\"/\"}).VUE_APP_DEBUG) {\r\n            var mpInstance = vm.$scope;\r\n            console.log('[' + (+new Date) + '][' + (mpInstance.is || mpInstance.route) + '][' + vm._uid +\r\n                ']:flushCallbacks[' + vm.__next_tick_callbacks.length + ']');\r\n        }\r\n        var copies = vm.__next_tick_callbacks.slice(0);\r\n        vm.__next_tick_callbacks.length = 0;\r\n        for (var i = 0; i < copies.length; i++) {\r\n            copies[i]();\r\n        }\r\n    }\r\n}\r\n\r\nfunction hasRenderWatcher(vm) {\r\n    return queue.find(function (watcher) { return vm._watcher === watcher; })\r\n}\r\n\r\nfunction nextTick$1(vm, cb) {\r\n    //1.nextTick 之前 已 setData 且 setData 还未回调完成\r\n    //2.nextTick 之前存在 render watcher\r\n    if (!vm.__next_tick_pending && !hasRenderWatcher(vm)) {\n        if(Object({\"VUE_APP_PLATFORM\":\"app-plus\",\"NODE_ENV\":\"development\",\"BASE_URL\":\"/\"}).VUE_APP_DEBUG){\n            var mpInstance = vm.$scope;\n            console.log('[' + (+new Date) + '][' + (mpInstance.is || mpInstance.route) + '][' + vm._uid +\n                ']:nextVueTick');\n        }\r\n        return nextTick(cb, vm)\r\n    }else{\n        if(Object({\"VUE_APP_PLATFORM\":\"app-plus\",\"NODE_ENV\":\"development\",\"BASE_URL\":\"/\"}).VUE_APP_DEBUG){\n            var mpInstance$1 = vm.$scope;\n            console.log('[' + (+new Date) + '][' + (mpInstance$1.is || mpInstance$1.route) + '][' + vm._uid +\n                ']:nextMPTick');\n        }\n    }\r\n    var _resolve;\r\n    if (!vm.__next_tick_callbacks) {\r\n        vm.__next_tick_callbacks = [];\r\n    }\r\n    vm.__next_tick_callbacks.push(function () {\r\n        if (cb) {\r\n            try {\r\n                cb.call(vm);\r\n            } catch (e) {\r\n                handleError(e, vm, 'nextTick');\r\n            }\r\n        } else if (_resolve) {\r\n            _resolve(vm);\r\n        }\r\n    });\r\n    // $flow-disable-line\r\n    if (!cb && typeof Promise !== 'undefined') {\r\n        return new Promise(function (resolve) {\r\n            _resolve = resolve;\r\n        })\r\n    }\r\n}\n\n/*  */\r\n\r\nfunction cloneWithData(vm) {\r\n  // 确保当前 vm 所有数据被同步\r\n  var ret = Object.create(null);\r\n  var dataKeys = [].concat(\r\n    Object.keys(vm._data || {}),\r\n    Object.keys(vm._computedWatchers || {}));\r\n\r\n  dataKeys.reduce(function(ret, key) {\r\n    ret[key] = vm[key];\r\n    return ret\r\n  }, ret);\r\n  //TODO 需要把无用数据处理掉，比如 list=>l0 则 list 需要移除，否则多传输一份数据\r\n  Object.assign(ret, vm.$mp.data || {});\r\n  if (\r\n    Array.isArray(vm.$options.behaviors) &&\r\n    vm.$options.behaviors.indexOf('uni://form-field') !== -1\r\n  ) { //form-field\r\n    ret['name'] = vm.name;\r\n    ret['value'] = vm.value;\r\n  }\r\n\r\n  return JSON.parse(JSON.stringify(ret))\r\n}\r\n\r\nvar patch = function(oldVnode, vnode) {\n  var this$1 = this;\n\r\n  if (vnode === null) { //destroy\r\n    return\r\n  }\r\n  if (this.mpType === 'page' || this.mpType === 'component') {\r\n    var mpInstance = this.$scope;\r\n    var data = Object.create(null);\r\n    try {\r\n      data = cloneWithData(this);\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n    data.__webviewId__ = mpInstance.data.__webviewId__;\r\n    var mpData = Object.create(null);\r\n    Object.keys(data).forEach(function (key) { //仅同步 data 中有的数据\r\n      mpData[key] = mpInstance.data[key];\r\n    });\r\n    var diffData = diff(data, mpData);\r\n    if (Object.keys(diffData).length) {\r\n      if (Object({\"VUE_APP_PLATFORM\":\"app-plus\",\"NODE_ENV\":\"development\",\"BASE_URL\":\"/\"}).VUE_APP_DEBUG) {\r\n        console.log('[' + (+new Date) + '][' + (mpInstance.is || mpInstance.route) + '][' + this._uid +\r\n          ']差量更新',\r\n          JSON.stringify(diffData));\r\n      }\r\n      this.__next_tick_pending = true;\r\n      mpInstance.setData(diffData, function () {\r\n        this$1.__next_tick_pending = false;\r\n        flushCallbacks$1(this$1);\r\n      });\r\n    } else {\r\n      flushCallbacks$1(this);\r\n    }\r\n  }\r\n};\n\n/*  */\n\nfunction createEmptyRender() {\n\n}\n\nfunction mountComponent$1(\n  vm,\n  el,\n  hydrating\n) {\n  if (!vm.mpType) {//main.js 中的 new Vue\n    return vm\n  }\n  if (vm.mpType === 'app') {\n    vm.$options.render = createEmptyRender;\n  }\n  if (!vm.$options.render) {\n    vm.$options.render = createEmptyRender;\n    if (true) {\n      /* istanbul ignore if */\n      if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||\n        vm.$options.el || el) {\n        warn(\n          'You are using the runtime-only build of Vue where the template ' +\n          'compiler is not available. Either pre-compile the templates into ' +\n          'render functions, or use the compiler-included build.',\n          vm\n        );\n      } else {\n        warn(\n          'Failed to mount component: template or render function not defined.',\n          vm\n        );\n      }\n    }\n  }\n  \n  vm.mpHost !== 'mp-toutiao' && callHook(vm, 'beforeMount');\n\n  var updateComponent = function () {\n    vm._update(vm._render(), hydrating);\n  };\n\n  // we set this to vm._watcher inside the watcher's constructor\n  // since the watcher's initial patch may call $forceUpdate (e.g. inside child\n  // component's mounted hook), which relies on vm._watcher being already defined\n  new Watcher(vm, updateComponent, noop, {\n    before: function before() {\n      if (vm._isMounted && !vm._isDestroyed) {\n        callHook(vm, 'beforeUpdate');\n      }\n    }\n  }, true /* isRenderWatcher */);\n  hydrating = false;\n  return vm\n}\n\n/*  */\n\nfunction renderClass (\n  staticClass,\n  dynamicClass\n) {\n  if (isDef(staticClass) || isDef(dynamicClass)) {\n    return concat(staticClass, stringifyClass(dynamicClass))\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction concat (a, b) {\n  return a ? b ? (a + ' ' + b) : a : (b || '')\n}\n\nfunction stringifyClass (value) {\n  if (Array.isArray(value)) {\n    return stringifyArray(value)\n  }\n  if (isObject(value)) {\n    return stringifyObject(value)\n  }\n  if (typeof value === 'string') {\n    return value\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction stringifyArray (value) {\n  var res = '';\n  var stringified;\n  for (var i = 0, l = value.length; i < l; i++) {\n    if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {\n      if (res) { res += ' '; }\n      res += stringified;\n    }\n  }\n  return res\n}\n\nfunction stringifyObject (value) {\n  var res = '';\n  for (var key in value) {\n    if (value[key]) {\n      if (res) { res += ' '; }\n      res += key;\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar parseStyleText = cached(function (cssText) {\n  var res = {};\n  var listDelimiter = /;(?![^(]*\\))/g;\n  var propertyDelimiter = /:(.+)/;\n  cssText.split(listDelimiter).forEach(function (item) {\n    if (item) {\n      var tmp = item.split(propertyDelimiter);\n      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());\n    }\n  });\n  return res\n});\n\n// normalize possible array / string values into Object\nfunction normalizeStyleBinding (bindingStyle) {\n  if (Array.isArray(bindingStyle)) {\n    return toObject(bindingStyle)\n  }\n  if (typeof bindingStyle === 'string') {\n    return parseStyleText(bindingStyle)\n  }\n  return bindingStyle\n}\n\n/*  */\r\n\r\nvar MP_METHODS = ['createSelectorQuery', 'createIntersectionObserver', 'selectAllComponents', 'selectComponent'];\r\n\r\nfunction getTarget(obj, path) {\r\n  var parts = path.split('.');\r\n  var key = parts[0];\r\n  if (key.indexOf('__$n') === 0) { //number index\r\n    key = parseInt(key.replace('__$n', ''));\r\n  }\r\n  if (parts.length === 1) {\r\n    return obj[key]\r\n  }\r\n  return getTarget(obj[key], parts.slice(1).join('.'))\r\n}\r\n\r\nfunction internalMixin(Vue) {\r\n\r\n  Vue.config.errorHandler = function(err) {\n    /* eslint-disable no-undef */\r\n    var app = getApp();\r\n    if (app && app.onError) {\r\n      app.onError(err);\r\n    } else {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  var oldEmit = Vue.prototype.$emit;\r\n\r\n  Vue.prototype.$emit = function(event) {\r\n    if (this.$scope && event) {\r\n      this.$scope['triggerEvent'](event, {\r\n        __args__: toArray(arguments, 1)\r\n      });\r\n    }\r\n    return oldEmit.apply(this, arguments)\r\n  };\r\n\r\n  Vue.prototype.$nextTick = function(fn) {\r\n    return nextTick$1(this, fn)\r\n  };\r\n\r\n  MP_METHODS.forEach(function (method) {\r\n    Vue.prototype[method] = function(args) {\r\n      if (this.$scope && this.$scope[method]) {\r\n        return this.$scope[method](args)\r\n      }\r\n      // mp-alipay\r\n      if (typeof my === 'undefined') {\r\n        return\r\n      }\r\n      if (method === 'createSelectorQuery') {\r\n        /* eslint-disable no-undef */\r\n        return my.createSelectorQuery(args)\r\n      } else if (method === 'createIntersectionObserver') {\r\n        /* eslint-disable no-undef */\r\n        return my.createIntersectionObserver(args)\r\n      }\r\n      // TODO mp-alipay 暂不支持 selectAllComponents,selectComponent\r\n    };\r\n  });\r\n\r\n  Vue.prototype.__init_provide = initProvide;\r\n\r\n  Vue.prototype.__init_injections = initInjections;\r\n\r\n  Vue.prototype.__call_hook = function(hook, args) {\r\n    var vm = this;\r\n    // #7573 disable dep collection when invoking lifecycle hooks\r\n    pushTarget();\r\n    var handlers = vm.$options[hook];\r\n    var info = hook + \" hook\";\r\n    var ret;\r\n    if (handlers) {\r\n      for (var i = 0, j = handlers.length; i < j; i++) {\r\n        ret = invokeWithErrorHandling(handlers[i], vm, args ? [args] : null, vm, info);\r\n      }\r\n    }\r\n    if (vm._hasHookEvent) {\r\n      vm.$emit('hook:' + hook, args);\r\n    }\r\n    popTarget();\r\n    return ret\r\n  };\r\n\r\n  Vue.prototype.__set_model = function(target, key, value, modifiers) {\r\n    if (Array.isArray(modifiers)) {\r\n      if (modifiers.indexOf('trim') !== -1) {\r\n        value = value.trim();\r\n      }\r\n      if (modifiers.indexOf('number') !== -1) {\r\n        value = this._n(value);\r\n      }\r\n    }\r\n    if (!target) {\r\n      target = this;\r\n    }\r\n    target[key] = value;\r\n  };\r\n\r\n  Vue.prototype.__set_sync = function(target, key, value) {\r\n    if (!target) {\r\n      target = this;\r\n    }\r\n    target[key] = value;\r\n  };\r\n\r\n  Vue.prototype.__get_orig = function(item) {\r\n    if (isPlainObject(item)) {\r\n      return item['$orig'] || item\r\n    }\r\n    return item\r\n  };\r\n\r\n  Vue.prototype.__get_value = function(dataPath, target) {\r\n    return getTarget(target || this, dataPath)\r\n  };\r\n\r\n\r\n  Vue.prototype.__get_class = function(dynamicClass, staticClass) {\r\n    return renderClass(staticClass, dynamicClass)\r\n  };\r\n\r\n  Vue.prototype.__get_style = function(dynamicStyle, staticStyle) {\r\n    if (!dynamicStyle && !staticStyle) {\r\n      return ''\r\n    }\r\n    var dynamicStyleObj = normalizeStyleBinding(dynamicStyle);\r\n    var styleObj = staticStyle ? extend(staticStyle, dynamicStyleObj) : dynamicStyleObj;\r\n    return Object.keys(styleObj).map(function (name) { return ((hyphenate(name)) + \":\" + (styleObj[name])); }).join(';')\r\n  };\r\n\r\n  Vue.prototype.__map = function(val, iteratee) {\r\n    //TODO 暂不考虑 string,number\r\n    var ret, i, l, keys, key;\r\n    if (Array.isArray(val)) {\r\n      ret = new Array(val.length);\r\n      for (i = 0, l = val.length; i < l; i++) {\r\n        ret[i] = iteratee(val[i], i);\r\n      }\r\n      return ret\r\n    } else if (isObject(val)) {\r\n      keys = Object.keys(val);\r\n      ret = Object.create(null);\r\n      for (i = 0, l = keys.length; i < l; i++) {\r\n        key = keys[i];\r\n        ret[key] = iteratee(val[key], key, i);\r\n      }\r\n      return ret\r\n    }\r\n    return []\r\n  };\r\n\r\n}\n\n/*  */\r\n\r\nvar LIFECYCLE_HOOKS$1 = [\r\n    //App\r\n    'onLaunch',\r\n    'onShow',\r\n    'onHide',\r\n    'onUniNViewMessage',\n    'onError',\r\n    //Page\r\n    'onLoad',\r\n    // 'onShow',\r\n    'onReady',\r\n    // 'onHide',\r\n    'onUnload',\r\n    'onPullDownRefresh',\r\n    'onReachBottom',\r\n    'onTabItemTap',\r\n    'onShareAppMessage',\n    'onResize',\r\n    'onPageScroll',\r\n    'onNavigationBarButtonTap',\r\n    'onBackPress',\r\n    'onNavigationBarSearchInputChanged',\r\n    'onNavigationBarSearchInputConfirmed',\r\n    'onNavigationBarSearchInputClicked',\r\n    //Component\r\n    // 'onReady', // 兼容旧版本，应该移除该事件\r\n    'onPageShow',\r\n    'onPageHide',\r\n    'onPageResize'\r\n];\r\nfunction lifecycleMixin$1(Vue) {\r\n\r\n    //fixed vue-class-component\r\n    var oldExtend = Vue.extend;\r\n    Vue.extend = function(extendOptions) {\r\n        extendOptions = extendOptions || {};\r\n\r\n        var methods = extendOptions.methods;\r\n        if (methods) {\r\n            Object.keys(methods).forEach(function (methodName) {\r\n                if (LIFECYCLE_HOOKS$1.indexOf(methodName)!==-1) {\r\n                    extendOptions[methodName] = methods[methodName];\r\n                    delete methods[methodName];\r\n                }\r\n            });\r\n        }\r\n\r\n        return oldExtend.call(this, extendOptions)\r\n    };\r\n\r\n    var strategies = Vue.config.optionMergeStrategies;\r\n    var mergeHook = strategies.created;\r\n    LIFECYCLE_HOOKS$1.forEach(function (hook) {\r\n        strategies[hook] = mergeHook;\r\n    });\r\n\r\n    Vue.prototype.__lifecycle_hooks__ = LIFECYCLE_HOOKS$1;\r\n}\n\n/*  */\r\n\n// install platform patch function\r\nVue.prototype.__patch__ = patch;\r\n\r\n// public mount method\r\nVue.prototype.$mount = function(\r\n    el ,\r\n    hydrating \r\n) {\r\n    return mountComponent$1(this, el, hydrating)\r\n};\r\n\r\nlifecycleMixin$1(Vue);\r\ninternalMixin(Vue);\n\n/*  */\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Vue);\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../webpack/buildin/global.js */ 2)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3\n");

/***/ }),

/***/ 4:
/*!***********************************************************!*\
  !*** E:/colorUI/ai_chat_front/ai_assist_front/pages.json ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiI0LmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///4\n");

/***/ }),

/***/ 44:
/*!*************************************************************!*\
  !*** E:/colorUI/ai_chat_front/ai_assist_front/utils/api.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.PUSHCLICK = exports.GREENCREATEORDER = exports.GREENCARDLIST = exports.TASKINFO = exports.SCENCESET = exports.SETVOICEPROLOGUE = exports.SCENEUSERPOST = exports.SCENEREFUSEUPDATE = exports.SCENEREFUSE = exports.SCENELIST = exports.SCENESTATUS = exports.REFUSECALLSET = exports.REFUSECALL = exports.BLACKDELETE = exports.BLACKADD = exports.BLACKLIST = exports.PROLOGUEDELETE = exports.SETTEXTPROLOGUE = exports.PROLOGUEGET = exports.PROLOGUESET = exports.PROLOGUECURRENT = exports.PROLOGUELIST = exports.TTSCONVERT = exports.TTSSCENE = exports.TTSUPDATE = exports.TTSPLAID = exports.TRANSFERCONFIG = exports.QRCODE = exports.CARDPACKDETAILS = exports.CARDPACK = exports.PARTNERCASHLIST = exports.PARTNERINVITELIST = exports.PARTNERCASHOUT = exports.PARTNERBIND = exports.PARTNERINVITEDATA = exports.PARTNERCASH = exports.PARTNERINFO = exports.EXCHANGECARD = exports.SHARECARD = exports.FEEDBACK = exports.UPLOADFILE = exports.GETNUMINFO = exports.SUBSCRIBEINFO = exports.INVITELIST = exports.INVITEDATA = exports.JSAPI = exports.APPLYCASHOUT = exports.MYCASHLIST = exports.CASHLIST = exports.MYCASH = exports.MYINFO = exports.GOODSLIST = exports.BEFORODER = exports.CREATEORDER = exports.ADDBLACKLIST = exports.COUPONLIST = exports.BANNER = exports.DELCALL = exports.AUDITION = exports.CANCELPROLPGUE = exports.GETPROLPGUE = exports.TEXTPROLOGUE = exports.VOICEPROLOGUE = exports.DELCONTACT = exports.ADDCONTACT = exports.CONTACTDETAIL = exports.CONTACTLIST = exports.CALLRECORDDETAILS = exports.INDEXCOUPON = exports.SHOWINDEXTIP = exports.SETTINGURL = exports.CALLRECORDLIST = exports.CALLRECORDLISTTODAY = exports.SENDCODE2 = exports.SENDCODE = exports.LOGIN = exports.TEST = void 0; // const API = \"\";\t\nvar API = \"/api\";\n// 测试\nvar TEST = API + \"/getWangYiNews\";\n// 绑定手机号\nexports.TEST = TEST;var LOGIN = API + \"/app/bindMobile\";\n//发送验证码加密\nexports.LOGIN = LOGIN;var SENDCODE = API + \"/app/sendVerifyCodeS\";\n//发送验证码\nexports.SENDCODE = SENDCODE;var SENDCODE2 = API + \"/app/sendVerifyCode\";\n// 通话列表\nexports.SENDCODE2 = SENDCODE2;var CALLRECORDLISTTODAY = API + \"/app/chat/callRecordListToday\";\n// 历史来电\nexports.CALLRECORDLISTTODAY = CALLRECORDLISTTODAY;var CALLRECORDLIST = API + \"/app/chat/callRecordList\";\n// 获取接听\nexports.CALLRECORDLIST = CALLRECORDLIST;var SETTINGURL = API + \"/app/chat/getSettingPageUrl\";\n// 首页会员状态\nexports.SETTINGURL = SETTINGURL;var SHOWINDEXTIP = API + \"/app/index/showIndexTips\";\n// 首页获取优惠券\nexports.SHOWINDEXTIP = SHOWINDEXTIP;var INDEXCOUPON = API + \"/app/index/getCoupon\";\n\n\n/**\r\n                                                                                     * 专属定制\r\n                                                                                     */\n\n// 通讯录详情\nexports.INDEXCOUPON = INDEXCOUPON;var CALLRECORDDETAILS = API + \"/app/chat/callRecordDetails\";\n// 通讯录列表\nexports.CALLRECORDDETAILS = CALLRECORDDETAILS;var CONTACTLIST = API + \"/app/contact/list\";\n// 通讯录详情\nexports.CONTACTLIST = CONTACTLIST;var CONTACTDETAIL = API + \"/app/contact/detail\";\n// 添加联系人\nexports.CONTACTDETAIL = CONTACTDETAIL;var ADDCONTACT = API + \"/app/contact/create\";\n// 删除联系人\nexports.ADDCONTACT = ADDCONTACT;var DELCONTACT = API + \"/app/contact/delete\";\n// 自定义录音开场白\nexports.DELCONTACT = DELCONTACT;var VOICEPROLOGUE = API + \"/app/chat/setVoicePrologue\";\n// 自定义文本开场白\nexports.VOICEPROLOGUE = VOICEPROLOGUE;var TEXTPROLOGUE = API + \"/app/chat/setTextPrologue\";\n// 查询自定义开场白\nexports.TEXTPROLOGUE = TEXTPROLOGUE;var GETPROLPGUE = API + \"/app/chat/getPrologue\";\n// 取消开场白\nexports.GETPROLPGUE = GETPROLPGUE;var CANCELPROLPGUE = API + \"/app/chat/cancelPrologue\";\n// 试听\nexports.CANCELPROLPGUE = CANCELPROLPGUE;var AUDITION = API + \"/app/chat/audition\";\n// 删除通话详情\nexports.AUDITION = AUDITION;var DELCALL = API + \"/app/chat/delCallRecord\";\n//banner\nexports.DELCALL = DELCALL;var BANNER = API + \"/app/banner\";\n\n//优惠券列表\nexports.BANNER = BANNER;var COUPONLIST = API + \"/app/chat/couponList\";\n\n\n/**\r\n                                                                        * 个人中心\r\n                                                                        */\n\n// 添加黑名单\nexports.COUPONLIST = COUPONLIST;var ADDBLACKLIST = API + \"/app/blacklist/add\";\n// 创建订单\nexports.ADDBLACKLIST = ADDBLACKLIST;var CREATEORDER = API + \"/app/order/createOrder\";\n// 优惠券\nexports.CREATEORDER = CREATEORDER;var BEFORODER = API + \"/app/order/beforeOrder\";\n//购买卡列表\nexports.BEFORODER = BEFORODER;var GOODSLIST = API + \"/app/order/goodsCardList\";\n//我的信息\nexports.GOODSLIST = GOODSLIST;var MYINFO = API + \"/app/chat/myInfo\";\n//我的钱包\nexports.MYINFO = MYINFO;var MYCASH = API + \"/app/chat/myCash\";\n//零钱明细\nexports.MYCASH = MYCASH;var CASHLIST = API + \"/app/chat/cashList\";\n//零钱明细详情\nexports.CASHLIST = CASHLIST;var MYCASHLIST = API + \"/app/chat/myCashList\";\n//提现\nexports.MYCASHLIST = MYCASHLIST;var APPLYCASHOUT = API + \"/app/chat/applyCashOut\";\n//JSSDK\nexports.APPLYCASHOUT = APPLYCASHOUT;var JSAPI = API + \"/app/chat/jsapiParams\";\n//邀请数据\nexports.JSAPI = JSAPI;var INVITEDATA = API + \"/app/chat/myInviteData\";\n//邀请明细\nexports.INVITEDATA = INVITEDATA;var INVITELIST = API + \"/app/chat/inviteUserList\";\n//是否关注\nexports.INVITELIST = INVITELIST;var SUBSCRIBEINFO = API + \"/app/chat/subscribeInfo\";\n//引导页手机号\nexports.SUBSCRIBEINFO = SUBSCRIBEINFO;var GETNUMINFO = API + \"/app/chat/getNumberInfo\";\n// 上传图片\nexports.GETNUMINFO = GETNUMINFO;var UPLOADFILE = API + \"/app/uploadFile\";\n// 用户反馈\nexports.UPLOADFILE = UPLOADFILE;var FEEDBACK = API + \"/app/chat/feedback\";\n// 用户分享免费\nexports.FEEDBACK = FEEDBACK;var SHARECARD = API + \"/app/order/shareGetWeekCard\";\n\n\n\n\n\n// 卡密激活\nexports.SHARECARD = SHARECARD;var EXCHANGECARD = API + \"/app/order/submitExchangeCard\";\n\n\n\n/**\r\n                                                                                         * 合伙人\r\n                                                                                         */\n// 合伙人信息\nexports.EXCHANGECARD = EXCHANGECARD;var PARTNERINFO = API + \"/app/chat/myPartnerInfo\";\n// 合伙人钱包\nexports.PARTNERINFO = PARTNERINFO;var PARTNERCASH = API + \"/app/chat/myPartnerCash\";\n// 合伙人邀请信息\nexports.PARTNERCASH = PARTNERCASH;var PARTNERINVITEDATA = API + \"/app/chat/myPartnerInviteData\";\n// 合伙人绑定\nexports.PARTNERINVITEDATA = PARTNERINVITEDATA;var PARTNERBIND = API + \"/app/bindPartnerMobile\";\n// 合伙人提现\nexports.PARTNERBIND = PARTNERBIND;var PARTNERCASHOUT = API + \"/app/chat/partnerApplyCashOut\";\n// 合伙人邀请列表\nexports.PARTNERCASHOUT = PARTNERCASHOUT;var PARTNERINVITELIST = API + \"/app/chat/partnerInviteUserList\";\n// 合伙人明细列表\nexports.PARTNERINVITELIST = PARTNERINVITELIST;var PARTNERCASHLIST = API + \"/app/chat/partnerCashList\";\n// 合伙人卡密列表\nexports.PARTNERCASHLIST = PARTNERCASHLIST;var CARDPACK = API + \"/app/chat/cardPack\";\n// 合伙人卡密列表详情\nexports.CARDPACK = CARDPACK;var CARDPACKDETAILS = API + \"/app/chat/cardPackDetails\";\n// 合伙人二维码\nexports.CARDPACKDETAILS = CARDPACKDETAILS;var QRCODE = API + '/app/chat/partnerPoster';\n\n// 接听配置\n\n\n// 转接状态\nexports.QRCODE = QRCODE;var TRANSFERCONFIG = API + \"/user/bysetting/transferConfig\";\n// 音色列表\nexports.TRANSFERCONFIG = TRANSFERCONFIG;var TTSPLAID = API + \"/user/bysetting/ttsPlaid\";\n// 设置音色\nexports.TTSPLAID = TTSPLAID;var TTSUPDATE = API + \"/user/bysetting/ttsUpdate\";\n// 查询当前音色\nexports.TTSUPDATE = TTSUPDATE;var TTSSCENE = API + \"/user/bysetting/ttsScene\";\n// 转化语音\nexports.TTSSCENE = TTSSCENE;var TTSCONVERT = API + \"/user/bysetting/ttsConvert\";\n// 开场白列表\nexports.TTSCONVERT = TTSCONVERT;var PROLOGUELIST = API + \"/user/bysetting/prologueList\";\n// 当前设置开场白\nexports.PROLOGUELIST = PROLOGUELIST;var PROLOGUECURRENT = API + \"/user/bysetting/prologueCurrent\";\n// 设置开场白\nexports.PROLOGUECURRENT = PROLOGUECURRENT;var PROLOGUESET = API + \"/user/bysetting/prologueSet\";\n// 修改开场白详情\nexports.PROLOGUESET = PROLOGUESET;var PROLOGUEGET = API + \"/user/bysetting/prologueGet\";\n// 开场白修改设置\nexports.PROLOGUEGET = PROLOGUEGET;var SETTEXTPROLOGUE = API + \"/user/bysetting/setTextPrologue\";\n// 删除开场白\nexports.SETTEXTPROLOGUE = SETTEXTPROLOGUE;var PROLOGUEDELETE = API + \"/user/bysetting/prologueDelete\";\n// 黑名单列表\nexports.PROLOGUEDELETE = PROLOGUEDELETE;var BLACKLIST = API + \"/user/bysetting/blackList\";\n// 黑名单添加\nexports.BLACKLIST = BLACKLIST;var BLACKADD = API + \"/user/bysetting/blackAdd\";\n// 黑名单删除\nexports.BLACKADD = BLACKADD;var BLACKDELETE = API + \"/user/bysetting/blackDetele\";\n// 拒接黑名单状态\nexports.BLACKDELETE = BLACKDELETE;var REFUSECALL = API + \"/user/bysetting/refuseCall\";\n// 更改拒接黑名单状态\nexports.REFUSECALL = REFUSECALL;var REFUSECALLSET = API + \"/user/bysetting/refuseCallSet\";\n// 场景列表\nexports.REFUSECALLSET = REFUSECALLSET;var SCENESTATUS = API + \"/user/bysetting/sceneStatus\";\n// 场景列表\nexports.SCENESTATUS = SCENESTATUS;var SCENELIST = API + \"/user/bysetting/scenelist\";\n// 场景拒接列表\nexports.SCENELIST = SCENELIST;var SCENEREFUSE = API + \"/user/bysetting/sceneRefuse\";\n// 场景拒接列表更新\nexports.SCENEREFUSE = SCENEREFUSE;var SCENEREFUSEUPDATE = API + \"/user/bysetting/sceneRefuseUpdate\";\n// 添加场景回复\nexports.SCENEREFUSEUPDATE = SCENEREFUSEUPDATE;var SCENEUSERPOST = API + \"/user/bysetting/sceneUserPost\";\n//设置语音开场白\nexports.SCENEUSERPOST = SCENEUSERPOST;var SETVOICEPROLOGUE = API + \"/user/bysetting/setVoicePrologue\";\n//设置回复\nexports.SETVOICEPROLOGUE = SETVOICEPROLOGUE;var SCENCESET = API + \"/user/bysetting/sceneSet\";\n\n\n// 绿色通道\n\n// 任务进度\nexports.SCENCESET = SCENCESET;var TASKINFO = API + \"/app/green/taskInfo\";\n// 绿色通道列表\nexports.TASKINFO = TASKINFO;var GREENCARDLIST = API + \"/app/green/cardList\";\n// 绿色通道列表\nexports.GREENCARDLIST = GREENCARDLIST;var GREENCREATEORDER = API + \"/app/green/createOrder\";\n//推送统计\nexports.GREENCREATEORDER = GREENCREATEORDER;var PUSHCLICK = API + \"/push_stats/click\";exports.PUSHCLICK = PUSHCLICK;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///44\n");

/***/ }),

/***/ 45:
/*!*****************************************************************************************!*\
  !*** E:/colorUI/ai_chat_front/ai_assist_front/node_modules/jweixin-module/lib/index.js ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__) {var __WEBPACK_AMD_DEFINE_RESULT__;function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}!function (e, n) { true ? !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {return n(e);}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : undefined;}(window, function (o, e) {if (!o.jWeixin) {var _w;var n,c = { config: \"preVerifyJSAPI\", onMenuShareTimeline: \"menu:share:timeline\", onMenuShareAppMessage: \"menu:share:appmessage\", onMenuShareQQ: \"menu:share:qq\", onMenuShareWeibo: \"menu:share:weiboApp\", onMenuShareQZone: \"menu:share:QZone\", previewImage: \"imagePreview\", getLocation: \"geoLocation\", openProductSpecificView: \"openProductViewWithPid\", addCard: \"batchAddCard\", openCard: \"batchViewCard\", chooseWXPay: \"getBrandWCPayRequest\", openEnterpriseRedPacket: \"getRecevieBizHongBaoRequest\", startSearchBeacons: \"startMonitoringBeacons\", stopSearchBeacons: \"stopMonitoringBeacons\", onSearchBeacons: \"onBeaconsInRange\", consumeAndShareCard: \"consumedShareCard\", openAddress: \"editAddress\" },a = function () {var e = {};for (var n in c) {e[c[n]] = n;}return e;}(),i = o.document,t = i.title,r = navigator.userAgent.toLowerCase(),s = navigator.platform.toLowerCase(),d = !(!s.match(\"mac\") && !s.match(\"win\")),u = -1 != r.indexOf(\"wxdebugger\"),l = -1 != r.indexOf(\"micromessenger\"),p = -1 != r.indexOf(\"android\"),f = -1 != r.indexOf(\"iphone\") || -1 != r.indexOf(\"ipad\"),m = (n = r.match(/micromessenger\\/(\\d+\\.\\d+\\.\\d+)/) || r.match(/micromessenger\\/(\\d+\\.\\d+)/)) ? n[1] : \"\",g = { initStartTime: L(), initEndTime: 0, preVerifyStartTime: 0, preVerifyEndTime: 0 },h = { version: 1, appId: \"\", initTime: 0, preVerifyTime: 0, networkType: \"\", isPreVerifyOk: 1, systemType: f ? 1 : p ? 2 : -1, clientVersion: m, url: encodeURIComponent(location.href) },v = {},S = { _completes: [] },y = { state: 0, data: {} };O(function () {g.initEndTime = L();});var I = !1,_ = [],w = (_w = { config: function config(e) {B(\"config\", v = e);var t = !1 !== v.check;O(function () {if (t) M(c.config, { verifyJsApiList: C(v.jsApiList), verifyOpenTagList: C(v.openTagList) }, function () {S._complete = function (e) {g.preVerifyEndTime = L(), y.state = 1, y.data = e;}, S.success = function (e) {h.isPreVerifyOk = 0;}, S.fail = function (e) {S._fail ? S._fail(e) : y.state = -1;};var t = S._completes;return t.push(function () {!function () {if (!(d || u || v.debug || m < \"6.0.2\" || h.systemType < 0)) {var i = new Image();h.appId = v.appId, h.initTime = g.initEndTime - g.initStartTime, h.preVerifyTime = g.preVerifyEndTime - g.preVerifyStartTime, w.getNetworkType({ isInnerInvoke: !0, success: function success(e) {h.networkType = e.networkType;var n = \"https://open.weixin.qq.com/sdk/report?v=\" + h.version + \"&o=\" + h.isPreVerifyOk + \"&s=\" + h.systemType + \"&c=\" + h.clientVersion + \"&a=\" + h.appId + \"&n=\" + h.networkType + \"&i=\" + h.initTime + \"&p=\" + h.preVerifyTime + \"&u=\" + h.url;i.src = n;} });}}();}), S.complete = function (e) {for (var n = 0, i = t.length; n < i; ++n) {t[n]();}S._completes = [];}, S;}()), g.preVerifyStartTime = L();else {y.state = 1;for (var e = S._completes, n = 0, i = e.length; n < i; ++n) {e[n]();}S._completes = [];}}), w.invoke || (w.invoke = function (e, n, i) {o.WeixinJSBridge && WeixinJSBridge.invoke(e, x(n), i);}, w.on = function (e, n) {o.WeixinJSBridge && WeixinJSBridge.on(e, n);});}, ready: function ready(e) {0 != y.state ? e() : (S._completes.push(e), !l && v.debug && e());}, error: function error(e) {m < \"6.0.2\" || (-1 == y.state ? e(y.data) : S._fail = e);}, checkJsApi: function checkJsApi(e) {M(\"checkJsApi\", { jsApiList: C(e.jsApiList) }, (e._complete = function (e) {if (p) {var n = e.checkResult;n && (e.checkResult = JSON.parse(n));}e = function (e) {var n = e.checkResult;for (var i in n) {var t = a[i];t && (n[t] = n[i], delete n[i]);}return e;}(e);}, e));}, onMenuShareTimeline: function onMenuShareTimeline(e) {P(c.onMenuShareTimeline, { complete: function complete() {M(\"shareTimeline\", { title: e.title || t, desc: e.title || t, img_url: e.imgUrl || \"\", link: e.link || location.href, type: e.type || \"link\", data_url: e.dataUrl || \"\" }, e);} }, e);}, onMenuShareAppMessage: function onMenuShareAppMessage(n) {P(c.onMenuShareAppMessage, { complete: function complete(e) {\"favorite\" === e.scene ? M(\"sendAppMessage\", { title: n.title || t, desc: n.desc || \"\", link: n.link || location.href, img_url: n.imgUrl || \"\", type: n.type || \"link\", data_url: n.dataUrl || \"\" }) : M(\"sendAppMessage\", { title: n.title || t, desc: n.desc || \"\", link: n.link || location.href, img_url: n.imgUrl || \"\", type: n.type || \"link\", data_url: n.dataUrl || \"\" }, n);} }, n);}, onMenuShareQQ: function onMenuShareQQ(e) {P(c.onMenuShareQQ, { complete: function complete() {M(\"shareQQ\", { title: e.title || t, desc: e.desc || \"\", img_url: e.imgUrl || \"\", link: e.link || location.href }, e);} }, e);}, onMenuShareWeibo: function onMenuShareWeibo(e) {P(c.onMenuShareWeibo, { complete: function complete() {M(\"shareWeiboApp\", { title: e.title || t, desc: e.desc || \"\", img_url: e.imgUrl || \"\", link: e.link || location.href }, e);} }, e);}, onMenuShareQZone: function onMenuShareQZone(e) {P(c.onMenuShareQZone, { complete: function complete() {M(\"shareQZone\", { title: e.title || t, desc: e.desc || \"\", img_url: e.imgUrl || \"\", link: e.link || location.href }, e);} }, e);}, updateTimelineShareData: function updateTimelineShareData(e) {M(\"updateTimelineShareData\", { title: e.title, link: e.link, imgUrl: e.imgUrl }, e);}, updateAppMessageShareData: function updateAppMessageShareData(e) {M(\"updateAppMessageShareData\", { title: e.title, desc: e.desc, link: e.link, imgUrl: e.imgUrl }, e);}, startRecord: function startRecord(e) {M(\"startRecord\", {}, e);}, stopRecord: function stopRecord(e) {M(\"stopRecord\", {}, e);}, onVoiceRecordEnd: function onVoiceRecordEnd(e) {P(\"onVoiceRecordEnd\", e);}, playVoice: function playVoice(e) {M(\"playVoice\", { localId: e.localId }, e);}, pauseVoice: function pauseVoice(e) {M(\"pauseVoice\", { localId: e.localId }, e);}, stopVoice: function stopVoice(e) {M(\"stopVoice\", { localId: e.localId }, e);}, onVoicePlayEnd: function onVoicePlayEnd(e) {P(\"onVoicePlayEnd\", e);}, uploadVoice: function uploadVoice(e) {M(\"uploadVoice\", { localId: e.localId, isShowProgressTips: 0 == e.isShowProgressTips ? 0 : 1 }, e);}, downloadVoice: function downloadVoice(e) {M(\"downloadVoice\", { serverId: e.serverId, isShowProgressTips: 0 == e.isShowProgressTips ? 0 : 1 }, e);}, translateVoice: function translateVoice(e) {M(\"translateVoice\", { localId: e.localId, isShowProgressTips: 0 == e.isShowProgressTips ? 0 : 1 }, e);}, chooseImage: function chooseImage(e) {M(\"chooseImage\", { scene: \"1|2\", count: e.count || 9, sizeType: e.sizeType || [\"original\", \"compressed\"], sourceType: e.sourceType || [\"album\", \"camera\"] }, (e._complete = function (e) {if (p) {var n = e.localIds;try {n && (e.localIds = JSON.parse(n));} catch (e) {}}}, e));}, getLocation: function getLocation(e) {}, previewImage: function previewImage(e) {M(c.previewImage, { current: e.current, urls: e.urls }, e);}, uploadImage: function uploadImage(e) {M(\"uploadImage\", { localId: e.localId, isShowProgressTips: 0 == e.isShowProgressTips ? 0 : 1 }, e);}, downloadImage: function downloadImage(e) {M(\"downloadImage\", { serverId: e.serverId, isShowProgressTips: 0 == e.isShowProgressTips ? 0 : 1 }, e);}, getLocalImgData: function getLocalImgData(e) {!1 === I ? (I = !0, M(\"getLocalImgData\", { localId: e.localId }, (e._complete = function (e) {if (I = !1, 0 < _.length) {var n = _.shift();wx.getLocalImgData(n);}}, e))) : _.push(e);}, getNetworkType: function getNetworkType(e) {M(\"getNetworkType\", {}, (e._complete = function (e) {e = function (e) {var n = e.errMsg;e.errMsg = \"getNetworkType:ok\";var i = e.subtype;if (delete e.subtype, i) e.networkType = i;else {var t = n.indexOf(\":\"),o = n.substring(t + 1);switch (o) {case \"wifi\":case \"edge\":case \"wwan\":e.networkType = o;break;default:e.errMsg = \"getNetworkType:fail\";}}return e;}(e);}, e));}, openLocation: function openLocation(e) {M(\"openLocation\", { latitude: e.latitude, longitude: e.longitude, name: e.name || \"\", address: e.address || \"\", scale: e.scale || 28, infoUrl: e.infoUrl || \"\" }, e);} }, _defineProperty(_w, \"getLocation\", function getLocation(e) {M(c.getLocation, { type: (e = e || {}).type || \"wgs84\" }, (e._complete = function (e) {delete e.type;}, e));}), _defineProperty(_w, \"hideOptionMenu\", function hideOptionMenu(e) {M(\"hideOptionMenu\", {}, e);}), _defineProperty(_w, \"showOptionMenu\", function showOptionMenu(e) {M(\"showOptionMenu\", {}, e);}), _defineProperty(_w, \"closeWindow\", function closeWindow(e) {M(\"closeWindow\", {}, e = e || {});}), _defineProperty(_w, \"hideMenuItems\", function hideMenuItems(e) {M(\"hideMenuItems\", { menuList: e.menuList }, e);}), _defineProperty(_w, \"showMenuItems\", function showMenuItems(e) {M(\"showMenuItems\", { menuList: e.menuList }, e);}), _defineProperty(_w, \"hideAllNonBaseMenuItem\", function hideAllNonBaseMenuItem(e) {M(\"hideAllNonBaseMenuItem\", {}, e);}), _defineProperty(_w, \"showAllNonBaseMenuItem\", function showAllNonBaseMenuItem(e) {M(\"showAllNonBaseMenuItem\", {}, e);}), _defineProperty(_w, \"scanQRCode\", function scanQRCode(e) {M(\"scanQRCode\", { needResult: (e = e || {}).needResult || 0, scanType: e.scanType || [\"qrCode\", \"barCode\"] }, (e._complete = function (e) {if (f) {var n = e.resultStr;if (n) {var i = JSON.parse(n);e.resultStr = i && i.scan_code && i.scan_code.scan_result;}}}, e));}), _defineProperty(_w, \"openAddress\", function openAddress(e) {M(c.openAddress, {}, (e._complete = function (e) {e = function (e) {return e.postalCode = e.addressPostalCode, delete e.addressPostalCode, e.provinceName = e.proviceFirstStageName, delete e.proviceFirstStageName, e.cityName = e.addressCitySecondStageName, delete e.addressCitySecondStageName, e.countryName = e.addressCountiesThirdStageName, delete e.addressCountiesThirdStageName, e.detailInfo = e.addressDetailInfo, delete e.addressDetailInfo, e;}(e);}, e));}), _defineProperty(_w, \"openProductSpecificView\", function openProductSpecificView(e) {M(c.openProductSpecificView, { pid: e.productId, view_type: e.viewType || 0, ext_info: e.extInfo }, e);}), _defineProperty(_w, \"addCard\", function addCard(e) {for (var n = e.cardList, i = [], t = 0, o = n.length; t < o; ++t) {var r = n[t],a = { card_id: r.cardId, card_ext: r.cardExt };i.push(a);}M(c.addCard, { card_list: i }, (e._complete = function (e) {var n = e.card_list;if (n) {for (var i = 0, t = (n = JSON.parse(n)).length; i < t; ++i) {var o = n[i];o.cardId = o.card_id, o.cardExt = o.card_ext, o.isSuccess = !!o.is_succ, delete o.card_id, delete o.card_ext, delete o.is_succ;}e.cardList = n, delete e.card_list;}}, e));}), _defineProperty(_w, \"chooseCard\", function chooseCard(e) {M(\"chooseCard\", { app_id: v.appId, location_id: e.shopId || \"\", sign_type: e.signType || \"SHA1\", card_id: e.cardId || \"\", card_type: e.cardType || \"\", card_sign: e.cardSign, time_stamp: e.timestamp + \"\", nonce_str: e.nonceStr }, (e._complete = function (e) {e.cardList = e.choose_card_info, delete e.choose_card_info;}, e));}), _defineProperty(_w, \"openCard\", function openCard(e) {for (var n = e.cardList, i = [], t = 0, o = n.length; t < o; ++t) {var r = n[t],a = { card_id: r.cardId, code: r.code };i.push(a);}M(c.openCard, { card_list: i }, e);}), _defineProperty(_w, \"consumeAndShareCard\", function consumeAndShareCard(e) {M(c.consumeAndShareCard, { consumedCardId: e.cardId, consumedCode: e.code }, e);}), _defineProperty(_w, \"chooseWXPay\", function chooseWXPay(e) {M(c.chooseWXPay, V(e), e);}), _defineProperty(_w, \"openEnterpriseRedPacket\", function openEnterpriseRedPacket(e) {M(c.openEnterpriseRedPacket, V(e), e);}), _defineProperty(_w, \"startSearchBeacons\", function startSearchBeacons(e) {M(c.startSearchBeacons, { ticket: e.ticket }, e);}), _defineProperty(_w, \"stopSearchBeacons\", function stopSearchBeacons(e) {M(c.stopSearchBeacons, {}, e);}), _defineProperty(_w, \"onSearchBeacons\", function onSearchBeacons(e) {P(c.onSearchBeacons, e);}), _defineProperty(_w, \"openEnterpriseChat\", function openEnterpriseChat(e) {M(\"openEnterpriseChat\", { useridlist: e.userIds, chatname: e.groupName }, e);}), _defineProperty(_w, \"launchMiniProgram\", function launchMiniProgram(e) {M(\"launchMiniProgram\", { targetAppId: e.targetAppId, path: function (e) {if (\"string\" == typeof e && 0 < e.length) {var n = e.split(\"?\")[0],i = e.split(\"?\")[1];return n += \".html\", void 0 !== i ? n + \"?\" + i : n;}}(e.path), envVersion: e.envVersion }, e);}), _defineProperty(_w, \"openBusinessView\", function openBusinessView(e) {M(\"openBusinessView\", { businessType: e.businessType, queryString: e.queryString || \"\", envVersion: e.envVersion }, (e._complete = function (n) {if (p) {var e = n.extraData;if (e) try {n.extraData = JSON.parse(e);} catch (e) {n.extraData = {};}}}, e));}), _defineProperty(_w, \"miniProgram\", { navigateBack: function navigateBack(e) {e = e || {}, O(function () {M(\"invokeMiniProgramAPI\", { name: \"navigateBack\", arg: { delta: e.delta || 1 } }, e);});}, navigateTo: function navigateTo(e) {O(function () {M(\"invokeMiniProgramAPI\", { name: \"navigateTo\", arg: { url: e.url } }, e);});}, redirectTo: function redirectTo(e) {O(function () {M(\"invokeMiniProgramAPI\", { name: \"redirectTo\", arg: { url: e.url } }, e);});}, switchTab: function switchTab(e) {O(function () {M(\"invokeMiniProgramAPI\", { name: \"switchTab\", arg: { url: e.url } }, e);});}, reLaunch: function reLaunch(e) {O(function () {M(\"invokeMiniProgramAPI\", { name: \"reLaunch\", arg: { url: e.url } }, e);});}, postMessage: function postMessage(e) {O(function () {M(\"invokeMiniProgramAPI\", { name: \"postMessage\", arg: e.data || {} }, e);});}, getEnv: function getEnv(e) {O(function () {e({ miniprogram: \"miniprogram\" === o.__wxjs_environment });});} }), _w),T = 1,k = {};return i.addEventListener(\"error\", function (e) {if (!p) {var n = e.target,i = n.tagName,t = n.src;if (\"IMG\" == i || \"VIDEO\" == i || \"AUDIO\" == i || \"SOURCE\" == i) if (-1 != t.indexOf(\"wxlocalresource://\")) {e.preventDefault(), e.stopPropagation();var o = n[\"wx-id\"];if (o || (o = T++, n[\"wx-id\"] = o), k[o]) return;k[o] = !0, wx.ready(function () {wx.getLocalImgData({ localId: t, success: function success(e) {n.src = e.localData;} });});}}}, !0), i.addEventListener(\"load\", function (e) {if (!p) {var n = e.target,i = n.tagName;n.src;if (\"IMG\" == i || \"VIDEO\" == i || \"AUDIO\" == i || \"SOURCE\" == i) {var t = n[\"wx-id\"];t && (k[t] = !1);}}}, !0), e && (o.wx = o.jWeixin = w), w;}function M(n, e, i) {o.WeixinJSBridge ? WeixinJSBridge.invoke(n, x(e), function (e) {A(n, e, i);}) : B(n, i);}function P(n, i, t) {o.WeixinJSBridge ? WeixinJSBridge.on(n, function (e) {t && t.trigger && t.trigger(e), A(n, e, i);}) : B(n, t || i);}function x(e) {return (e = e || {}).appId = v.appId, e.verifyAppId = v.appId, e.verifySignType = \"sha1\", e.verifyTimestamp = v.timestamp + \"\", e.verifyNonceStr = v.nonceStr, e.verifySignature = v.signature, e;}function V(e) {return { timeStamp: e.timestamp + \"\", nonceStr: e.nonceStr, package: e.package, paySign: e.paySign, signType: e.signType || \"SHA1\" };}function A(e, n, i) {\"openEnterpriseChat\" != e && \"openBusinessView\" !== e || (n.errCode = n.err_code), delete n.err_code, delete n.err_desc, delete n.err_detail;var t = n.errMsg;t || (t = n.err_msg, delete n.err_msg, t = function (e, n) {var i = e,t = a[i];t && (i = t);var o = \"ok\";if (n) {var r = n.indexOf(\":\");\"confirm\" == (o = n.substring(r + 1)) && (o = \"ok\"), \"failed\" == o && (o = \"fail\"), -1 != o.indexOf(\"failed_\") && (o = o.substring(7)), -1 != o.indexOf(\"fail_\") && (o = o.substring(5)), \"access denied\" != (o = (o = o.replace(/_/g, \" \")).toLowerCase()) && \"no permission to execute\" != o || (o = \"permission denied\"), \"config\" == i && \"function not exist\" == o && (o = \"ok\"), \"\" == o && (o = \"fail\");}return n = i + \":\" + o;}(e, t), n.errMsg = t), (i = i || {})._complete && (i._complete(n), delete i._complete), t = n.errMsg || \"\", v.debug && !i.isInnerInvoke && alert(JSON.stringify(n));var o = t.indexOf(\":\");switch (t.substring(o + 1)) {case \"ok\":i.success && i.success(n);break;case \"cancel\":i.cancel && i.cancel(n);break;default:i.fail && i.fail(n);}i.complete && i.complete(n);}function C(e) {if (e) {for (var n = 0, i = e.length; n < i; ++n) {var t = e[n],o = c[t];o && (e[n] = o);}return e;}}function B(e, n) {if (!(!v.debug || n && n.isInnerInvoke)) {var i = a[e];i && (e = i), n && n._complete && delete n._complete, __f__(\"log\", '\"' + e + '\",', n || \"\", \" at node_modules\\\\jweixin-module\\\\lib\\\\index.js:1\");}}function L() {return new Date().getTime();}function O(e) {l && (o.WeixinJSBridge ? e() : i.addEventListener && i.addEventListener(\"WeixinJSBridgeReady\", e, !1));}});\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 12)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///45\n");

/***/ }),

/***/ 5:
/*!*******************************************************!*\
  !*** ./node_modules/@dcloudio/uni-stat/dist/index.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(uni) {var _package = __webpack_require__(/*! ../package.json */ 6);function _possibleConstructorReturn(self, call) {if (call && (typeof call === \"object\" || typeof call === \"function\")) {return call;}return _assertThisInitialized(self);}function _assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return self;}function _getPrototypeOf(o) {_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return _getPrototypeOf(o);}function _inherits(subClass, superClass) {if (typeof superClass !== \"function\" && superClass !== null) {throw new TypeError(\"Super expression must either be null or a function\");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });if (superClass) _setPrototypeOf(subClass, superClass);}function _setPrototypeOf(o, p) {_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return _setPrototypeOf(o, p);}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}\n\nvar STAT_VERSION = _package.version;\nvar STAT_URL = 'https://tongji.dcloud.io/uni/stat';\nvar STAT_H5_URL = 'https://tongji.dcloud.io/uni/stat.gif';\nvar PAGE_PVER_TIME = 1800;\nvar APP_PVER_TIME = 300;\nvar OPERATING_TIME = 10;\n\nvar UUID_KEY = '__DC_STAT_UUID';\nvar UUID_VALUE = '__DC_UUID_VALUE';\n\nfunction getUuid() {\n  var uuid = '';\n  if (getPlatformName() === 'n') {\n    try {\n      uuid = plus.runtime.getDCloudId();\n    } catch (e) {\n      uuid = '';\n    }\n    return uuid;\n  }\n\n  try {\n    uuid = uni.getStorageSync(UUID_KEY);\n  } catch (e) {\n    uuid = UUID_VALUE;\n  }\n\n  if (!uuid) {\n    uuid = Date.now() + '' + Math.floor(Math.random() * 1e7);\n    try {\n      uni.setStorageSync(UUID_KEY, uuid);\n    } catch (e) {\n      uni.setStorageSync(UUID_KEY, UUID_VALUE);\n    }\n  }\n  return uuid;\n}\n\nvar getSgin = function getSgin(statData) {\n  var arr = Object.keys(statData);\n  var sortArr = arr.sort();\n  var sgin = {};\n  var sginStr = '';\n  for (var i in sortArr) {\n    sgin[sortArr[i]] = statData[sortArr[i]];\n    sginStr += sortArr[i] + '=' + statData[sortArr[i]] + '&';\n  }\n  // const options = sginStr.substr(0, sginStr.length - 1)\n  // sginStr = sginStr.substr(0, sginStr.length - 1) + '&key=' + STAT_KEY;\n  // const si = crypto.createHash('md5').update(sginStr).digest('hex');\n  return {\n    sign: '',\n    options: sginStr.substr(0, sginStr.length - 1) };\n\n};\n\nvar getSplicing = function getSplicing(data) {\n  var str = '';\n  for (var i in data) {\n    str += i + '=' + data[i] + '&';\n  }\n  return str.substr(0, str.length - 1);\n};\n\nvar getTime = function getTime() {\n  return parseInt(new Date().getTime() / 1000);\n};\n\nvar getPlatformName = function getPlatformName() {\n  var platformList = {\n    'app-plus': 'n',\n    'h5': 'h5',\n    'mp-weixin': 'wx',\n    'mp-alipay': 'ali',\n    'mp-baidu': 'bd',\n    'mp-toutiao': 'tt',\n    'mp-qq': 'qq' };\n\n  return platformList[\"app-plus\"];\n};\n\nvar getPackName = function getPackName() {\n  var packName = '';\n  if (getPlatformName() === 'wx' || getPlatformName() === 'qq') {\n    // 兼容微信小程序低版本基础库\n    if (uni.canIUse('getAccountInfoSync')) {\n      packName = uni.getAccountInfoSync().miniProgram.appId || '';\n    }\n  }\n  return packName;\n};\n\nvar getVersion = function getVersion() {\n  return getPlatformName() === 'n' ? plus.runtime.version : '';\n};\n\nvar getChannel = function getChannel() {\n  var platformName = getPlatformName();\n  var channel = '';\n  if (platformName === 'n') {\n    channel = plus.runtime.channel;\n  }\n  return channel;\n};\n\nvar getScene = function getScene(options) {\n  var platformName = getPlatformName();\n  var scene = '';\n  if (options) {\n    return options;\n  }\n  if (platformName === 'wx') {\n    scene = uni.getLaunchOptionsSync().scene;\n  }\n  return scene;\n};\nvar First__Visit__Time__KEY = 'First__Visit__Time';\nvar Last__Visit__Time__KEY = 'Last__Visit__Time';\n\nvar getFirstVisitTime = function getFirstVisitTime() {\n  var timeStorge = uni.getStorageSync(First__Visit__Time__KEY);\n  var time = 0;\n  if (timeStorge) {\n    time = timeStorge;\n  } else {\n    time = getTime();\n    uni.setStorageSync(First__Visit__Time__KEY, time);\n    uni.removeStorageSync(Last__Visit__Time__KEY);\n  }\n  return time;\n};\n\nvar getLastVisitTime = function getLastVisitTime() {\n  var timeStorge = uni.getStorageSync(Last__Visit__Time__KEY);\n  var time = 0;\n  if (timeStorge) {\n    time = timeStorge;\n  } else {\n    time = '';\n  }\n  uni.setStorageSync(Last__Visit__Time__KEY, getTime());\n  return time;\n};\n\n\nvar PAGE_RESIDENCE_TIME = '__page__residence__time';\nvar First_Page_residence_time = 0;\nvar Last_Page_residence_time = 0;\n\n\nvar setPageResidenceTime = function setPageResidenceTime() {\n  First_Page_residence_time = getTime();\n  if (getPlatformName() === 'n') {\n    uni.setStorageSync(PAGE_RESIDENCE_TIME, getTime());\n  }\n  return First_Page_residence_time;\n};\n\nvar getPageResidenceTime = function getPageResidenceTime() {\n  Last_Page_residence_time = getTime();\n  if (getPlatformName() === 'n') {\n    First_Page_residence_time = uni.getStorageSync(PAGE_RESIDENCE_TIME);\n  }\n  return Last_Page_residence_time - First_Page_residence_time;\n};\nvar TOTAL__VISIT__COUNT = 'Total__Visit__Count';\nvar getTotalVisitCount = function getTotalVisitCount() {\n  var timeStorge = uni.getStorageSync(TOTAL__VISIT__COUNT);\n  var count = 1;\n  if (timeStorge) {\n    count = timeStorge;\n    count++;\n  }\n  uni.setStorageSync(TOTAL__VISIT__COUNT, count);\n  return count;\n};\n\nvar GetEncodeURIComponentOptions = function GetEncodeURIComponentOptions(statData) {\n  var data = {};\n  for (var prop in statData) {\n    data[prop] = encodeURIComponent(statData[prop]);\n  }\n  return data;\n};\n\nvar Set__First__Time = 0;\nvar Set__Last__Time = 0;\n\nvar getFirstTime = function getFirstTime() {\n  var time = new Date().getTime();\n  Set__First__Time = time;\n  Set__Last__Time = 0;\n  return time;\n};\n\n\nvar getLastTime = function getLastTime() {\n  var time = new Date().getTime();\n  Set__Last__Time = time;\n  return time;\n};\n\n\nvar getResidenceTime = function getResidenceTime(type) {\n  var residenceTime = 0;\n  if (Set__First__Time !== 0) {\n    residenceTime = Set__Last__Time - Set__First__Time;\n  }\n\n  residenceTime = parseInt(residenceTime / 1000);\n  residenceTime = residenceTime < 1 ? 1 : residenceTime;\n  if (type === 'app') {\n    var overtime = residenceTime > APP_PVER_TIME ? true : false;\n    return {\n      residenceTime: residenceTime,\n      overtime: overtime };\n\n  }\n  if (type === 'page') {\n    var _overtime = residenceTime > PAGE_PVER_TIME ? true : false;\n    return {\n      residenceTime: residenceTime,\n      overtime: _overtime };\n\n  }\n\n  return {\n    residenceTime: residenceTime };\n\n\n};\n\nvar getRoute = function getRoute() {\n  var pages = getCurrentPages();\n  var page = pages[pages.length - 1];\n  var _self = page.$vm;\n\n  if (getPlatformName() === 'bd') {\n    return _self.$mp && _self.$mp.page.is;\n  } else {\n    return _self.$scope && _self.$scope.route || _self.$mp && _self.$mp.page.route;\n  }\n};\n\nvar getPageRoute = function getPageRoute(self) {\n  var pages = getCurrentPages();\n  var page = pages[pages.length - 1];\n  var _self = page.$vm;\n  var query = self._query;\n  var str = query && JSON.stringify(query) !== '{}' ? '?' + JSON.stringify(query) : '';\n  // clear\n  self._query = '';\n  if (getPlatformName() === 'bd') {\n    return _self.$mp && _self.$mp.page.is + str;\n  } else {\n    return _self.$scope && _self.$scope.route + str || _self.$mp && _self.$mp.page.route + str;\n  }\n};\n\nvar getPageTypes = function getPageTypes(self) {\n  if (self.mpType === 'page' || self.$mp && self.$mp.mpType === 'page' || self.$options.mpType === 'page') {\n    return true;\n  }\n  return false;\n};\n\nvar calibration = function calibration(eventName, options) {\n  //  login 、 share 、pay_success 、pay_fail 、register 、title\n  if (!eventName) {\n    console.error(\"uni.report \\u7F3A\\u5C11 [eventName] \\u53C2\\u6570\");\n    return true;\n  }\n  if (typeof eventName !== 'string') {\n    console.error(\"uni.report [eventName] \\u53C2\\u6570\\u7C7B\\u578B\\u9519\\u8BEF,\\u53EA\\u80FD\\u4E3A String \\u7C7B\\u578B\");\n    return true;\n  }\n  if (eventName.length > 255) {\n    console.error(\"uni.report [eventName] \\u53C2\\u6570\\u957F\\u5EA6\\u4E0D\\u80FD\\u5927\\u4E8E 255\");\n    return true;\n  }\n\n  if (typeof options !== 'string' && typeof options !== 'object') {\n    console.error(\"uni.report [options] \\u53C2\\u6570\\u7C7B\\u578B\\u9519\\u8BEF,\\u53EA\\u80FD\\u4E3A String \\u6216 Object \\u7C7B\\u578B\");\n    return true;\n  }\n\n  if (typeof options === 'string' && options.length > 255) {\n    console.error(\"uni.report [options] \\u53C2\\u6570\\u957F\\u5EA6\\u4E0D\\u80FD\\u5927\\u4E8E 255\");\n    return true;\n  }\n\n  if (eventName === 'title' && typeof options !== 'string') {\n    console.error('uni.report [eventName] 参数为 title 时，[options] 参数只能为 String 类型');\n    return true;\n  }\n};\n\nvar PagesJson = __webpack_require__(/*! uni-pages?{\"type\":\"style\"} */ 7).default;\nvar statConfig = __webpack_require__(/*! uni-stat-config */ 8).default || __webpack_require__(/*! uni-stat-config */ 8);\n\nvar resultOptions = uni.getSystemInfoSync();var\n\nUtil = /*#__PURE__*/function () {\n  function Util() {_classCallCheck(this, Util);\n    this.self = '';\n    this._retry = 0;\n    this._platform = '';\n    this._query = {};\n    this._navigationBarTitle = {\n      config: '',\n      page: '',\n      report: '',\n      lt: '' };\n\n    this._operatingTime = 0;\n    this._reportingRequestData = {\n      '1': [],\n      '11': [] };\n\n    this.__prevent_triggering = false;\n\n    this.__licationHide = false;\n    this.__licationShow = false;\n    this._lastPageRoute = '';\n    this.statData = {\n      uuid: getUuid(),\n      ut: getPlatformName(),\n      mpn: getPackName(),\n      ak: statConfig.appid,\n      usv: STAT_VERSION,\n      v: getVersion(),\n      ch: getChannel(),\n      cn: '',\n      pn: '',\n      ct: '',\n      t: getTime(),\n      tt: '',\n      p: resultOptions.platform === 'android' ? 'a' : 'i',\n      brand: resultOptions.brand || '',\n      md: resultOptions.model,\n      sv: resultOptions.system.replace(/(Android|iOS)\\s/, ''),\n      mpsdk: resultOptions.SDKVersion || '',\n      mpv: resultOptions.version || '',\n      lang: resultOptions.language,\n      pr: resultOptions.pixelRatio,\n      ww: resultOptions.windowWidth,\n      wh: resultOptions.windowHeight,\n      sw: resultOptions.screenWidth,\n      sh: resultOptions.screenHeight };\n\n\n  }_createClass(Util, [{ key: \"_applicationShow\", value: function _applicationShow()\n\n    {\n      if (this.__licationHide) {\n        getLastTime();\n        var time = getResidenceTime('app');\n        if (time.overtime) {\n          var options = {\n            path: this._lastPageRoute,\n            scene: this.statData.sc };\n\n          this._sendReportRequest(options);\n        }\n        this.__licationHide = false;\n      }\n    } }, { key: \"_applicationHide\", value: function _applicationHide(\n\n    self, type) {\n\n      this.__licationHide = true;\n      getLastTime();\n      var time = getResidenceTime();\n      getFirstTime();\n      var route = getPageRoute(this);\n      this._sendHideRequest({\n        urlref: route,\n        urlref_ts: time.residenceTime },\n      type);\n    } }, { key: \"_pageShow\", value: function _pageShow()\n\n    {\n      var route = getPageRoute(this);\n      var routepath = getRoute();\n      this._navigationBarTitle.config = PagesJson &&\n      PagesJson.pages[routepath] &&\n      PagesJson.pages[routepath].titleNView &&\n      PagesJson.pages[routepath].titleNView.titleText ||\n      PagesJson &&\n      PagesJson.pages[routepath] &&\n      PagesJson.pages[routepath].navigationBarTitleText || '';\n\n      if (this.__licationShow) {\n        getFirstTime();\n        this.__licationShow = false;\n        // console.log('这是 onLauch 之后执行的第一次 pageShow ，为下次记录时间做准备');\n        this._lastPageRoute = route;\n        return;\n      }\n\n      getLastTime();\n      this._lastPageRoute = route;\n      var time = getResidenceTime('page');\n      if (time.overtime) {\n        var options = {\n          path: this._lastPageRoute,\n          scene: this.statData.sc };\n\n        this._sendReportRequest(options);\n      }\n      getFirstTime();\n    } }, { key: \"_pageHide\", value: function _pageHide()\n\n    {\n      if (!this.__licationHide) {\n        getLastTime();\n        var time = getResidenceTime('page');\n        this._sendPageRequest({\n          url: this._lastPageRoute,\n          urlref: this._lastPageRoute,\n          urlref_ts: time.residenceTime });\n\n        this._navigationBarTitle = {\n          config: '',\n          page: '',\n          report: '',\n          lt: '' };\n\n        return;\n      }\n    } }, { key: \"_login\", value: function _login()\n\n    {\n      this._sendEventRequest({\n        key: 'login' },\n      0);\n    } }, { key: \"_share\", value: function _share()\n\n    {\n      this._sendEventRequest({\n        key: 'share' },\n      0);\n    } }, { key: \"_payment\", value: function _payment(\n    key) {\n      this._sendEventRequest({\n        key: key },\n      0);\n    } }, { key: \"_sendReportRequest\", value: function _sendReportRequest(\n    options) {\n\n      this._navigationBarTitle.lt = '1';\n      var query = options.query && JSON.stringify(options.query) !== '{}' ? '?' + JSON.stringify(options.query) : '';\n      this.statData.lt = '1';\n      this.statData.url = options.path + query || '';\n      this.statData.t = getTime();\n      this.statData.sc = getScene(options.scene);\n      this.statData.fvts = getFirstVisitTime();\n      this.statData.lvts = getLastVisitTime();\n      this.statData.tvc = getTotalVisitCount();\n      if (getPlatformName() === 'n') {\n        this.getProperty();\n      } else {\n        this.getNetworkInfo();\n      }\n    } }, { key: \"_sendPageRequest\", value: function _sendPageRequest(\n\n    opt) {var\n\n      url =\n\n\n      opt.url,urlref = opt.urlref,urlref_ts = opt.urlref_ts;\n      this._navigationBarTitle.lt = '11';\n      var options = {\n        ak: this.statData.ak,\n        uuid: this.statData.uuid,\n        lt: '11',\n        ut: this.statData.ut,\n        url: url,\n        tt: this.statData.tt,\n        urlref: urlref,\n        urlref_ts: urlref_ts,\n        ch: this.statData.ch,\n        usv: this.statData.usv,\n        t: getTime(),\n        p: this.statData.p };\n\n      this.request(options);\n    } }, { key: \"_sendHideRequest\", value: function _sendHideRequest(\n\n    opt, type) {var\n\n      urlref =\n\n      opt.urlref,urlref_ts = opt.urlref_ts;\n      var options = {\n        ak: this.statData.ak,\n        uuid: this.statData.uuid,\n        lt: '3',\n        ut: this.statData.ut,\n        urlref: urlref,\n        urlref_ts: urlref_ts,\n        ch: this.statData.ch,\n        usv: this.statData.usv,\n        t: getTime(),\n        p: this.statData.p };\n\n      this.request(options, type);\n    } }, { key: \"_sendEventRequest\", value: function _sendEventRequest()\n\n\n\n    {var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},_ref$key = _ref.key,key = _ref$key === void 0 ? '' : _ref$key,_ref$value = _ref.value,value = _ref$value === void 0 ? \"\" : _ref$value;\n      var route = this._lastPageRoute;\n      var options = {\n        ak: this.statData.ak,\n        uuid: this.statData.uuid,\n        lt: '21',\n        ut: this.statData.ut,\n        url: route,\n        ch: this.statData.ch,\n        e_n: key,\n        e_v: typeof value === 'object' ? JSON.stringify(value) : value.toString(),\n        usv: this.statData.usv,\n        t: getTime(),\n        p: this.statData.p };\n\n      this.request(options);\n    } }, { key: \"getNetworkInfo\", value: function getNetworkInfo()\n\n    {var _this = this;\n      uni.getNetworkType({\n        success: function success(result) {\n          _this.statData.net = result.networkType;\n          _this.getLocation();\n        } });\n\n    } }, { key: \"getProperty\", value: function getProperty()\n\n    {var _this2 = this;\n      plus.runtime.getProperty(plus.runtime.appid, function (wgtinfo) {\n        _this2.statData.v = wgtinfo.version || '';\n        _this2.getNetworkInfo();\n      });\n    } }, { key: \"getLocation\", value: function getLocation()\n\n    {var _this3 = this;\n      if (statConfig.getLocation) {\n        uni.getLocation({\n          type: 'wgs84',\n          geocode: true,\n          success: function success(result) {\n            if (result.address) {\n              _this3.statData.cn = result.address.country;\n              _this3.statData.pn = result.address.province;\n              _this3.statData.ct = result.address.city;\n            }\n\n            _this3.statData.lat = result.latitude;\n            _this3.statData.lng = result.longitude;\n            _this3.request(_this3.statData);\n          } });\n\n      } else {\n        this.statData.lat = 0;\n        this.statData.lng = 0;\n        this.request(this.statData);\n      }\n    } }, { key: \"request\", value: function request(\n\n    data, type) {var _this4 = this;\n      var time = getTime();\n      var title = this._navigationBarTitle;\n      data.ttn = title.page;\n      data.ttpj = title.config;\n      data.ttc = title.report;\n\n      var requestData = this._reportingRequestData;\n      if (getPlatformName() === 'n') {\n        requestData = uni.getStorageSync('__UNI__STAT__DATA') || {};\n      }\n      if (!requestData[data.lt]) {\n        requestData[data.lt] = [];\n      }\n      requestData[data.lt].push(data);\n\n      if (getPlatformName() === 'n') {\n        uni.setStorageSync('__UNI__STAT__DATA', requestData);\n      }\n      if (getPageResidenceTime() < OPERATING_TIME && !type) {\n        return;\n      }\n      var uniStatData = this._reportingRequestData;\n      if (getPlatformName() === 'n') {\n        uniStatData = uni.getStorageSync('__UNI__STAT__DATA');\n      }\n      // 时间超过，重新获取时间戳\n      setPageResidenceTime();\n      var firstArr = [];\n      var contentArr = [];\n      var lastArr = [];var _loop = function _loop(\n\n      i) {\n        var rd = uniStatData[i];\n        rd.forEach(function (elm) {\n          var newData = getSplicing(elm);\n          if (i === 0) {\n            firstArr.push(newData);\n          } else if (i === 3) {\n            lastArr.push(newData);\n          } else {\n            contentArr.push(newData);\n          }\n        });};for (var i in uniStatData) {_loop(i);\n      }\n\n      firstArr.push.apply(firstArr, contentArr.concat(lastArr));\n      var optionsData = {\n        usv: STAT_VERSION, //统计 SDK 版本号\n        t: time, //发送请求时的时间戮\n        requests: JSON.stringify(firstArr) };\n\n\n      this._reportingRequestData = {};\n      if (getPlatformName() === 'n') {\n        uni.removeStorageSync('__UNI__STAT__DATA');\n      }\n\n      if (data.ut === 'h5') {\n        this.imageRequest(optionsData);\n        return;\n      }\n\n      if (getPlatformName() === 'n' && this.statData.p === 'a') {\n        setTimeout(function () {\n          _this4._sendRequest(optionsData);\n        }, 200);\n        return;\n      }\n      this._sendRequest(optionsData);\n    } }, { key: \"_sendRequest\", value: function _sendRequest(\n    optionsData) {var _this5 = this;\n      uni.request({\n        url: STAT_URL,\n        method: 'POST',\n        // header: {\n        //   'content-type': 'application/json' // 默认值\n        // },\n        data: optionsData,\n        success: function success() {\n          // if (process.env.NODE_ENV === 'development') {\n          //   console.log('stat request success');\n          // }\n        },\n        fail: function fail(e) {\n          if (++_this5._retry < 3) {\n            setTimeout(function () {\n              _this5._sendRequest(optionsData);\n            }, 1000);\n          }\n        } });\n\n    }\n    /**\r\n       * h5 请求\r\n       */ }, { key: \"imageRequest\", value: function imageRequest(\n    data) {\n      var image = new Image();\n      var options = getSgin(GetEncodeURIComponentOptions(data)).options;\n      image.src = STAT_H5_URL + '?' + options;\n    } }, { key: \"sendEvent\", value: function sendEvent(\n\n    key, value) {\n      // 校验 type 参数\n      if (calibration(key, value)) return;\n\n      if (key === 'title') {\n        this._navigationBarTitle.report = value;\n        return;\n      }\n      this._sendEventRequest({\n        key: key,\n        value: typeof value === 'object' ? JSON.stringify(value) : value },\n      1);\n    } }]);return Util;}();var\n\n\n\nStat = /*#__PURE__*/function (_Util) {_inherits(Stat, _Util);_createClass(Stat, null, [{ key: \"getInstance\", value: function getInstance()\n    {\n      if (!this.instance) {\n        this.instance = new Stat();\n      }\n      return this.instance;\n    } }]);\n  function Stat() {var _this6;_classCallCheck(this, Stat);\n    _this6 = _possibleConstructorReturn(this, _getPrototypeOf(Stat).call(this));\n    _this6.instance = null;\n    // 注册拦截器\n    if (typeof uni.addInterceptor === 'function' && \"development\" !== 'development') {\n      _this6.addInterceptorInit();\n      _this6.interceptLogin();\n      _this6.interceptShare(true);\n      _this6.interceptRequestPayment();\n    }return _this6;\n  }_createClass(Stat, [{ key: \"addInterceptorInit\", value: function addInterceptorInit()\n\n    {\n      var self = this;\n      uni.addInterceptor('setNavigationBarTitle', {\n        invoke: function invoke(args) {\n          self._navigationBarTitle.page = args.title;\n        } });\n\n    } }, { key: \"interceptLogin\", value: function interceptLogin()\n\n    {\n      var self = this;\n      uni.addInterceptor('login', {\n        complete: function complete() {\n          self._login();\n        } });\n\n    } }, { key: \"interceptShare\", value: function interceptShare(\n\n    type) {\n      var self = this;\n      if (!type) {\n        self._share();\n        return;\n      }\n      uni.addInterceptor('share', {\n        success: function success() {\n          self._share();\n        },\n        fail: function fail() {\n          self._share();\n        } });\n\n    } }, { key: \"interceptRequestPayment\", value: function interceptRequestPayment()\n\n    {\n      var self = this;\n      uni.addInterceptor('requestPayment', {\n        success: function success() {\n          self._payment('pay_success');\n        },\n        fail: function fail() {\n          self._payment('pay_fail');\n        } });\n\n    } }, { key: \"report\", value: function report(\n\n    options, self) {\n      this.self = self;\n      // if (process.env.NODE_ENV === 'development') {\n      //   console.log('report init');\n      // }\n      setPageResidenceTime();\n      this.__licationShow = true;\n      this._sendReportRequest(options, true);\n    } }, { key: \"load\", value: function load(\n\n    options, self) {\n      if (!self.$scope && !self.$mp) {\n        var page = getCurrentPages();\n        self.$scope = page[page.length - 1];\n      }\n      this.self = self;\n      this._query = options;\n    } }, { key: \"show\", value: function show(\n\n    self) {\n      this.self = self;\n      if (getPageTypes(self)) {\n        this._pageShow(self);\n      } else {\n        this._applicationShow(self);\n      }\n    } }, { key: \"ready\", value: function ready(\n\n    self) {\n      // this.self = self;\n      // if (getPageTypes(self)) {\n      //   this._pageShow(self);\n      // }\n    } }, { key: \"hide\", value: function hide(\n    self) {\n      this.self = self;\n      if (getPageTypes(self)) {\n        this._pageHide(self);\n      } else {\n        this._applicationHide(self, true);\n      }\n    } }, { key: \"error\", value: function error(\n    em) {\n      if (this._platform === 'devtools') {\n        if (true) {\n          console.info('当前运行环境为开发者工具，不上报数据。');\n        }\n        // return;\n      }\n      var emVal = '';\n      if (!em.message) {\n        emVal = JSON.stringify(em);\n      } else {\n        emVal = em.stack;\n      }\n      var options = {\n        ak: this.statData.ak,\n        uuid: this.statData.uuid,\n        lt: '31',\n        ut: this.statData.ut,\n        ch: this.statData.ch,\n        mpsdk: this.statData.mpsdk,\n        mpv: this.statData.mpv,\n        v: this.statData.v,\n        em: emVal,\n        usv: this.statData.usv,\n        t: getTime(),\n        p: this.statData.p };\n\n      this.request(options);\n    } }]);return Stat;}(Util);\n\n\nvar stat = Stat.getInstance();\nvar isHide = false;\nvar lifecycle = {\n  onLaunch: function onLaunch(options) {\n    stat.report(options, this);\n  },\n  onReady: function onReady() {\n    stat.ready(this);\n  },\n  onLoad: function onLoad(options) {\n    stat.load(options, this);\n    // 重写分享，获取分享上报事件\n    if (this.$scope && this.$scope.onShareAppMessage) {\n      var oldShareAppMessage = this.$scope.onShareAppMessage;\n      this.$scope.onShareAppMessage = function (options) {\n        stat.interceptShare(false);\n        return oldShareAppMessage.call(this, options);\n      };\n    }\n  },\n  onShow: function onShow() {\n    isHide = false;\n    stat.show(this);\n  },\n  onHide: function onHide() {\n    isHide = true;\n    stat.hide(this);\n  },\n  onUnload: function onUnload() {\n    if (isHide) {\n      isHide = false;\n      return;\n    }\n    stat.hide(this);\n  },\n  onError: function onError(e) {\n    stat.error(e);\n  } };\n\n\nfunction main() {\n  if (true) {\n    uni.report = function (type, options) {};\n  } else { var Vue; }\n}\n\nmain();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5\n");

/***/ }),

/***/ 6:
/*!******************************************************!*\
  !*** ./node_modules/@dcloudio/uni-stat/package.json ***!
  \******************************************************/
/*! exports provided: _from, _id, _inBundle, _integrity, _location, _phantomChildren, _requested, _requiredBy, _resolved, _shasum, _spec, _where, author, bugs, bundleDependencies, deprecated, description, devDependencies, files, gitHead, homepage, license, main, name, repository, scripts, version, default */
/***/ (function(module) {

eval("module.exports = {\"_from\":\"@dcloudio/uni-stat@alpha\",\"_id\":\"@dcloudio/uni-stat@2.0.0-alpha-25720200116005\",\"_inBundle\":false,\"_integrity\":\"sha512-RZFw3WAaS/CZTzzv9JPaWvmoNitojD/06vPdHSzlqZi8GbuE222lFuyochEjrGkG8rPPrWHAnwfoPBuQVtkfdg==\",\"_location\":\"/@dcloudio/uni-stat\",\"_phantomChildren\":{},\"_requested\":{\"type\":\"tag\",\"registry\":true,\"raw\":\"@dcloudio/uni-stat@alpha\",\"name\":\"@dcloudio/uni-stat\",\"escapedName\":\"@dcloudio%2funi-stat\",\"scope\":\"@dcloudio\",\"rawSpec\":\"alpha\",\"saveSpec\":null,\"fetchSpec\":\"alpha\"},\"_requiredBy\":[\"#USER\",\"/\",\"/@dcloudio/vue-cli-plugin-uni\"],\"_resolved\":\"https://registry.npmjs.org/@dcloudio/uni-stat/-/uni-stat-2.0.0-alpha-25720200116005.tgz\",\"_shasum\":\"08bb17aba91c84a981f33d74153aa3dd07b578ad\",\"_spec\":\"@dcloudio/uni-stat@alpha\",\"_where\":\"/Users/guoshengqiang/Documents/dcloud-plugins/alpha/uniapp-cli\",\"author\":\"\",\"bugs\":{\"url\":\"https://github.com/dcloudio/uni-app/issues\"},\"bundleDependencies\":false,\"deprecated\":false,\"description\":\"\",\"devDependencies\":{\"@babel/core\":\"^7.5.5\",\"@babel/preset-env\":\"^7.5.5\",\"eslint\":\"^6.1.0\",\"rollup\":\"^1.19.3\",\"rollup-plugin-babel\":\"^4.3.3\",\"rollup-plugin-clear\":\"^2.0.7\",\"rollup-plugin-commonjs\":\"^10.0.2\",\"rollup-plugin-copy\":\"^3.1.0\",\"rollup-plugin-eslint\":\"^7.0.0\",\"rollup-plugin-json\":\"^4.0.0\",\"rollup-plugin-node-resolve\":\"^5.2.0\",\"rollup-plugin-replace\":\"^2.2.0\",\"rollup-plugin-uglify\":\"^6.0.2\"},\"files\":[\"dist\",\"package.json\",\"LICENSE\"],\"gitHead\":\"a129bde60de35f7ef497f43d5a45b4556231995c\",\"homepage\":\"https://github.com/dcloudio/uni-app#readme\",\"license\":\"Apache-2.0\",\"main\":\"dist/index.js\",\"name\":\"@dcloudio/uni-stat\",\"repository\":{\"type\":\"git\",\"url\":\"git+https://github.com/dcloudio/uni-app.git\",\"directory\":\"packages/uni-stat\"},\"scripts\":{\"build\":\"NODE_ENV=production rollup -c rollup.config.js\",\"dev\":\"NODE_ENV=development rollup -w -c rollup.config.js\"},\"version\":\"2.0.0-alpha-25720200116005\"};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiI2LmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///6\n");

/***/ }),

/***/ 620:
/*!******************************************************************************!*\
  !*** E:/colorUI/ai_chat_front/ai_assist_front/components/uni-icons/icons.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _default = {\n  'contact': \"\\uE100\",\n  'person': \"\\uE101\",\n  'personadd': \"\\uE102\",\n  'contact-filled': \"\\uE130\",\n  'person-filled': \"\\uE131\",\n  'personadd-filled': \"\\uE132\",\n  'phone': \"\\uE200\",\n  'email': \"\\uE201\",\n  'chatbubble': \"\\uE202\",\n  'chatboxes': \"\\uE203\",\n  'phone-filled': \"\\uE230\",\n  'email-filled': \"\\uE231\",\n  'chatbubble-filled': \"\\uE232\",\n  'chatboxes-filled': \"\\uE233\",\n  'weibo': \"\\uE260\",\n  'weixin': \"\\uE261\",\n  'pengyouquan': \"\\uE262\",\n  'chat': \"\\uE263\",\n  'qq': \"\\uE264\",\n  'videocam': \"\\uE300\",\n  'camera': \"\\uE301\",\n  'mic': \"\\uE302\",\n  'location': \"\\uE303\",\n  'mic-filled': \"\\uE332\",\n  'speech': \"\\uE332\",\n  'location-filled': \"\\uE333\",\n  'micoff': \"\\uE360\",\n  'image': \"\\uE363\",\n  'map': \"\\uE364\",\n  'compose': \"\\uE400\",\n  'trash': \"\\uE401\",\n  'upload': \"\\uE402\",\n  'download': \"\\uE403\",\n  'close': \"\\uE404\",\n  'redo': \"\\uE405\",\n  'undo': \"\\uE406\",\n  'refresh': \"\\uE407\",\n  'star': \"\\uE408\",\n  'plus': \"\\uE409\",\n  'minus': \"\\uE410\",\n  'circle': \"\\uE411\",\n  'checkbox': \"\\uE411\",\n  'close-filled': \"\\uE434\",\n  'clear': \"\\uE434\",\n  'refresh-filled': \"\\uE437\",\n  'star-filled': \"\\uE438\",\n  'plus-filled': \"\\uE439\",\n  'minus-filled': \"\\uE440\",\n  'circle-filled': \"\\uE441\",\n  'checkbox-filled': \"\\uE442\",\n  'closeempty': \"\\uE460\",\n  'refreshempty': \"\\uE461\",\n  'reload': \"\\uE462\",\n  'starhalf': \"\\uE463\",\n  'spinner': \"\\uE464\",\n  'spinner-cycle': \"\\uE465\",\n  'search': \"\\uE466\",\n  'plusempty': \"\\uE468\",\n  'forward': \"\\uE470\",\n  'back': \"\\uE471\",\n  'left-nav': \"\\uE471\",\n  'checkmarkempty': \"\\uE472\",\n  'home': \"\\uE500\",\n  'navigate': \"\\uE501\",\n  'gear': \"\\uE502\",\n  'paperplane': \"\\uE503\",\n  'info': \"\\uE504\",\n  'help': \"\\uE505\",\n  'locked': \"\\uE506\",\n  'more': \"\\uE507\",\n  'flag': \"\\uE508\",\n  'home-filled': \"\\uE530\",\n  'gear-filled': \"\\uE532\",\n  'info-filled': \"\\uE534\",\n  'help-filled': \"\\uE535\",\n  'more-filled': \"\\uE537\",\n  'settings': \"\\uE560\",\n  'list': \"\\uE562\",\n  'bars': \"\\uE563\",\n  'loop': \"\\uE565\",\n  'paperclip': \"\\uE567\",\n  'eye': \"\\uE568\",\n  'arrowup': \"\\uE580\",\n  'arrowdown': \"\\uE581\",\n  'arrowleft': \"\\uE582\",\n  'arrowright': \"\\uE583\",\n  'arrowthinup': \"\\uE584\",\n  'arrowthindown': \"\\uE585\",\n  'arrowthinleft': \"\\uE586\",\n  'arrowthinright': \"\\uE587\",\n  'pulldown': \"\\uE588\",\n  'closefill': \"\\uE589\",\n  'sound': \"\\uE590\",\n  'scan': \"\\uE612\" };exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29tcG9uZW50cy91bmktaWNvbnMvaWNvbnMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6InNHQUFlO0FBQ2QsYUFBVyxRQURHO0FBRWQsWUFBVSxRQUZJO0FBR2QsZUFBYSxRQUhDO0FBSWQsb0JBQWtCLFFBSko7QUFLZCxtQkFBaUIsUUFMSDtBQU1kLHNCQUFvQixRQU5OO0FBT2QsV0FBUyxRQVBLO0FBUWQsV0FBUyxRQVJLO0FBU2QsZ0JBQWMsUUFUQTtBQVVkLGVBQWEsUUFWQztBQVdkLGtCQUFnQixRQVhGO0FBWWQsa0JBQWdCLFFBWkY7QUFhZCx1QkFBcUIsUUFiUDtBQWNkLHNCQUFvQixRQWROO0FBZWQsV0FBUyxRQWZLO0FBZ0JkLFlBQVUsUUFoQkk7QUFpQmQsaUJBQWUsUUFqQkQ7QUFrQmQsVUFBUSxRQWxCTTtBQW1CZCxRQUFNLFFBbkJRO0FBb0JkLGNBQVksUUFwQkU7QUFxQmQsWUFBVSxRQXJCSTtBQXNCZCxTQUFPLFFBdEJPO0FBdUJkLGNBQVksUUF2QkU7QUF3QmQsZ0JBQWMsUUF4QkE7QUF5QmQsWUFBVSxRQXpCSTtBQTBCZCxxQkFBbUIsUUExQkw7QUEyQmQsWUFBVSxRQTNCSTtBQTRCZCxXQUFTLFFBNUJLO0FBNkJkLFNBQU8sUUE3Qk87QUE4QmQsYUFBVyxRQTlCRztBQStCZCxXQUFTLFFBL0JLO0FBZ0NkLFlBQVUsUUFoQ0k7QUFpQ2QsY0FBWSxRQWpDRTtBQWtDZCxXQUFTLFFBbENLO0FBbUNkLFVBQVEsUUFuQ007QUFvQ2QsVUFBUSxRQXBDTTtBQXFDZCxhQUFXLFFBckNHO0FBc0NkLFVBQVEsUUF0Q007QUF1Q2QsVUFBUSxRQXZDTTtBQXdDZCxXQUFTLFFBeENLO0FBeUNkLFlBQVUsUUF6Q0k7QUEwQ2QsY0FBWSxRQTFDRTtBQTJDZCxrQkFBZ0IsUUEzQ0Y7QUE0Q2QsV0FBUyxRQTVDSztBQTZDZCxvQkFBa0IsUUE3Q0o7QUE4Q2QsaUJBQWUsUUE5Q0Q7QUErQ2QsaUJBQWUsUUEvQ0Q7QUFnRGQsa0JBQWdCLFFBaERGO0FBaURkLG1CQUFpQixRQWpESDtBQWtEZCxxQkFBbUIsUUFsREw7QUFtRGQsZ0JBQWMsUUFuREE7QUFvRGQsa0JBQWdCLFFBcERGO0FBcURkLFlBQVUsUUFyREk7QUFzRGQsY0FBWSxRQXRERTtBQXVEZCxhQUFXLFFBdkRHO0FBd0RkLG1CQUFpQixRQXhESDtBQXlEZCxZQUFVLFFBekRJO0FBMERkLGVBQWEsUUExREM7QUEyRGQsYUFBVyxRQTNERztBQTREZCxVQUFRLFFBNURNO0FBNkRkLGNBQVksUUE3REU7QUE4RGQsb0JBQWtCLFFBOURKO0FBK0RkLFVBQVEsUUEvRE07QUFnRWQsY0FBWSxRQWhFRTtBQWlFZCxVQUFRLFFBakVNO0FBa0VkLGdCQUFjLFFBbEVBO0FBbUVkLFVBQVEsUUFuRU07QUFvRWQsVUFBUSxRQXBFTTtBQXFFZCxZQUFVLFFBckVJO0FBc0VkLFVBQVEsUUF0RU07QUF1RWQsVUFBUSxRQXZFTTtBQXdFZCxpQkFBZSxRQXhFRDtBQXlFZCxpQkFBZSxRQXpFRDtBQTBFZCxpQkFBZSxRQTFFRDtBQTJFZCxpQkFBZSxRQTNFRDtBQTRFZCxpQkFBZSxRQTVFRDtBQTZFZCxjQUFZLFFBN0VFO0FBOEVkLFVBQVEsUUE5RU07QUErRWQsVUFBUSxRQS9FTTtBQWdGZCxVQUFRLFFBaEZNO0FBaUZkLGVBQWEsUUFqRkM7QUFrRmQsU0FBTyxRQWxGTztBQW1GZCxhQUFXLFFBbkZHO0FBb0ZkLGVBQWEsUUFwRkM7QUFxRmQsZUFBYSxRQXJGQztBQXNGZCxnQkFBYyxRQXRGQTtBQXVGZCxpQkFBZSxRQXZGRDtBQXdGZCxtQkFBaUIsUUF4Rkg7QUF5RmQsbUJBQWlCLFFBekZIO0FBMEZkLG9CQUFrQixRQTFGSjtBQTJGZCxjQUFZLFFBM0ZFO0FBNEZkLGVBQWEsUUE1RkM7QUE2RmQsV0FBUyxRQTdGSztBQThGZCxVQUFRLFFBOUZNLEUiLCJmaWxlIjoiNjIwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQge1xyXG5cdCdjb250YWN0JzogJ1xcdWUxMDAnLFxyXG5cdCdwZXJzb24nOiAnXFx1ZTEwMScsXHJcblx0J3BlcnNvbmFkZCc6ICdcXHVlMTAyJyxcclxuXHQnY29udGFjdC1maWxsZWQnOiAnXFx1ZTEzMCcsXHJcblx0J3BlcnNvbi1maWxsZWQnOiAnXFx1ZTEzMScsXHJcblx0J3BlcnNvbmFkZC1maWxsZWQnOiAnXFx1ZTEzMicsXHJcblx0J3Bob25lJzogJ1xcdWUyMDAnLFxyXG5cdCdlbWFpbCc6ICdcXHVlMjAxJyxcclxuXHQnY2hhdGJ1YmJsZSc6ICdcXHVlMjAyJyxcclxuXHQnY2hhdGJveGVzJzogJ1xcdWUyMDMnLFxyXG5cdCdwaG9uZS1maWxsZWQnOiAnXFx1ZTIzMCcsXHJcblx0J2VtYWlsLWZpbGxlZCc6ICdcXHVlMjMxJyxcclxuXHQnY2hhdGJ1YmJsZS1maWxsZWQnOiAnXFx1ZTIzMicsXHJcblx0J2NoYXRib3hlcy1maWxsZWQnOiAnXFx1ZTIzMycsXHJcblx0J3dlaWJvJzogJ1xcdWUyNjAnLFxyXG5cdCd3ZWl4aW4nOiAnXFx1ZTI2MScsXHJcblx0J3Blbmd5b3VxdWFuJzogJ1xcdWUyNjInLFxyXG5cdCdjaGF0JzogJ1xcdWUyNjMnLFxyXG5cdCdxcSc6ICdcXHVlMjY0JyxcclxuXHQndmlkZW9jYW0nOiAnXFx1ZTMwMCcsXHJcblx0J2NhbWVyYSc6ICdcXHVlMzAxJyxcclxuXHQnbWljJzogJ1xcdWUzMDInLFxyXG5cdCdsb2NhdGlvbic6ICdcXHVlMzAzJyxcclxuXHQnbWljLWZpbGxlZCc6ICdcXHVlMzMyJyxcclxuXHQnc3BlZWNoJzogJ1xcdWUzMzInLFxyXG5cdCdsb2NhdGlvbi1maWxsZWQnOiAnXFx1ZTMzMycsXHJcblx0J21pY29mZic6ICdcXHVlMzYwJyxcclxuXHQnaW1hZ2UnOiAnXFx1ZTM2MycsXHJcblx0J21hcCc6ICdcXHVlMzY0JyxcclxuXHQnY29tcG9zZSc6ICdcXHVlNDAwJyxcclxuXHQndHJhc2gnOiAnXFx1ZTQwMScsXHJcblx0J3VwbG9hZCc6ICdcXHVlNDAyJyxcclxuXHQnZG93bmxvYWQnOiAnXFx1ZTQwMycsXHJcblx0J2Nsb3NlJzogJ1xcdWU0MDQnLFxyXG5cdCdyZWRvJzogJ1xcdWU0MDUnLFxyXG5cdCd1bmRvJzogJ1xcdWU0MDYnLFxyXG5cdCdyZWZyZXNoJzogJ1xcdWU0MDcnLFxyXG5cdCdzdGFyJzogJ1xcdWU0MDgnLFxyXG5cdCdwbHVzJzogJ1xcdWU0MDknLFxyXG5cdCdtaW51cyc6ICdcXHVlNDEwJyxcclxuXHQnY2lyY2xlJzogJ1xcdWU0MTEnLFxyXG5cdCdjaGVja2JveCc6ICdcXHVlNDExJyxcclxuXHQnY2xvc2UtZmlsbGVkJzogJ1xcdWU0MzQnLFxyXG5cdCdjbGVhcic6ICdcXHVlNDM0JyxcclxuXHQncmVmcmVzaC1maWxsZWQnOiAnXFx1ZTQzNycsXHJcblx0J3N0YXItZmlsbGVkJzogJ1xcdWU0MzgnLFxyXG5cdCdwbHVzLWZpbGxlZCc6ICdcXHVlNDM5JyxcclxuXHQnbWludXMtZmlsbGVkJzogJ1xcdWU0NDAnLFxyXG5cdCdjaXJjbGUtZmlsbGVkJzogJ1xcdWU0NDEnLFxyXG5cdCdjaGVja2JveC1maWxsZWQnOiAnXFx1ZTQ0MicsXHJcblx0J2Nsb3NlZW1wdHknOiAnXFx1ZTQ2MCcsXHJcblx0J3JlZnJlc2hlbXB0eSc6ICdcXHVlNDYxJyxcclxuXHQncmVsb2FkJzogJ1xcdWU0NjInLFxyXG5cdCdzdGFyaGFsZic6ICdcXHVlNDYzJyxcclxuXHQnc3Bpbm5lcic6ICdcXHVlNDY0JyxcclxuXHQnc3Bpbm5lci1jeWNsZSc6ICdcXHVlNDY1JyxcclxuXHQnc2VhcmNoJzogJ1xcdWU0NjYnLFxyXG5cdCdwbHVzZW1wdHknOiAnXFx1ZTQ2OCcsXHJcblx0J2ZvcndhcmQnOiAnXFx1ZTQ3MCcsXHJcblx0J2JhY2snOiAnXFx1ZTQ3MScsXHJcblx0J2xlZnQtbmF2JzogJ1xcdWU0NzEnLFxyXG5cdCdjaGVja21hcmtlbXB0eSc6ICdcXHVlNDcyJyxcclxuXHQnaG9tZSc6ICdcXHVlNTAwJyxcclxuXHQnbmF2aWdhdGUnOiAnXFx1ZTUwMScsXHJcblx0J2dlYXInOiAnXFx1ZTUwMicsXHJcblx0J3BhcGVycGxhbmUnOiAnXFx1ZTUwMycsXHJcblx0J2luZm8nOiAnXFx1ZTUwNCcsXHJcblx0J2hlbHAnOiAnXFx1ZTUwNScsXHJcblx0J2xvY2tlZCc6ICdcXHVlNTA2JyxcclxuXHQnbW9yZSc6ICdcXHVlNTA3JyxcclxuXHQnZmxhZyc6ICdcXHVlNTA4JyxcclxuXHQnaG9tZS1maWxsZWQnOiAnXFx1ZTUzMCcsXHJcblx0J2dlYXItZmlsbGVkJzogJ1xcdWU1MzInLFxyXG5cdCdpbmZvLWZpbGxlZCc6ICdcXHVlNTM0JyxcclxuXHQnaGVscC1maWxsZWQnOiAnXFx1ZTUzNScsXHJcblx0J21vcmUtZmlsbGVkJzogJ1xcdWU1MzcnLFxyXG5cdCdzZXR0aW5ncyc6ICdcXHVlNTYwJyxcclxuXHQnbGlzdCc6ICdcXHVlNTYyJyxcclxuXHQnYmFycyc6ICdcXHVlNTYzJyxcclxuXHQnbG9vcCc6ICdcXHVlNTY1JyxcclxuXHQncGFwZXJjbGlwJzogJ1xcdWU1NjcnLFxyXG5cdCdleWUnOiAnXFx1ZTU2OCcsXHJcblx0J2Fycm93dXAnOiAnXFx1ZTU4MCcsXHJcblx0J2Fycm93ZG93bic6ICdcXHVlNTgxJyxcclxuXHQnYXJyb3dsZWZ0JzogJ1xcdWU1ODInLFxyXG5cdCdhcnJvd3JpZ2h0JzogJ1xcdWU1ODMnLFxyXG5cdCdhcnJvd3RoaW51cCc6ICdcXHVlNTg0JyxcclxuXHQnYXJyb3d0aGluZG93bic6ICdcXHVlNTg1JyxcclxuXHQnYXJyb3d0aGlubGVmdCc6ICdcXHVlNTg2JyxcclxuXHQnYXJyb3d0aGlucmlnaHQnOiAnXFx1ZTU4NycsXHJcblx0J3B1bGxkb3duJzogJ1xcdWU1ODgnLFxyXG5cdCdjbG9zZWZpbGwnOiAnXFx1ZTU4OScsXHJcblx0J3NvdW5kJzogJ1xcdWU1OTAnLFxyXG5cdCdzY2FuJzogJ1xcdWU2MTInXHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///620\n");

/***/ }),

/***/ 7:
/*!****************************************************************************!*\
  !*** E:/colorUI/ai_chat_front/ai_assist_front/pages.json?{"type":"style"} ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _default = { \"pages\": { \"pages/index/index\": { \"navigationBarTitleText\": \"魔小秘\", \"titleNView\": false }, \"pages/IncomeHome/IncomeHome\": { \"navigationBarTitleText\": \"魔秘来电\", \"enablePullDownRefresh\": true, \"backgroundTextStyle\": \"dark\", \"titleNView\": false }, \"pages/IncomeHome/focus/focus\": { \"navigationBarTitleText\": \"关注公众号\", \"titleNView\": false }, \"pages/CustomPage/CustomPage\": { \"navigationBarTitleText\": \"专属定制\", \"enablePullDownRefresh\": true, \"backgroundTextStyle\": \"dark\", \"titleNView\": false }, \"pages/MinePage/MinePage\": { \"navigationBarTitleText\": \"个人中心\", \"enablePullDownRefresh\": true, \"backgroundTextStyle\": \"dark\", \"titleNView\": false }, \"pages/SettingPage/SettingPage\": { \"navigationBarTitleText\": \"接听配置\", \"titleNView\": false }, \"pages/IncomeHome/search/search\": { \"navigationBarTitleText\": \"搜索来电\", \"titleNView\": false }, \"pages/IncomeHome/callDetails/callDetails\": { \"navigationBarTitleText\": \"通话详情\", \"titleNView\": false }, \"pages/CustomPage/editOpen/editOpen\": { \"navigationBarTitleText\": \"编辑开场白\", \"titleNView\": false }, \"pages/MinePage/MineWallet/MineWallet\": { \"navigationBarTitleText\": \"我的钱包\", \"enablePullDownRefresh\": true, \"backgroundTextStyle\": \"dark\", \"titleNView\": false }, \"pages/MinePage/MineWalletDetail/MineWalletDetail\": { \"navigationBarTitleText\": \"明细详情\", \"titleNView\": false }, \"pages/MinePage/MineWithDraw/MineWithDraw\": { \"navigationBarTitleText\": \"提现\", \"titleNView\": false }, \"pages/MinePage/MineVipPage/MineVipPage\": { \"navigationBarTitleText\": \"我的VIP\", \"titleNView\": false }, \"pages/MinePage/personalData/personalData\": { \"navigationBarTitleText\": \"个人信息\", \"titleNView\": false }, \"pages/MinePage/aboutMXM/aboutMXM\": { \"navigationBarTitleText\": \"关于魔小秘\", \"titleNView\": false }, \"pages/Welcome/Welcome\": { \"navigationBarTitleText\": \"服务介绍\", \"titleNView\": false }, \"pages/Login/bindMobile\": { \"navigationBarTitleText\": \"魔小秘\", \"titleNView\": false }, \"pages/Login/callList/callList\": { \"navigationBarTitleText\": \"注册\", \"titleNView\": false }, \"pages/Login/callListDetail/callListDetail\": { \"navigationBarTitleText\": \"注册\", \"titleNView\": false }, \"pages/Login/Invite/InviteNewUser\": { \"navigationBarTitleText\": \"领取折扣优惠券\", \"titleNView\": false }, \"pages/Login/RegisterSucc/RegisterSucc\": {}, \"pages/Login/Invite/Invite\": { \"navigationBarTitleText\": \"邀请赚钱\", \"enablePullDownRefresh\": true, \"backgroundTextStyle\": \"dark\", \"titleNView\": false }, \"pages/Login/Loginin/Loginin\": {}, \"pages/CustomPage/AddressBook/AddressBook\": { \"navigationBarTitleText\": \"通讯录\", \"titleNView\": false }, \"pages/CustomPage/AddContact/AddContact\": { \"navigationBarTitleText\": \"添加联系人\", \"titleNView\": false }, \"pages/CustomPage/ContactDetail/ContactDetail\": { \"navigationBarTitleText\": \"通讯录详情\", \"enablePullDownRefresh\": true, \"backgroundTextStyle\": \"dark\", \"titleNView\": false }, \"pages/MinePage/Coupons/Coupons\": { \"navigationBarTitleText\": \"选择优惠券\", \"titleNView\": false }, \"pages/JumpLogin/JumpLogin\": { \"navigationBarTitleText\": \"跳转\", \"titleNView\": false }, \"pages/partner/partner\": { \"navigationBarTitleText\": \"合伙人\", \"enablePullDownRefresh\": true, \"backgroundTextStyle\": \"dark\", \"titleNView\": false }, \"pages/camilo/camilo\": { \"navigationBarTitleText\": \"卡密激活\", \"titleNView\": false }, \"pages/partner/balanceSubsidiary/balanceSubsidiary\": { \"navigationBarTitleText\": \"余额明细\", \"titleNView\": false }, \"pages/partner/partnerBind/partnerBind\": { \"navigationBarTitleText\": \"账号绑定\", \"titleNView\": false }, \"pages/partner/partnerInvite/partnerInvite\": { \"navigationBarTitleText\": \"我的邀请\", \"enablePullDownRefresh\": true, \"backgroundTextStyle\": \"dark\", \"titleNView\": false }, \"pages/partner/partnerInviteNew/partnerInviteNew\": { \"navigationBarTitleText\": \"邀请使用\", \"titleNView\": false }, \"pages/Login/Invite/inviteDetail\": { \"navigationBarTitleText\": \"我的邀请\", \"enablePullDownRefresh\": true, \"backgroundTextStyle\": \"dark\", \"titleNView\": false }, \"pages/helpCenter/helpCenter\": { \"navigationBarTitleText\": \"帮助中心\", \"titleNView\": false }, \"pages/helpCenter/about\": { \"navigationBarTitleText\": \"关于魔小秘\", \"titleNView\": false }, \"pages/helpCenter/callForwarding\": { \"navigationBarTitleText\": \"什么是呼叫转移\", \"titleNView\": false }, \"pages/helpCenter/isSetting\": { \"navigationBarTitleText\": \"如何查询是否设置成功\", \"titleNView\": false }, \"pages/helpCenter/downtime\": { \"navigationBarTitleText\": \"手机停机后是否还能正常使用\", \"titleNView\": false }, \"pages/helpCenter/ensureSafety\": { \"navigationBarTitleText\": \"魔小秘如何保障数据安全\", \"titleNView\": false }, \"pages/helpCenter/feedBack\": { \"navigationBarTitleText\": \"如何反馈问题\", \"titleNView\": false }, \"pages/MinePage/haveASaying/haveASaying\": { \"navigationBarTitleText\": \"我有话说\", \"titleNView\": false }, \"pages/Welcome/guide/guide\": { \"navigationBarTitleText\": \"启用魔小秘\", \"titleNView\": false }, \"pages/partner/partnerDraw/partnerDraw\": { \"navigationBarTitleText\": \"提现\", \"titleNView\": false }, \"pages/partner/regSucc/regSucc\": { \"navigationBarTitleText\": \"注册成功\", \"titleNView\": false }, \"pages/partner/partnerJumpLogin/partnerJumpLogin\": { \"navigationBarTitleText\": \"跳转\", \"titleNView\": false }, \"pages/partner/partnerTip/partnerTip\": { \"navigationBarTitleText\": \"提示\", \"titleNView\": false }, \"pages/Welcome/guideNew/guideNew\": { \"navigationBarTitleText\": \"引导页面\", \"titleNView\": false }, \"pages/helpCenter/setFail\": { \"navigationBarTitleText\": \"设置失败\", \"titleNView\": false }, \"static/userAgreement/userAgreement\": { \"navigationBarTitleText\": \"隐私协议\", \"titleNView\": false }, \"static/privacyAgreement/privacyAgreement\": { \"navigationBarTitleText\": \"用户协议\", \"titleNView\": false }, \"pages/Login/Courier/Courier\": { \"navigationBarTitleText\": \"外卖\", \"titleNView\": false }, \"pages/Login/business/business\": { \"navigationBarTitleText\": \"商务\", \"titleNView\": false }, \"pages/Login/collection/collection\": { \"navigationBarTitleText\": \"催收\", \"titleNView\": false }, \"pages/IncomeHome/callList\": { \"navigationBarTitleText\": \"通话列表\", \"enablePullDownRefresh\": true, \"backgroundTextStyle\": \"dark\", \"titleNView\": false }, \"pages/MinePage/exclusiveNum/exclusiveNum\": { \"navigationBarTitleText\": \"专属转接号码\", \"titleNView\": false }, \"pages/partner/camiloPackage/camiloPackage\": { \"navigationBarTitleText\": \"卡密包\", \"enablePullDownRefresh\": true, \"backgroundTextStyle\": \"dark\", \"titleNView\": false }, \"pages/partner/camiDetail/camiDetail\": { \"navigationBarTitleText\": \"卡密详情\", \"enablePullDownRefresh\": true, \"backgroundTextStyle\": \"dark\", \"titleNView\": false }, \"pages/MinePage/WxService/WxService\": { \"navigationBarTitleText\": \"微信客服\", \"titleNView\": false }, \"pages/commonWebView/commonWebView\": { \"navigationBarTitleText\": \"链接\", \"titleNView\": false }, \"static/cooperationAgree/cooperationAgree\": { \"navigationBarTitleText\": \"共享经济合作伙伴协议\", \"titleNView\": false }, \"pages/SettingPage/Setting/Setting\": { \"navigationBarTitleText\": \"接听配置\", \"titleNView\": false }, \"pages/SettingPage/CustomReply/CustomReply\": { \"navigationBarTitleText\": \"自定义回复\", \"titleNView\": false }, \"pages/SettingPage/RejectionBlacklist/RejectionBlacklist\": { \"navigationBarTitleText\": \"拒接黑名单\", \"titleNView\": false }, \"pages/SettingPage/AddScene/AddScene\": { \"navigationBarTitleText\": \"新增场景\", \"titleNView\": false }, \"pages/SettingPage/addBlack/addBlack\": { \"navigationBarTitleText\": \"添加黑名单\", \"titleNView\": false }, \"pages/SettingPage/setReply/setReply\": { \"navigationBarTitleText\": \"设置回复\", \"titleNView\": false }, \"pages/SettingPage/OpenUnsuccessful/OpenUnsuccessful\": { \"navigationBarTitleText\": \"开启不成功\", \"titleNView\": false }, \"pages/greenChannel/greenChannel\": { \"navigationBarTitleText\": \"绿色通道\", \"titleNView\": false }, \"pages/MinePage/AutomaticRenewal/AutomaticRenewal\": { \"navigationBarTitleText\": \"我的VIP\", \"titleNView\": false } }, \"globalStyle\": { \"navigationBarTextStyle\": \"black\", \"navigationBarTitleText\": \"uni-app\", \"navigationBarBackgroundColor\": \"#FFFFFF\", \"backgroundColor\": \"#FFFFFF\" } };exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7\n");

/***/ }),

/***/ 8:
/*!***************************************************************************!*\
  !*** E:/colorUI/ai_chat_front/ai_assist_front/pages.json?{"type":"stat"} ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _default = { \"appid\": \"__UNI__9800B5A\" };exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJzR0FBZSxFQUFDLFNBQVEsZ0JBQVQsRSIsImZpbGUiOiI4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQge1wiYXBwaWRcIjpcIl9fVU5JX185ODAwQjVBXCJ9Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///8\n");

/***/ })

}]);